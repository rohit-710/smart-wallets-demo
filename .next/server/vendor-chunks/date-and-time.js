/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/date-and-time";
exports.ids = ["vendor-chunks/date-and-time"];
exports.modules = {

/***/ "(ssr)/./node_modules/date-and-time/date-and-time.js":
/*!*****************************************************!*\
  !*** ./node_modules/date-and-time/date-and-time.js ***!
  \*****************************************************/
/***/ (function(module) {

eval("(function (global, factory) {\n     true ? module.exports = factory() :\n    0;\n})(this, (function () { 'use strict';\n\n    /**\n     * @preserve date-and-time (c) KNOWLEDGECODE | MIT\n     */\n\n    var locales = {},\n        plugins = {},\n        lang = 'en',\n        _res = {\n            MMMM: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n            MMM: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n            dddd: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n            ddd: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            dd: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n            A: ['AM', 'PM']\n        },\n        _formatter = {\n            YYYY: function (d/*, formatString*/) { return ('000' + d.getFullYear()).slice(-4); },\n            YY: function (d/*, formatString*/) { return ('0' + d.getFullYear()).slice(-2); },\n            Y: function (d/*, formatString*/) { return '' + d.getFullYear(); },\n            MMMM: function (d/*, formatString*/) { return this.res.MMMM[d.getMonth()]; },\n            MMM: function (d/*, formatString*/) { return this.res.MMM[d.getMonth()]; },\n            MM: function (d/*, formatString*/) { return ('0' + (d.getMonth() + 1)).slice(-2); },\n            M: function (d/*, formatString*/) { return '' + (d.getMonth() + 1); },\n            DD: function (d/*, formatString*/) { return ('0' + d.getDate()).slice(-2); },\n            D: function (d/*, formatString*/) { return '' + d.getDate(); },\n            HH: function (d/*, formatString*/) { return ('0' + d.getHours()).slice(-2); },\n            H: function (d/*, formatString*/) { return '' + d.getHours(); },\n            A: function (d/*, formatString*/) { return this.res.A[d.getHours() > 11 | 0]; },\n            hh: function (d/*, formatString*/) { return ('0' + (d.getHours() % 12 || 12)).slice(-2); },\n            h: function (d/*, formatString*/) { return '' + (d.getHours() % 12 || 12); },\n            mm: function (d/*, formatString*/) { return ('0' + d.getMinutes()).slice(-2); },\n            m: function (d/*, formatString*/) { return '' + d.getMinutes(); },\n            ss: function (d/*, formatString*/) { return ('0' + d.getSeconds()).slice(-2); },\n            s: function (d/*, formatString*/) { return '' + d.getSeconds(); },\n            SSS: function (d/*, formatString*/) { return ('00' + d.getMilliseconds()).slice(-3); },\n            SS: function (d/*, formatString*/) { return ('0' + (d.getMilliseconds() / 10 | 0)).slice(-2); },\n            S: function (d/*, formatString*/) { return '' + (d.getMilliseconds() / 100 | 0); },\n            dddd: function (d/*, formatString*/) { return this.res.dddd[d.getDay()]; },\n            ddd: function (d/*, formatString*/) { return this.res.ddd[d.getDay()]; },\n            dd: function (d/*, formatString*/) { return this.res.dd[d.getDay()]; },\n            Z: function (d/*, formatString*/) {\n                var offset = d.getTimezoneOffset() / 0.6 | 0;\n                return (offset > 0 ? '-' : '+') + ('000' + Math.abs(offset - (offset % 100 * 0.4 | 0))).slice(-4);\n            },\n            ZZ: function (d/*, formatString*/) {\n                var offset = d.getTimezoneOffset();\n                var mod = Math.abs(offset);\n                return (offset > 0 ? '-' : '+') + ('0' + (mod / 60 | 0)).slice(-2) + ':' + ('0' + mod % 60).slice(-2);\n            },\n            post: function (str) { return str; },\n            res: _res\n        },\n        _parser = {\n            YYYY: function (str/*, formatString */) { return this.exec(/^\\d{4}/, str); },\n            Y: function (str/*, formatString */) { return this.exec(/^\\d{1,4}/, str); },\n            MMMM: function (str/*, formatString */) {\n                var result = this.find(this.res.MMMM, str);\n                result.value++;\n                return result;\n            },\n            MMM: function (str/*, formatString */) {\n                var result = this.find(this.res.MMM, str);\n                result.value++;\n                return result;\n            },\n            MM: function (str/*, formatString */) { return this.exec(/^\\d\\d/, str); },\n            M: function (str/*, formatString */) { return this.exec(/^\\d\\d?/, str); },\n            DD: function (str/*, formatString */) { return this.exec(/^\\d\\d/, str); },\n            D: function (str/*, formatString */) { return this.exec(/^\\d\\d?/, str); },\n            HH: function (str/*, formatString */) { return this.exec(/^\\d\\d/, str); },\n            H: function (str/*, formatString */) { return this.exec(/^\\d\\d?/, str); },\n            A: function (str/*, formatString */) { return this.find(this.res.A, str); },\n            hh: function (str/*, formatString */) { return this.exec(/^\\d\\d/, str); },\n            h: function (str/*, formatString */) { return this.exec(/^\\d\\d?/, str); },\n            mm: function (str/*, formatString */) { return this.exec(/^\\d\\d/, str); },\n            m: function (str/*, formatString */) { return this.exec(/^\\d\\d?/, str); },\n            ss: function (str/*, formatString */) { return this.exec(/^\\d\\d/, str); },\n            s: function (str/*, formatString */) { return this.exec(/^\\d\\d?/, str); },\n            SSS: function (str/*, formatString */) { return this.exec(/^\\d{1,3}/, str); },\n            SS: function (str/*, formatString */) {\n                var result = this.exec(/^\\d\\d?/, str);\n                result.value *= 10;\n                return result;\n            },\n            S: function (str/*, formatString */) {\n                var result = this.exec(/^\\d/, str);\n                result.value *= 100;\n                return result;\n            },\n            Z: function (str/*, formatString */) {\n                var result = this.exec(/^[\\+-]\\d{2}[0-5]\\d/, str);\n                result.value = (result.value / 100 | 0) * -60 - result.value % 100;\n                return result;\n            },\n            ZZ: function (str/*, formatString */) {\n                var arr = /^([\\+-])(\\d{2}):([0-5]\\d)/.exec(str) || ['', '', '', ''];\n                return { value: 0 - ((arr[1] + arr[2] | 0) * 60 + (arr[1] + arr[3] | 0)), length: arr[0].length };\n            },\n            h12: function (h, a) { return (h === 12 ? 0 : h) + a * 12; },\n            exec: function (re, str) {\n                var result = (re.exec(str) || [''])[0];\n                return { value: result | 0, length: result.length };\n            },\n            find: function (array, str) {\n                var index = -1, length = 0;\n\n                for (var i = 0, len = array.length, item; i < len; i++) {\n                    item = array[i];\n                    if (!str.indexOf(item) && item.length > length) {\n                        index = i;\n                        length = item.length;\n                    }\n                }\n                return { value: index, length: length };\n            },\n            pre: function (str) { return str; },\n            res: _res\n        },\n        extend = function (base, props, override, res) {\n            var obj = {}, key;\n\n            for (key in base) {\n                obj[key] = base[key];\n            }\n            for (key in props || {}) {\n                if (!(!!override ^ !!obj[key])) {\n                    obj[key] = props[key];\n                }\n            }\n            if (res) {\n                obj.res = res;\n            }\n            return obj;\n        },\n        proto = {\n            _formatter: _formatter,\n            _parser: _parser\n        },\n        localized_proto,\n        date;\n\n    /**\n     * Compiling format strings\n     * @param {string} formatString - A format string\n     * @returns {Array.<string>} A compiled object\n     */\n    proto.compile = function (formatString) {\n        var re = /\\[([^\\[\\]]|\\[[^\\[\\]]*])*]|([A-Za-z])\\2+|\\.{3}|./g, keys, pattern = [formatString];\n\n        while ((keys = re.exec(formatString))) {\n            pattern[pattern.length] = keys[0];\n        }\n        return pattern;\n    };\n\n    /**\n     * Formatting date and time objects (Date -> String)\n     * @param {Date} dateObj - A Date object\n     * @param {string|Array.<string>} arg - A format string or its compiled object\n     * @param {boolean} [utc] - Output as UTC\n     * @returns {string} A formatted string\n     */\n    proto.format = function (dateObj, arg, utc) {\n        var ctx = this || date, pattern = typeof arg === 'string' ? ctx.compile(arg) : arg,\n            offset = dateObj.getTimezoneOffset(),\n            d = ctx.addMinutes(dateObj, utc ? offset : 0),\n            formatter = ctx._formatter, str = '';\n\n        d.getTimezoneOffset = function () { return utc ? 0 : offset; };\n        for (var i = 1, len = pattern.length, token; i < len; i++) {\n            token = pattern[i];\n            str += formatter[token] ? formatter.post(formatter[token](d, pattern[0])) : token.replace(/\\[(.*)]/, '$1');\n        }\n        return str;\n    };\n\n    /**\n     * Pre-parsing date and time strings\n     * @param {string} dateString - A date and time string\n     * @param {string|Array.<string>} arg - A format string or its compiled object\n     * @param {boolean} [utc] - Input as UTC\n     * @returns {Object} A pre-parsed result object\n     */\n    proto.preparse = function (dateString, arg) {\n        var ctx = this || date, pattern = typeof arg === 'string' ? ctx.compile(arg) : arg,\n            dt = { Y: 1970, M: 1, D: 1, H: 0, A: 0, h: 0, m: 0, s: 0, S: 0, Z: 0, _index: 0, _length: 0, _match: 0 },\n            comment = /\\[(.*)]/, parser = ctx._parser, offset = 0;\n\n        dateString = parser.pre(dateString);\n        for (var i = 1, len = pattern.length, token, result; i < len; i++) {\n            token = pattern[i];\n            if (parser[token]) {\n                result = parser[token](dateString.slice(offset), pattern[0]);\n                if (!result.length) {\n                    break;\n                }\n                offset += result.length;\n                dt[result.token || token.charAt(0)] = result.value;\n                dt._match++;\n            } else if (token === dateString.charAt(offset) || token === ' ') {\n                offset++;\n            } else if (comment.test(token) && !dateString.slice(offset).indexOf(comment.exec(token)[1])) {\n                offset += token.length - 2;\n            } else if (token === '...') {\n                offset = dateString.length;\n                break;\n            } else {\n                break;\n            }\n        }\n        dt.H = dt.H || parser.h12(dt.h, dt.A);\n        dt._index = offset;\n        dt._length = dateString.length;\n        return dt;\n    };\n\n    /**\n     * Parsing of date and time string (String -> Date)\n     * @param {string} dateString - A date-time string\n     * @param {string|Array.<string>} arg - A format string or its compiled object\n     * @param {boolean} [utc] - Input as UTC\n     * @returns {Date} A Date object\n     */\n    proto.parse = function (dateString, arg, utc) {\n        var ctx = this || date, pattern = typeof arg === 'string' ? ctx.compile(arg) : arg,\n            dt = ctx.preparse(dateString, pattern);\n\n        if (ctx.isValid(dt)) {\n            dt.M -= dt.Y < 100 ? 22801 : 1; // 22801 = 1900 * 12 + 1\n            if (utc || ~ctx._parser.find(pattern, 'ZZ').value) {\n                return new Date(Date.UTC(dt.Y, dt.M, dt.D, dt.H, dt.m + dt.Z, dt.s, dt.S));\n            }\n            return new Date(dt.Y, dt.M, dt.D, dt.H, dt.m, dt.s, dt.S);\n        }\n        return new Date(NaN);\n    };\n\n    /**\n     * Date and time string validation\n     * @param {Object|string} arg1 - A pre-parsed result object or a date and time string\n     * @param {string|Array.<string>} [arg2] - A format string or its compiled object\n     * @returns {boolean} Whether the date and time string is a valid date and time\n     */\n    proto.isValid = function (arg1, arg2) {\n        var ctx = this || date, dt = typeof arg1 === 'string' ? ctx.preparse(arg1, arg2) : arg1,\n            last = [31, 28 + ctx.isLeapYear(dt.Y) | 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][dt.M - 1];\n\n        return !(\n            dt._index < 1 || dt._length < 1 || dt._index - dt._length || dt._match < 1 ||\n            dt.Y < 1 || dt.Y > 9999 || dt.M < 1 || dt.M > 12 || dt.D < 1 || dt.D > last ||\n            dt.H < 0 || dt.H > 23 || dt.m < 0 || dt.m > 59 || dt.s < 0 || dt.s > 59 || dt.S < 0 || dt.S > 999 ||\n            dt.Z < -840 || dt.Z > 720\n        );\n    };\n\n    /**\n     * Format transformation of date and time string (String -> String)\n     * @param {string} dateString - A date and time string\n     * @param {string|Array.<string>} arg1 - A format string or its compiled object before transformation\n     * @param {string|Array.<string>} arg2 - A format string or its compiled object after transformation\n     * @param {boolean} [utc] - Output as UTC\n     * @returns {string} A formatted string\n     */\n    proto.transform = function (dateString, arg1, arg2, utc) {\n        const ctx = this || date;\n        return ctx.format(ctx.parse(dateString, arg1), arg2, utc);\n    };\n\n    /**\n     * Adding years\n     * @param {Date} dateObj - A Date object\n     * @param {number} years - Number of years to add\n     * @returns {Date} The Date object after adding the value\n     */\n    proto.addYears = function (dateObj, years) {\n        return (this || date).addMonths(dateObj, years * 12);\n    };\n\n    /**\n     * Adding months\n     * @param {Date} dateObj - A Date object\n     * @param {number} months - Number of months to add\n     * @returns {Date} The Date object after adding the value\n     */\n    proto.addMonths = function (dateObj, months) {\n        var d = new Date(dateObj.getTime());\n\n        d.setUTCMonth(d.getUTCMonth() + months);\n        return d;\n    };\n\n    /**\n     * Adding days\n     * @param {Date} dateObj - A Date object\n     * @param {number} days - Number of days to add\n     * @returns {Date} The Date object after adding the value\n     */\n    proto.addDays = function (dateObj, days) {\n        var d = new Date(dateObj.getTime());\n\n        d.setUTCDate(d.getUTCDate() + days);\n        return d;\n    };\n\n    /**\n     * Adding hours\n     * @param {Date} dateObj - A Date object\n     * @param {number} hours - Number of hours to add\n     * @returns {Date} The Date object after adding the value\n     */\n    proto.addHours = function (dateObj, hours) {\n        return (this || date).addMinutes(dateObj, hours * 60);\n    };\n\n    /**\n     * Adding minutes\n     * @param {Date} dateObj - A Date object\n     * @param {number} minutes - Number of minutes to add\n     * @returns {Date} The Date object after adding the value\n     */\n    proto.addMinutes = function (dateObj, minutes) {\n        return (this || date).addSeconds(dateObj, minutes * 60);\n    };\n\n    /**\n     * Adding seconds\n     * @param {Date} dateObj - A Date object\n     * @param {number} seconds - Number of seconds to add\n     * @returns {Date} The Date object after adding the value\n     */\n    proto.addSeconds = function (dateObj, seconds) {\n        return (this || date).addMilliseconds(dateObj, seconds * 1000);\n    };\n\n    /**\n     * Adding milliseconds\n     * @param {Date} dateObj - A Date object\n     * @param {number} milliseconds - Number of milliseconds to add\n     * @returns {Date} The Date object after adding the value\n     */\n    proto.addMilliseconds = function (dateObj, milliseconds) {\n        return new Date(dateObj.getTime() + milliseconds);\n    };\n\n    /**\n     * Subtracting two dates (date1 - date2)\n     * @param {Date} date1 - A Date object\n     * @param {Date} date2 - A Date object\n     * @returns {Object} The result object of subtracting date2 from date1\n     */\n    proto.subtract = function (date1, date2) {\n        var delta = date1.getTime() - date2.getTime();\n\n        return {\n            toMilliseconds: function () {\n                return delta;\n            },\n            toSeconds: function () {\n                return delta / 1000;\n            },\n            toMinutes: function () {\n                return delta / 60000;\n            },\n            toHours: function () {\n                return delta / 3600000;\n            },\n            toDays: function () {\n                return delta / 86400000;\n            }\n        };\n    };\n\n    /**\n     * Whether a year is a leap year\n     * @param {number} y - A year to check\n     * @returns {boolean} Whether the year is a leap year\n     */\n    proto.isLeapYear = function (y) {\n        return (!(y % 4) && !!(y % 100)) || !(y % 400);\n    };\n\n    /**\n     * Comparison of two dates\n     * @param {Date} date1 - A Date object\n     * @param {Date} date2 - A Date object\n     * @returns {boolean} Whether the two dates are the same day (time is ignored)\n     */\n    proto.isSameDay = function (date1, date2) {\n        return date1.toDateString() === date2.toDateString();\n    };\n\n    /**\n     * Definition of new locale\n     * @param {string} code - A language code\n     * @param {Function} locale - A locale installer\n     * @returns {void}\n     */\n    proto.locale = function (code, locale) {\n        if (!locales[code]) {\n            locales[code] = locale;\n        }\n    };\n\n    /**\n     * Definition of new plugin\n     * @param {string} name - A plugin name\n     * @param {Function} plugin - A plugin installer\n     * @returns {void}\n     */\n    proto.plugin = function (name, plugin) {\n        if (!plugins[name]) {\n            plugins[name] = plugin;\n        }\n    };\n\n    localized_proto = extend(proto);\n    date = extend(proto);\n\n    /**\n     * Changing locales\n     * @param {Function|string} [locale] - A locale installer or language code\n     * @returns {string} The current language code\n     */\n    date.locale = function (locale) {\n        var install = typeof locale === 'function' ? locale : date.locale[locale];\n\n        if (!install) {\n            return lang;\n        }\n        lang = install(proto);\n\n        var extension = locales[lang] || {};\n        var res = extend(_res, extension.res, true);\n        var formatter = extend(_formatter, extension.formatter, true, res);\n        var parser = extend(_parser, extension.parser, true, res);\n\n        date._formatter = localized_proto._formatter = formatter;\n        date._parser = localized_proto._parser = parser;\n\n        for (var plugin in plugins) {\n            date.extend(plugins[plugin]);\n        }\n\n        return lang;\n    };\n\n    /**\n     * Functional extension\n     * @param {Object} extension - An extension object\n     * @returns {void}\n     */\n    date.extend = function (extension) {\n        var res = extend(date._parser.res, extension.res);\n        var extender = extension.extender || {};\n\n        date._formatter = extend(date._formatter, extension.formatter, false, res);\n        date._parser = extend(date._parser, extension.parser, false, res);\n\n        for (var key in extender) {\n            if (!date[key]) {\n                date[key] = extender[key];\n            }\n        }\n    };\n\n    /**\n     * Importing plugins\n     * @param {Function|string} plugin - A plugin installer or plugin name\n     * @returns {void}\n     */\n    date.plugin = function (plugin) {\n        var install = typeof plugin === 'function' ? plugin : date.plugin[plugin];\n\n        if (install) {\n            date.extend(plugins[install(proto, localized_proto)] || {});\n        }\n    };\n\n    var date$1 = date;\n\n    return date$1;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/date-and-time/date-and-time.js\n");

/***/ })

};
;