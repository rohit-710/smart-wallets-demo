"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@toruslabs";
exports.ids = ["vendor-chunks/@toruslabs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACCOUNT_CATEGORY: () => (/* binding */ ACCOUNT_CATEGORY),\n/* harmony export */   ACTIVITY_ACTION: () => (/* binding */ ACTIVITY_ACTION),\n/* harmony export */   ACTIVITY_ACTION_ACCEPT_NFT_OFFER: () => (/* binding */ ACTIVITY_ACTION_ACCEPT_NFT_OFFER),\n/* harmony export */   ACTIVITY_ACTION_ALL: () => (/* binding */ ACTIVITY_ACTION_ALL),\n/* harmony export */   ACTIVITY_ACTION_BURN: () => (/* binding */ ACTIVITY_ACTION_BURN),\n/* harmony export */   ACTIVITY_ACTION_CANCEL_NFT_OFFER: () => (/* binding */ ACTIVITY_ACTION_CANCEL_NFT_OFFER),\n/* harmony export */   ACTIVITY_ACTION_CREATE_NFT_OFFER: () => (/* binding */ ACTIVITY_ACTION_CREATE_NFT_OFFER),\n/* harmony export */   ACTIVITY_ACTION_CREATE_TRUSTLINE: () => (/* binding */ ACTIVITY_ACTION_CREATE_TRUSTLINE),\n/* harmony export */   ACTIVITY_ACTION_RECEIVE: () => (/* binding */ ACTIVITY_ACTION_RECEIVE),\n/* harmony export */   ACTIVITY_ACTION_REMOVE_TRUSTLINE: () => (/* binding */ ACTIVITY_ACTION_REMOVE_TRUSTLINE),\n/* harmony export */   ACTIVITY_ACTION_SEND: () => (/* binding */ ACTIVITY_ACTION_SEND),\n/* harmony export */   ACTIVITY_ACTION_TOPUP: () => (/* binding */ ACTIVITY_ACTION_TOPUP),\n/* harmony export */   ACTIVITY_PERIOD_ALL: () => (/* binding */ ACTIVITY_PERIOD_ALL),\n/* harmony export */   ACTIVITY_PERIOD_MONTH_ONE: () => (/* binding */ ACTIVITY_PERIOD_MONTH_ONE),\n/* harmony export */   ACTIVITY_PERIOD_MONTH_SIX: () => (/* binding */ ACTIVITY_PERIOD_MONTH_SIX),\n/* harmony export */   ACTIVITY_PERIOD_WEEK_ONE: () => (/* binding */ ACTIVITY_PERIOD_WEEK_ONE),\n/* harmony export */   ACTIVITY_STATUS_CANCELLED: () => (/* binding */ ACTIVITY_STATUS_CANCELLED),\n/* harmony export */   ACTIVITY_STATUS_CANCELLING: () => (/* binding */ ACTIVITY_STATUS_CANCELLING),\n/* harmony export */   ACTIVITY_STATUS_PENDING: () => (/* binding */ ACTIVITY_STATUS_PENDING),\n/* harmony export */   ACTIVITY_STATUS_SUCCESSFUL: () => (/* binding */ ACTIVITY_STATUS_SUCCESSFUL),\n/* harmony export */   ACTIVITY_STATUS_UNSUCCESSFUL: () => (/* binding */ ACTIVITY_STATUS_UNSUCCESSFUL),\n/* harmony export */   BROADCAST_CHANNELS: () => (/* binding */ BROADCAST_CHANNELS),\n/* harmony export */   BROADCAST_CHANNELS_MSGS: () => (/* binding */ BROADCAST_CHANNELS_MSGS),\n/* harmony export */   BaseBlockTracker: () => (/* binding */ BaseBlockTracker),\n/* harmony export */   BaseController: () => (/* binding */ BaseController),\n/* harmony export */   BaseCurrencyController: () => (/* binding */ BaseCurrencyController),\n/* harmony export */   BaseEmbedController: () => (/* binding */ BaseEmbedController),\n/* harmony export */   BaseKeyringController: () => (/* binding */ BaseKeyringController),\n/* harmony export */   BasePreferencesController: () => (/* binding */ BasePreferencesController),\n/* harmony export */   BaseTransactionStateManager: () => (/* binding */ BaseTransactionStateManager),\n/* harmony export */   BroadcastChannelHandler: () => (/* binding */ BroadcastChannelHandler),\n/* harmony export */   COMMUNICATION_JRPC_METHODS: () => (/* binding */ COMMUNICATION_JRPC_METHODS),\n/* harmony export */   COMMUNICATION_NOTIFICATIONS: () => (/* binding */ COMMUNICATION_NOTIFICATIONS),\n/* harmony export */   CommunicationWindowManager: () => (/* binding */ CommunicationWindowManager),\n/* harmony export */   DEFAULT_PREFERENCES: () => (/* binding */ DEFAULT_PREFERENCES),\n/* harmony export */   FEATURES_CONFIRM_WINDOW: () => (/* binding */ FEATURES_CONFIRM_WINDOW),\n/* harmony export */   FEATURES_DEFAULT_POPUP_WINDOW: () => (/* binding */ FEATURES_DEFAULT_POPUP_WINDOW),\n/* harmony export */   FEATURES_DEFAULT_WALLET_WINDOW: () => (/* binding */ FEATURES_DEFAULT_WALLET_WINDOW),\n/* harmony export */   FEATURES_PROVIDER_CHANGE_WINDOW: () => (/* binding */ FEATURES_PROVIDER_CHANGE_WINDOW),\n/* harmony export */   LOGIN_PROVIDER: () => (/* binding */ LOGIN_PROVIDER),\n/* harmony export */   PAYMENT_PROVIDER: () => (/* binding */ PAYMENT_PROVIDER),\n/* harmony export */   POPUP_LOADED: () => (/* binding */ POPUP_LOADED),\n/* harmony export */   POPUP_RESULT: () => (/* binding */ POPUP_RESULT),\n/* harmony export */   PROVIDER_JRPC_METHODS: () => (/* binding */ PROVIDER_JRPC_METHODS),\n/* harmony export */   PROVIDER_NOTIFICATIONS: () => (/* binding */ PROVIDER_NOTIFICATIONS),\n/* harmony export */   PopupHandler: () => (/* binding */ PopupHandler),\n/* harmony export */   PopupStoreChannel: () => (/* binding */ PopupStoreChannel),\n/* harmony export */   PopupWithBcHandler: () => (/* binding */ PopupWithBcHandler),\n/* harmony export */   RedirectHandler: () => (/* binding */ RedirectHandler),\n/* harmony export */   SETUP_COMPLETE: () => (/* binding */ SETUP_COMPLETE),\n/* harmony export */   StreamWindow: () => (/* binding */ StreamWindow),\n/* harmony export */   TRANSACTION_TYPES: () => (/* binding */ TRANSACTION_TYPES),\n/* harmony export */   TX_EVENTS: () => (/* binding */ TX_EVENTS),\n/* harmony export */   TransactionStatus: () => (/* binding */ TransactionStatus),\n/* harmony export */   UserError: () => (/* binding */ UserError),\n/* harmony export */   addressSlicer: () => (/* binding */ addressSlicer),\n/* harmony export */   broadcastChannelOptions: () => (/* binding */ broadcastChannelOptions),\n/* harmony export */   concatSig: () => (/* binding */ concatSig),\n/* harmony export */   createChangeProviderMiddlewareMiddleware: () => (/* binding */ createChangeProviderMiddlewareMiddleware),\n/* harmony export */   createCommunicationMiddleware: () => (/* binding */ createCommunicationMiddleware),\n/* harmony export */   createEventEmitterProxy: () => (/* binding */ createEventEmitterProxy),\n/* harmony export */   createFetchConfigFromReq: () => (/* binding */ createFetchConfigFromReq),\n/* harmony export */   createFetchMiddleware: () => (/* binding */ createFetchMiddleware),\n/* harmony export */   createGenericJRPCMiddleware: () => (/* binding */ createGenericJRPCMiddleware),\n/* harmony export */   createLoggerMiddleware: () => (/* binding */ createLoggerMiddleware),\n/* harmony export */   createOriginMiddleware: () => (/* binding */ createOriginMiddleware),\n/* harmony export */   createRandomId: () => (/* binding */ createRandomId),\n/* harmony export */   createSwappableProxy: () => (/* binding */ createSwappableProxy),\n/* harmony export */   createTopupMiddleware: () => (/* binding */ createTopupMiddleware),\n/* harmony export */   formatDate: () => (/* binding */ formatDate),\n/* harmony export */   formatSmallNumbers: () => (/* binding */ formatSmallNumbers),\n/* harmony export */   formatTime: () => (/* binding */ formatTime),\n/* harmony export */   getCustomDeviceInfo: () => (/* binding */ getCustomDeviceInfo),\n/* harmony export */   getHeaders: () => (/* binding */ getHeaders),\n/* harmony export */   getPopupFeatures: () => (/* binding */ getPopupFeatures),\n/* harmony export */   getTxStatusText: () => (/* binding */ getTxStatusText),\n/* harmony export */   handleRedirectParameters: () => (/* binding */ handleRedirectParameters),\n/* harmony export */   hashMessage: () => (/* binding */ hashMessage),\n/* harmony export */   intToHex: () => (/* binding */ intToHex),\n/* harmony export */   padWithZeroes: () => (/* binding */ padWithZeroes),\n/* harmony export */   randomId: () => (/* binding */ randomId),\n/* harmony export */   signMessage: () => (/* binding */ signMessage),\n/* harmony export */   significantDigits: () => (/* binding */ significantDigits),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   timeout: () => (/* binding */ timeout$1),\n/* harmony export */   transactionMatchesNetwork: () => (/* binding */ transactionMatchesNetwork)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/openlogin-jrpc */ \"(ssr)/./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\");\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @metamask/rpc-errors */ \"(ssr)/./node_modules/@metamask/rpc-errors/dist/index.mjs\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @toruslabs/broadcast-channel */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/broadcast-channel.js\");\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! bowser */ \"(ssr)/./node_modules/bowser/src/bowser.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_9__);\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Controller class that provides configuration, state management, and subscriptions\n */\nclass BaseController extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.SafeEventEmitter {\n  /**\n   * Creates a BaseController instance. Both initial state and initial\n   * configuration options are merged with defaults upon initialization.\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor(_ref) {\n    let {\n      config = {},\n      state = {}\n    } = _ref;\n    super();\n    // Use assign since generics can't be spread: https://git.io/vpRhY\n    /**\n     * Default options used to configure this controller\n     */\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"defaultConfig\", {});\n    /**\n     * Default state set on this controller\n     */\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"defaultState\", {});\n    /**\n     * Determines if listeners are notified of state changes\n     */\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"disabled\", false);\n    /**\n     * Name of this controller used during composition\n     */\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"name\", \"BaseController\");\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"initialConfig\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"initialState\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"internalConfig\", this.defaultConfig);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"internalState\", this.defaultState);\n    this.initialState = state;\n    this.initialConfig = config;\n  }\n\n  /**\n   * Retrieves current controller configuration options\n   *\n   * @returns - Current configuration\n   */\n  get config() {\n    return this.internalConfig;\n  }\n\n  /**\n   * Retrieves current controller state\n   *\n   * @returns - Current state\n   */\n  get state() {\n    return this.internalState;\n  }\n\n  /**\n   * Updates controller configuration\n   *\n   * @param config - New configuration options\n   * @param overwrite - Overwrite config instead of merging\n   * @param fullUpdate - Boolean that defines if the update is partial or not\n   */\n  configure(config) {\n    let overwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let fullUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (fullUpdate) {\n      this.internalConfig = overwrite ? config : Object.assign(this.internalConfig, config);\n      for (const key in this.internalConfig) {\n        if (typeof this.internalConfig[key] !== \"undefined\") {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          this[key] = this.internalConfig[key];\n        }\n      }\n    } else {\n      for (const key in config) {\n        /* istanbul ignore else */\n        if (typeof this.internalConfig[key] !== \"undefined\") {\n          this.internalConfig[key] = config[key];\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          this[key] = config[key];\n        }\n      }\n    }\n  }\n\n  /**\n   * Updates controller state\n   *\n   * @param state - New state\n   * @param overwrite - Overwrite state instead of merging\n   */\n  update(state) {\n    let overwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.internalState = overwrite ? _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, state) : _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, this.internalState), state);\n    this.emit(\"store\", this.internalState);\n  }\n\n  /**\n   * Enables the controller. This sets each config option as a member\n   * variable on this instance and triggers any defined setters. This\n   * also sets initial state and triggers any listeners.\n   *\n   * @returns - This controller instance\n   */\n  initialize() {\n    this.internalState = this.defaultState;\n    this.internalConfig = this.defaultConfig;\n    this.configure(this.initialConfig);\n    this.update(this.initialState);\n    return this;\n  }\n}\n\nconst sec = 1000;\nconst calculateSum = (accumulator, currentValue) => accumulator + currentValue;\nconst blockTrackerEvents = [\"sync\", \"latest\"];\nclass BaseBlockTracker extends BaseController {\n  constructor(_ref) {\n    let {\n      config = {},\n      state = {}\n    } = _ref;\n    super({\n      config,\n      state\n    });\n\n    // config\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"name\", \"BaseBlockTracker\");\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"_blockResetTimeout\", void 0);\n    this.defaultState = {\n      _currentBlock: {\n        idempotencyKey: \"\"\n      },\n      _isRunning: false\n    };\n    this.defaultConfig = {\n      blockResetDuration: 20 * sec\n    };\n    this.initialize();\n\n    // bind functions for internal use\n    this._onNewListener = this._onNewListener.bind(this);\n    this._onRemoveListener = this._onRemoveListener.bind(this);\n    this._resetCurrentBlock = this._resetCurrentBlock.bind(this);\n\n    // listen for handler changes\n    this._setupInternalEvents();\n  }\n  isRunning() {\n    return this.state._isRunning;\n  }\n  getCurrentBlock() {\n    return this.state._currentBlock;\n  }\n  async getLatestBlock() {\n    // return if available\n    if (this.state._currentBlock.idempotencyKey) {\n      return this.state._currentBlock;\n    }\n    // wait for a new latest block\n    const latestBlock = await new Promise(resolve => {\n      this.once(\"latest\", block => {\n        if (block) {\n          resolve(block);\n        }\n      });\n    });\n    // return newly set current block\n    return latestBlock;\n  }\n\n  // dont allow module consumer to remove our internal event listeners\n  removeAllListeners(eventName) {\n    if (eventName) {\n      super.removeAllListeners(eventName);\n    } else {\n      super.removeAllListeners();\n    }\n    // re-add internal events\n    this._setupInternalEvents();\n    // trigger stop check just in case\n    this._onRemoveListener();\n    return this;\n  }\n\n  /**\n   * To be implemented in subclass.\n   */\n  _start() {\n    // default behavior is noop\n  }\n\n  /**\n   * To be implemented in subclass.\n   */\n  _end() {\n    // default behavior is noop\n  }\n  _newPotentialLatest(newBlock) {\n    const currentBlock = this.state._currentBlock;\n    // only update if block number is higher\n    if (currentBlock && newBlock.idempotencyKey === currentBlock.idempotencyKey) {\n      return;\n    }\n    this._setCurrentBlock(newBlock);\n  }\n  _setupInternalEvents() {\n    // first remove listeners for idempotency\n    this.removeListener(\"newListener\", this._onNewListener);\n    this.removeListener(\"removeListener\", this._onRemoveListener);\n    // then add them\n    this.on(\"removeListener\", this._onRemoveListener);\n    this.on(\"newListener\", this._onNewListener);\n  }\n  _onNewListener() {\n    this._maybeStart();\n  }\n  _onRemoveListener() {\n    // `removeListener` is called *after* the listener is removed\n    if (this._getBlockTrackerEventCount() > 0) {\n      return;\n    }\n    this._maybeEnd();\n  }\n  _maybeStart() {\n    if (this.state._isRunning) {\n      return;\n    }\n    this.state._isRunning = true;\n    // cancel setting latest block to stale\n    this._cancelBlockResetTimeout();\n    this._start();\n  }\n  _maybeEnd() {\n    if (!this.state._isRunning) {\n      return;\n    }\n    this.state._isRunning = false;\n    this._setupBlockResetTimeout();\n    this._end();\n  }\n  _getBlockTrackerEventCount() {\n    return blockTrackerEvents.map(eventName => this.listenerCount(eventName)).reduce(calculateSum);\n  }\n  _setCurrentBlock(newBlock) {\n    const oldBlock = this.state._currentBlock;\n    this.update({\n      _currentBlock: newBlock\n    });\n    this.emit(\"latest\", newBlock);\n    this.emit(\"sync\", {\n      oldBlock,\n      newBlock\n    });\n  }\n  _setupBlockResetTimeout() {\n    // clear any existing timeout\n    this._cancelBlockResetTimeout();\n    // clear latest block when stale\n    this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this.config.blockResetDuration);\n\n    // nodejs - dont hold process open\n    if (this._blockResetTimeout.unref) {\n      this._blockResetTimeout.unref();\n    }\n  }\n  _cancelBlockResetTimeout() {\n    if (this._blockResetTimeout) {\n      clearTimeout(this._blockResetTimeout);\n    }\n  }\n  _resetCurrentBlock() {\n    this.update({\n      _currentBlock: {\n        idempotencyKey: \"\"\n      }\n    });\n  }\n}\n\nconst filterNoop = () => true;\nconst internalEvents = [\"newListener\", \"removeListener\"];\nconst externalEventFilter = name => !internalEvents.includes(name);\nfunction getRawListeners(eventEmitter, name) {\n  // prefer native\n  return typeof eventEmitter.rawListeners !== \"undefined\" ? eventEmitter.rawListeners(name) : eventEmitter.listeners(name);\n}\nfunction createEventEmitterProxy(initialTarget, opts) {\n  // parse options\n  const finalOpts = opts || {};\n  let eventFilter = finalOpts.eventFilter || filterNoop;\n  if (typeof eventFilter === \"string\" && eventFilter === \"skipInternal\") eventFilter = externalEventFilter;\n  if (typeof eventFilter !== \"function\") throw new Error(\"createEventEmitterProxy - Invalid eventFilter\");\n  let target = initialTarget;\n  let setTarget = newTarget => {\n    const oldTarget = target;\n    target = newTarget;\n    oldTarget.eventNames().filter(eventFilter).forEach(name => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      getRawListeners(oldTarget, name).forEach(handler => newTarget.on(name, handler));\n    });\n\n    // remove old listeners\n    oldTarget.removeAllListeners();\n  };\n  const proxy = new Proxy({}, {\n    get: (_, name) => {\n      // override `setTarget` access\n      if (name === \"setTarget\") return setTarget;\n      return target[name];\n    },\n    set: (_, name, value) => {\n      // allow `setTarget` overrides\n      if (name === \"setTarget\") {\n        setTarget = value;\n        return true;\n      }\n      target[name] = value;\n      return true;\n    }\n  });\n  return proxy;\n}\n\nfunction createSwappableProxy(initialTarget) {\n  let target = initialTarget;\n  let setTarget = newTarget => {\n    target = newTarget;\n  };\n  const proxy = new Proxy({}, {\n    get: (_, name) => {\n      // override `setTarget` access\n      if (name === \"setTarget\") return setTarget;\n      return target[name];\n    },\n    set: (_, name, value) => {\n      // allow `setTarget` overrides\n      if (name === \"setTarget\") {\n        setTarget = value;\n        return true;\n      }\n      target[name] = value;\n      return true;\n    }\n  });\n  return proxy;\n}\n\n// every ten minutes\nconst POLLING_INTERVAL = 600000;\nclass BaseCurrencyController extends BaseController {\n  constructor(_ref) {\n    let {\n      config = {},\n      state\n    } = _ref;\n    super({\n      config,\n      state\n    });\n    this.defaultState = {\n      currentCurrency: \"usd\",\n      conversionRate: 0,\n      conversionDate: \"N/A\",\n      nativeCurrency: \"ETH\"\n    };\n    this.defaultConfig = {\n      pollInterval: POLLING_INTERVAL\n    };\n    this.initialize();\n  }\n\n  //\n  // PUBLIC METHODS\n  //\n\n  getNativeCurrency() {\n    return this.state.nativeCurrency;\n  }\n  setNativeCurrency(nativeCurrency) {\n    this.update({\n      nativeCurrency,\n      ticker: nativeCurrency\n    });\n  }\n  getCurrentCurrency() {\n    return this.state.currentCurrency;\n  }\n  setCurrentCurrency(currentCurrency) {\n    this.update({\n      currentCurrency\n    });\n  }\n\n  /**\n   * A getter for the conversionRate property\n   *\n   * @returns The conversion rate from ETH to the selected currency.\n   *\n   */\n  getConversionRate() {\n    return this.state.conversionRate;\n  }\n  setConversionRate(conversionRate) {\n    this.update({\n      conversionRate\n    });\n  }\n\n  /**\n   * A getter for the conversionDate property\n   *\n   * @returns The date at which the conversion rate was set. Expressed in milliseconds since midnight of\n   * January 1, 1970\n   *\n   */\n  getConversionDate() {\n    return this.state.conversionDate;\n  }\n  setConversionDate(conversionDate) {\n    this.update({\n      conversionDate\n    });\n  }\n}\n\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n  height: 660,\n  width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n  height: 740,\n  width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n  height: 700,\n  width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n  height: 700,\n  width: 450\n};\nconst POPUP_LOADED = \"popup_loaded\";\nconst POPUP_RESULT = \"popup_result\";\nconst SETUP_COMPLETE = \"setup_complete\";\nconst ACTIVITY_ACTION_ALL = \"walletActivity.allTransactions\";\nconst ACTIVITY_ACTION_SEND = \"walletActivity.send\";\nconst ACTIVITY_ACTION_BURN = \"walletActivity.burn\";\nconst ACTIVITY_ACTION_RECEIVE = \"walletActivity.receive\";\nconst ACTIVITY_ACTION_TOPUP = \"walletActivity.topup\";\nconst ACTIVITY_ACTION_CREATE_TRUSTLINE = \"walletActivity.createTrustline\";\nconst ACTIVITY_ACTION_REMOVE_TRUSTLINE = \"walletActivity.removeTrustline\";\nconst ACTIVITY_ACTION_CREATE_NFT_OFFER = \"walletActivity.createNftOffer\";\nconst ACTIVITY_ACTION_ACCEPT_NFT_OFFER = \"walletActivity.acceptNftOffer\";\nconst ACTIVITY_ACTION_CANCEL_NFT_OFFER = \"walletActivity.cancelNftOffer\";\nconst ACTIVITY_PERIOD_ALL = \"walletActivity.all\";\nconst ACTIVITY_PERIOD_WEEK_ONE = \"walletActivity.lastOneWeek\";\nconst ACTIVITY_PERIOD_MONTH_ONE = \"walletActivity.lastOneMonth\";\nconst ACTIVITY_PERIOD_MONTH_SIX = \"walletActivity.lastSixMonts\";\nconst ACTIVITY_STATUS_SUCCESSFUL = \"walletActivity.successful\";\nconst ACTIVITY_STATUS_UNSUCCESSFUL = \"walletActivity.unsuccessful\";\nconst ACTIVITY_STATUS_PENDING = \"walletActivity.pending\";\nconst ACTIVITY_STATUS_CANCELLED = \"walletActivity.cancelled\";\nconst ACTIVITY_STATUS_CANCELLING = \"walletActivity.cancelling\";\nconst COMMUNICATION_NOTIFICATIONS = {\n  IFRAME_STATUS: \"iframe_status\",\n  // Tell embed to create the window\n  CREATE_WINDOW: \"create_window\",\n  // Tell embed to close the window\n  CLOSE_WINDOW: \"close_window\",\n  USER_LOGGED_IN: \"user_logged_in\",\n  USER_LOGGED_OUT: \"user_logged_out\"\n};\nconst COMMUNICATION_JRPC_METHODS = {\n  LOGOUT: \"logout\",\n  WALLET_INSTANCE_ID: \"wallet_instance_id\",\n  USER_INFO: \"user_info\",\n  SET_PROVIDER: \"set_provider\",\n  TOPUP: \"topup\",\n  IFRAME_STATUS: \"iframe_status\",\n  // embed has opened the window as requested\n  OPENED_WINDOW: \"opened_window\",\n  // user has closed the window from embed's side\n  CLOSED_WINDOW: \"closed_window\",\n  WINDOW_BLOCKED: \"window_blocked\",\n  GET_PROVIDER_STATE: \"get_provider_state\",\n  LOGIN_WITH_PRIVATE_KEY: \"login_with_private_key\",\n  SHOW_WALLET_CONNECT: \"show_wallet_connect\",\n  SHOW_CHECKOUT: \"show_checkout\",\n  SHOW_WALLET_UI: \"show_wallet_ui\"\n};\nconst PROVIDER_JRPC_METHODS = {\n  GET_PROVIDER_STATE: \"wallet_get_provider_state\"\n};\nconst PROVIDER_NOTIFICATIONS = {\n  ACCOUNTS_CHANGED: \"wallet_accounts_changed\",\n  CHAIN_CHANGED: \"wallet_chain_changed\",\n  UNLOCK_STATE_CHANGED: \"wallet_unlock_state_changed\"\n};\nconst BROADCAST_CHANNELS = {\n  REDIRECT_CHANNEL: \"redirect_channel\",\n  PROVIDER_CHANGE_CHANNEL: \"torus_provider_change_channel\",\n  TRANSACTION_CHANNEL: \"torus_channel\",\n  MESSAGE_CHANNEL: \"torus_message_channel\",\n  WALLET_LOGOUT_CHANNEL: \"wallet_logout_channel\",\n  WALLET_SELECTED_ADDRESS_CHANNEL: \"wallet_selected_address_channel\",\n  WALLET_NETWORK_CHANGE_CHANNEL: \"wallet_network_change_channel\",\n  WALLET_ACCOUNT_IMPORT_CHANNEL: \"wallet_account_import_channel\",\n  THEME_CHANGE: \"theme_change_channel\",\n  TOP_UP_CHANNEL: \"top_up_channel\"\n};\nconst BROADCAST_CHANNELS_MSGS = {\n  LOGOUT: \"logout\",\n  ACCOUNT_IMPORTED: \"account_imported\",\n  SELECTED_ADDRESS_CHANGE: \"selected_address_change\",\n  NETWORK_CHANGE: \"network_change\",\n  SET_THEME: \"set_theme\"\n};\n\nfunction createChangeProviderMiddlewareMiddleware(_ref) {\n  let {\n    changeProvider\n  } = _ref;\n  return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createAsyncMiddleware)(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== COMMUNICATION_JRPC_METHODS.SET_PROVIDER) return next();\n    if (!changeProvider) throw new Error(\"CommunicationMiddleware - opts.changeProvider not provided\");\n    response.result = await changeProvider(request);\n  });\n}\nfunction createTopupMiddleware(_ref2) {\n  let {\n    topup\n  } = _ref2;\n  return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createAsyncMiddleware)(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== COMMUNICATION_JRPC_METHODS.TOPUP) return next();\n    if (!topup) throw new Error(\"CommunicationMiddleware - opts.topup not provided\");\n    response.result = await topup(request);\n  });\n}\nfunction createGenericJRPCMiddleware(targetMethod, handler) {\n  return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createAsyncMiddleware)(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== targetMethod) return next();\n    if (!handler) throw new Error(`CommunicationMiddleware - ${targetMethod} not provided`);\n    const result = await handler(request);\n    if (!result) {\n      return next();\n    }\n    response.result = result;\n    return undefined;\n  });\n}\nfunction createCommunicationMiddleware(providerHandlers) {\n  const {\n    getUserInfo,\n    getWalletInstanceId,\n    topup,\n    logout,\n    changeProvider,\n    setIFrameStatus,\n    handleWindowRpc,\n    getProviderState,\n    loginWithPrivateKey,\n    showWalletConnect,\n    showCheckout,\n    showWalletUi,\n    showWindowBlockAlert\n  } = providerHandlers;\n  return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.mergeMiddleware)([createChangeProviderMiddlewareMiddleware({\n    changeProvider\n  }), createTopupMiddleware({\n    topup\n  }), (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createScaffoldMiddleware)({\n    [COMMUNICATION_JRPC_METHODS.LOGOUT]: logout,\n    [COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID]: getWalletInstanceId,\n    [COMMUNICATION_JRPC_METHODS.USER_INFO]: getUserInfo,\n    [COMMUNICATION_JRPC_METHODS.IFRAME_STATUS]: setIFrameStatus,\n    // Do this in the orchestrator because communicationWindowManager needs to be passed into PopupHandlers\n    [COMMUNICATION_JRPC_METHODS.OPENED_WINDOW]: handleWindowRpc,\n    [COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW]: handleWindowRpc,\n    [COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE]: getProviderState,\n    [COMMUNICATION_JRPC_METHODS.SHOW_WALLET_CONNECT]: showWalletConnect,\n    [COMMUNICATION_JRPC_METHODS.SHOW_CHECKOUT]: showCheckout,\n    [COMMUNICATION_JRPC_METHODS.SHOW_WALLET_UI]: showWalletUi,\n    [COMMUNICATION_JRPC_METHODS.WINDOW_BLOCKED]: showWindowBlockAlert\n  }), createGenericJRPCMiddleware(COMMUNICATION_JRPC_METHODS.LOGIN_WITH_PRIVATE_KEY, loginWithPrivateKey)]);\n}\n\nclass BaseEmbedController extends BaseController {\n  constructor(_ref) {\n    let {\n      config = {},\n      state\n    } = _ref;\n    super({\n      config,\n      state\n    });\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"_communicationProviderProxy\", void 0);\n    this.defaultState = {\n      buttonPosition: \"bottom-right\",\n      isIFrameFullScreen: true,\n      apiKey: \"torus-default\",\n      oauthModalVisibility: false,\n      loginInProgress: false,\n      dappMetadata: {\n        name: \"\",\n        icon: \"\"\n      }\n    };\n    this.initialize();\n  }\n\n  /**\n   * Called by orchestrator once while initializing the class\n   * @param handlers - JRPC handlers for provider\n   * @returns - provider - Returns the providerProxy\n   */\n  initializeProvider(handlers) {\n    const engine = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.JRPCEngine();\n    const communicationMiddleware = createCommunicationMiddleware(handlers);\n    engine.push(communicationMiddleware);\n    const communicationProvider = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.providerFromEngine)(engine);\n    this.setCommunicationProvider(communicationProvider);\n  }\n  setCommunicationProvider(communicationProvider) {\n    if (this._communicationProviderProxy) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this._communicationProviderProxy.setTarget(communicationProvider);\n    } else {\n      this._communicationProviderProxy = createSwappableProxy(communicationProvider);\n    }\n  }\n}\n\nclass CommunicationWindowManager extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.SafeEventEmitter {\n  constructor() {\n    super(...arguments);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleWindowRpc\", (request, response, next, end) => {\n      const {\n        method,\n        params\n      } = request;\n      if (method === COMMUNICATION_JRPC_METHODS.OPENED_WINDOW) {\n        const {\n          windowId\n        } = params;\n        // I've been informed that a window has been opened\n        this.emit(`${windowId}:opened`);\n        response.result = true;\n        end();\n      } else if (method === COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW) {\n        const {\n          windowId\n        } = params;\n        // I've been informed that a window has been closed\n        this.emit(`${windowId}:closed`);\n        response.result = true;\n        end();\n      } else {\n        next();\n      }\n    });\n  }\n}\n\n/**\n * State change callbacks\n */\n\n/**\n * Base controller configuration\n */\n\n/**\n * Base state representation\n */\n\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\n/**\n * {@label loginProviderType}\n */\n\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\n\nconst getTxStatusText = txStatus => {\n  switch (txStatus) {\n    case \"rejected\":\n    case \"unapproved\":\n    case \"failed\":\n      return ACTIVITY_STATUS_UNSUCCESSFUL;\n    case \"confirmed\":\n      return ACTIVITY_STATUS_SUCCESSFUL;\n    case \"submitted\":\n      return ACTIVITY_STATUS_PENDING;\n    case \"cancelled\":\n      return ACTIVITY_STATUS_CANCELLED;\n    default:\n      return \"\";\n  }\n};\n\n/**\n * General utility functions\n */\n\nfunction intToHex(i) {\n  const hex = i.toString(16);\n  return `0x${hex}`;\n}\n\n/**\n * Returns a random number. Don't use for cryptographic purposes.\n * @returns a random number\n */\nconst randomId = () => Math.random().toString(36).slice(2);\n\n/**\n * Pads the front of the given hex string with zeroes until it reaches the\n * target length. If the input string is already longer than or equal to the\n * target length, it is returned unmodified.\n *\n * If the input string is \"0x\"-prefixed or not a hex string, an error will be\n * thrown.\n *\n * @param hexString - The hexadecimal string to pad with zeroes.\n * @param targetLength - The target length of the hexadecimal string.\n * @returns The input string front-padded with zeroes, or the original string\n * if it was already greater than or equal to to the target length.\n */\nfunction padWithZeroes(hexString, targetLength) {\n  if (hexString !== \"\" && !/^[a-f0-9]+$/iu.test(hexString)) {\n    throw new Error(`Expected an unprefixed hex string. Received: ${hexString}`);\n  }\n  if (targetLength < 0) {\n    throw new Error(`Expected a non-negative integer target length. Received: ${targetLength}`);\n  }\n  return String.prototype.padStart.call(hexString, targetLength, \"0\");\n}\n/**\n * Concatenate an extended ECDSA signature into a hex string.\n *\n * @param v - The 'v' portion of the signature.\n * @param r - The 'r' portion of the signature.\n * @param s - The 's' portion of the signature.\n * @returns The concatenated ECDSA signature.\n */\nfunction concatSig(v, r, s) {\n  const rSig = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.fromSigned)(r);\n  const sSig = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.fromSigned)(s);\n  const vSig = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(v);\n  const rStr = padWithZeroes(Buffer.from((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.toUnsigned)(rSig)).toString(\"hex\"), 64);\n  const sStr = padWithZeroes(Buffer.from((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.toUnsigned)(sSig)).toString(\"hex\"), 64);\n  const vStr = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.stripHexPrefix)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.bigIntToHex)(vSig));\n  return (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.addHexPrefix)(rStr.concat(sStr, vStr));\n}\nfunction timeout$1(duration) {\n  return new Promise(resolve => {\n    const timeoutRef = window.setTimeout(() => {\n      resolve();\n      window.clearTimeout(timeoutRef);\n    }, duration);\n  });\n}\nconst getHeaders = jwt => {\n  return {\n    headers: {\n      Authorization: `Bearer ${jwt}`,\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n};\n\n/**\n * Text/number formatting utilities\n */\nconst formatSmallNumbers = function (number) {\n  let currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"usd\";\n  let noTilde = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const finalNumber = bignumber_js__WEBPACK_IMPORTED_MODULE_4__.BigNumber.isBigNumber(number) ? number.toNumber() : number;\n  if (!Number.isFinite(finalNumber)) return \"\";\n  const value = currency.toLowerCase() === \"usd\" ? parseFloat(Number(finalNumber).toFixed(2)) : parseFloat(Number(finalNumber).toFixed(5));\n  const tilde = value > 0 ? \"~ \" : \"\";\n  return `${currency.toLowerCase() === \"usd\" || noTilde ? \"\" : tilde}${Number(value)} ${currency.toUpperCase()}`;\n};\nconst addressSlicer = function (address) {\n  let sliceLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n  if (!address) return \"\";\n  if (address.length < 11) {\n    return address;\n  }\n  if (typeof address !== \"string\") return \"\";\n  return `${address.slice(0, sliceLength)}...${address.slice(-sliceLength)}`;\n};\nconst significantDigits = function (number) {\n  let perc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let length_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n  let input = !bignumber_js__WEBPACK_IMPORTED_MODULE_4__.BigNumber.isBigNumber(number) ? new bignumber_js__WEBPACK_IMPORTED_MODULE_4__.BigNumber(number) : number;\n  if (input.isZero()) return input;\n  if (perc) {\n    input = input.times(new bignumber_js__WEBPACK_IMPORTED_MODULE_4__.BigNumber(100));\n  }\n  let depth;\n  if (input.gte(new bignumber_js__WEBPACK_IMPORTED_MODULE_4__.BigNumber(1))) {\n    depth = length_;\n  } else {\n    depth = length_ - 1 + Math.ceil(Math.log10(new bignumber_js__WEBPACK_IMPORTED_MODULE_4__.BigNumber(\"1\").div(input).toNumber()));\n  }\n  const shift = new bignumber_js__WEBPACK_IMPORTED_MODULE_4__.BigNumber(10).pow(new bignumber_js__WEBPACK_IMPORTED_MODULE_4__.BigNumber(depth));\n  const roundedNumber = Math.round(shift.times(input).toNumber()) / shift.toNumber();\n  return roundedNumber;\n};\nconst formatDate = inputDate => {\n  const monthList = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const date = new Date(inputDate);\n  const day = date.getDate();\n  const month = monthList[date.getMonth()];\n  const year = date.getFullYear();\n  return `${day} ${month} ${year}`;\n};\nconst formatTime = time => {\n  return new Date(time).toTimeString().slice(0, 8);\n};\n\n/**\n * Network utilities\n */\nconst transactionMatchesNetwork = (transaction, chainId) => {\n  if (typeof transaction.chainId !== \"undefined\") {\n    return transaction.chainId === chainId;\n  }\n  return false;\n};\n\n/**\n * Signing utils\n */\nconst hashMessage = message => {\n  const bufferedMessage = Buffer.from(message, \"utf8\");\n  const el = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.hashPersonalMessage)(bufferedMessage);\n  return Buffer.from(el);\n};\nconst signMessage = async (privateKey, data) => {\n  const privKey = Buffer.from(privateKey, \"hex\");\n  const message = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.stripHexPrefix)(data);\n  const msgSig = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.ecsign)(Buffer.from(message, \"hex\"), privKey);\n  const rawMsgSig = concatSig(Buffer.from((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.bigIntToBytes)(msgSig.v)), Buffer.from(msgSig.r), Buffer.from(msgSig.s));\n  return rawMsgSig;\n};\n\n/**\n * popup handler utils\n */\nfunction getPopupFeatures(_ref) {\n  let {\n    width: w,\n    height: h\n  } = _ref;\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\nconst broadcastChannelOptions = {\n  type: \"server\",\n  // type: 'localstorage', // (optional) enforce a type, oneOf['native', 'idb', 'localstorage', 'node']\n  webWorkerSupport: false // (optional) set this to false if you know that your channel will never be used in a WebWorker (increases performance)\n};\nfunction getCustomDeviceInfo() {\n  var _navigator;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if ((_navigator = navigator) !== null && _navigator !== void 0 && _navigator.brave) {\n    return {\n      browser: \"Brave\"\n    };\n  }\n}\nclass UserError extends Error {}\nconst handleRedirectParameters = (hash, queryParameters) => {\n  const hashParameters = {};\n  const hashUrl = new URL(`${window.location.origin}/?${hash.slice(1)}`);\n  hashUrl.searchParams.forEach((value, key) => {\n    hashParameters[key] = value;\n  });\n  let instanceParameters = {};\n  let error = \"\";\n  if (!queryParameters.windowId) {\n    if (Object.keys(hashParameters).length > 0 && hashParameters.state) {\n      instanceParameters = JSON.parse(window.atob(decodeURIComponent(decodeURIComponent(hashParameters.state)))) || {};\n      error = hashParameters.error_description || hashParameters.error || error;\n    } else if (Object.keys(queryParameters).length > 0 && queryParameters.state) {\n      instanceParameters = JSON.parse(window.atob(decodeURIComponent(decodeURIComponent(queryParameters.state)))) || {};\n      if (queryParameters.error) error = queryParameters.error;\n    }\n  }\n  return {\n    error,\n    instanceParameters,\n    hashParameters\n  };\n};\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n\nclass BaseKeyringController extends BaseController {\n  constructor(_ref) {\n    var _state$wallets;\n    let {\n      config = {},\n      state\n    } = _ref;\n    super({\n      config,\n      state\n    });\n    this.defaultState = {\n      wallets: (_state$wallets = state.wallets) !== null && _state$wallets !== void 0 ? _state$wallets : []\n    };\n    this.initialize();\n  }\n\n  // for signing auth message\n  async signAuthMessage(address, message) {\n    const keyring = this.state.wallets.find(x => x.address === address);\n    if (!keyring) {\n      throw new Error(\"key does not exist\");\n    }\n    const hashedMessage = hashMessage(message).toString(\"hex\");\n    const rawMessageSig = await signMessage(keyring.privateKey, hashedMessage);\n    return rawMessageSig;\n  }\n}\n\nconst RETRIABLE_ERRORS = [\n// ignore server overload errors\n\"Gateway timeout\", \"ETIMEDOUT\",\n// ignore server sent html error pages\n// or truncated json responses\n\"failed to parse response body\",\n// ignore errors where http req failed to establish\n\"Failed to fetch\"];\nfunction checkForHttpErrors(fetchRes) {\n  // check for errors\n  switch (fetchRes.status) {\n    case 405:\n      throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.methodNotFound();\n    case 418:\n      throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.internal({\n        message: `Request is being rate limited.`\n      });\n    case 503:\n    case 504:\n      throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.internal({\n        message: `Gateway timeout. The request took too long to process.` + `This can happen when querying over too wide a block range.`\n      });\n  }\n}\nfunction timeout(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n}\nfunction parseResponse(fetchRes, body) {\n  // check for error code\n  if (fetchRes.status !== 200) {\n    throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.internal({\n      message: `Non-200 status code: '${fetchRes.status}'`,\n      data: body\n    });\n  }\n  // check for rpc error\n  if (body.error) {\n    throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.internal({\n      data: body.error\n    });\n  }\n  // return successful result\n  return body.result;\n}\nfunction createFetchConfigFromReq(_ref) {\n  let {\n    req,\n    rpcTarget,\n    originHttpHeaderKey\n  } = _ref;\n  const parsedUrl = new URL(rpcTarget);\n\n  // prepare payload\n  // copy only canonical json rpc properties\n  const payload = {\n    id: req.id,\n    jsonrpc: req.jsonrpc,\n    method: req.method,\n    params: req.params\n  };\n\n  // extract 'origin' parameter from request\n  const originDomain = req.origin;\n\n  // serialize request body\n  const serializedPayload = JSON.stringify(payload);\n\n  // configure fetch params\n  const fetchParams = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: serializedPayload\n  };\n\n  // optional: add request origin as header\n  if (originHttpHeaderKey && originDomain) {\n    fetchParams.headers[originHttpHeaderKey] = originDomain;\n  }\n  return {\n    fetchUrl: parsedUrl.href,\n    fetchParams\n  };\n}\nfunction createFetchMiddleware(_ref2) {\n  let {\n    rpcTarget,\n    originHttpHeaderKey\n  } = _ref2;\n  return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createAsyncMiddleware)(async (req, res, _next) => {\n    const {\n      fetchUrl,\n      fetchParams\n    } = createFetchConfigFromReq({\n      req,\n      rpcTarget,\n      originHttpHeaderKey\n    });\n\n    // attempt request multiple times\n    const maxAttempts = 5;\n    const retryInterval = 1000;\n    for (let attempt = 0; attempt < maxAttempts; attempt++) {\n      try {\n        const fetchRes = await fetch(fetchUrl, fetchParams);\n        // check for http errrors\n        checkForHttpErrors(fetchRes);\n        // parse response body\n        const fetchBody = await fetchRes.json();\n        const result = parseResponse(fetchRes, fetchBody);\n        // set result and exit retry loop\n        res.result = result;\n        return;\n      } catch (err) {\n        const errMsg = err.toString();\n        const isRetriable = RETRIABLE_ERRORS.some(phrase => errMsg.includes(phrase));\n        // re-throw error if not retriable\n        if (!isRetriable) {\n          throw err;\n        }\n      }\n      // delay before retrying\n      await timeout(retryInterval);\n    }\n  });\n}\n\nfunction createLoggerMiddleware(options) {\n  return function loggerMiddleware(request, response, next) {\n    next(callback => {\n      if (response.error) {\n        loglevel__WEBPACK_IMPORTED_MODULE_6___default().warn(\"Error in RPC response:\\n\", response);\n      }\n      if (request.isTorusInternal) return;\n      loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(`RPC (${options.origin}):`, request, \"->\", response);\n      callback();\n    });\n  };\n}\n\nfunction createOriginMiddleware(options) {\n  return function originMiddleware(request, _, next) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    request.origin = options.origin;\n    next();\n  };\n}\n\nconst createRandomId = () => Math.random().toString(36).substring(2);\n\n/**\n * Custom network properties\n * @example isEIP1559Compatible: true etc.\n */\n\n/**\n *\n */\n\nclass BroadcastChannelHandler {\n  constructor(channelPrefix) {\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"bc\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"channel\", void 0);\n    const queryParameters = new URLSearchParams(window.location.search);\n    const instanceId = queryParameters.get(\"instanceId\");\n    this.channel = `${channelPrefix}_${instanceId}`;\n    this.bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(this.channel, broadcastChannelOptions);\n  }\n  getMessageFromChannel() {\n    return new Promise((resolve, reject) => {\n      this.bc.addEventListener(\"message\", async ev => {\n        this.bc.close();\n        if (ev.error) {\n          reject(ev.error);\n        } else {\n          resolve(ev.data);\n        }\n      });\n      this.bc.postMessage({\n        data: {\n          type: POPUP_LOADED\n        }\n      });\n    });\n  }\n}\n\nclass StreamWindow extends BaseController {\n  constructor(_ref) {\n    let {\n      config,\n      state = {}\n    } = _ref;\n    super({\n      config,\n      state\n    });\n    // if window has been closed by users\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"closed\", false);\n    this.initialize();\n  }\n  async open() {\n    return new Promise((resolve, reject) => {\n      const {\n        communicationEngine,\n        communicationWindowManager\n      } = this.config;\n      let popupSuccess = false;\n      communicationWindowManager.once(`${this.state.windowId}:closed`, () => {\n        this.closed = true;\n      });\n\n      // Window is not open yet\n      if (!this.state.windowId) {\n        this.update({\n          windowId: randomId()\n        });\n        communicationWindowManager.once(`${this.state.windowId}:opened`, () => {\n          resolve(this);\n        });\n\n        // Tell the other party to create a window by prompting the user to click on something\n        communicationEngine.emit(\"notification\", {\n          method: COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW,\n          params: {\n            windowId: this.state.windowId,\n            url: this.state.url.href\n          }\n        });\n      } else {\n        // Send this window with `windowId` the url to open via bc\n        const bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(this.state.windowId, broadcastChannelOptions);\n        bc.addEventListener(\"message\", async ev => {\n          try {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(ev, `receiving data on channel: ${bc.name}`);\n            const {\n              error\n            } = ev;\n            if (error) {\n              // Popup says some error. so, we say it's not really opened\n              reject(new Error(error));\n              return;\n            }\n            const {\n              message\n            } = ev.data;\n            if (message === POPUP_LOADED) {\n              popupSuccess = true;\n              await bc.postMessage({\n                data: {\n                  url: this.state.url.href,\n                  message: \"\" // No need of a msg\n                }\n              });\n              resolve(this);\n              bc.close();\n            }\n          } catch (error) {\n            reject(error);\n            bc.close();\n            // Something went wrong. so, we close that window\n            this.close();\n          }\n        });\n\n        // We don't know if the other end is ready to receive this msg. So, we keep writing until it receives and sends back something\n        // we need backoff strategy\n        // we need to wait for first attempt to succeed/fail until the second attempt\n        // If we get 429, we need to wait for a while and then try again\n\n        const postMsg = async () => {\n          // this never throws\n          const localResponse = await bc.postMessage({\n            data: {\n              message: SETUP_COMPLETE\n            }\n          });\n          return localResponse;\n        };\n        let currentDelay = bc.type === \"server\" ? 1000 : 200;\n        const recursiveFn = async () => {\n          if (!popupSuccess && !this.closed) {\n            const localResponse = await postMsg();\n            if (bc.type === \"server\") {\n              const serverResponse = localResponse;\n              if (serverResponse.status >= 400) {\n                // We need to wait for a while and then try again\n                currentDelay = Math.round(currentDelay * 1.5);\n              }\n            }\n            await sleep(currentDelay);\n            await recursiveFn();\n          }\n        };\n        recursiveFn();\n      }\n    });\n  }\n  close() {\n    const {\n      communicationEngine\n    } = this.config;\n    communicationEngine.emit(\"notification\", {\n      method: COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW,\n      params: {\n        windowId: this.state.windowId\n      }\n    });\n  }\n}\n\n/*\nScenarios:\n1. Open a normal popup window and no communication with it - Use PopupHandler\n2. Open a popup window and communicate with it - Use PopupWithBcHandler (can initiate communication by waiting for window to open or not)\n\n3. If window is already opened, pass in windowId to the popup handler. \n   This will establish communication with the popup window and sends it a new url to redirect to\n\n\nIf you're trying to open a window and it gets blocked (happens if you're in iframe or delay b/w click and opening window),\nStreamWindow is invoked and it writes in a channel to display a message to the user\n\nOnce user clicks on that modal/dialog, we pre-open the window and pass in the windowId (goes to 3)\n*/\n\n/**\n * Handles popup window management.\n * For broadcast channel communication, use url with `instanceId` coded into state parameter.\n * This state parameter will be passed across redirects according to OAuth spec.\n */\nclass PopupHandler extends BaseController {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config,\n      state\n    });\n    // this.id = randomId()\n    // Add in dapp storage key to all popups as a hash parameter\n    this.defaultConfig = {\n      dappStorageKey: \"\",\n      features: getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW),\n      target: \"_blank\",\n      communicationEngine: null,\n      communicationWindowManager: null,\n      timeout: 30000\n    };\n    this.defaultState = {\n      windowTimer: null,\n      window: null,\n      iClosedWindow: false,\n      windowId: \"\",\n      url: state.url\n    };\n    this.initialize();\n    this._setupTimer();\n  }\n  async open() {\n    // if window is already open\n    const {\n      target,\n      features,\n      dappStorageKey,\n      communicationEngine,\n      communicationWindowManager\n    } = this.config;\n    const {\n      windowId,\n      url\n    } = this.state;\n    if (dappStorageKey) {\n      const urlHashParams = new URLSearchParams(url.hash.slice(1));\n      urlHashParams.append(\"dappStorageKey\", dappStorageKey);\n      url.hash = urlHashParams.toString();\n      this.update({\n        url\n      });\n    }\n    // No window has been pre-opened\n    if (!windowId) {\n      // try to open a window first\n      let localWindow = window.open(url.href, target, features);\n      if (!localWindow) {\n        // if it's blocked, open StreamWindow\n        localWindow = new StreamWindow({\n          config: {\n            communicationEngine,\n            communicationWindowManager\n          },\n          state: {\n            url\n          }\n        });\n        localWindow.open();\n      }\n      this.update({\n        window: localWindow\n      });\n      return;\n    }\n    // A window has been pre-opened with a query parameter `windowId`\n    const localWindow = new StreamWindow({\n      config: {\n        communicationEngine,\n        communicationWindowManager\n      },\n      state: {\n        url,\n        windowId\n      }\n    });\n    this.update({\n      window: localWindow\n    });\n    await localWindow.open();\n  }\n  close() {\n    this.update({\n      iClosedWindow: true\n    });\n    const {\n      window\n    } = this.state;\n    if (window) window.close();\n  }\n  _setupTimer() {\n    const timer = window.setInterval(() => {\n      const {\n        window,\n        windowTimer,\n        iClosedWindow\n      } = this.state;\n      if (window && window.closed) {\n        if (windowTimer) clearInterval(windowTimer);\n        setTimeout(() => {\n          if (!iClosedWindow) {\n            this.emit(\"close\");\n          }\n          this.update({\n            iClosedWindow: false,\n            window: null\n          });\n        }, this.config.timeout);\n      }\n      if (window === null && windowTimer) clearInterval(windowTimer);\n    }, 500);\n    this.update({\n      windowTimer: timer\n    });\n  }\n}\n\nclass PopupStoreChannel {\n  constructor(_ref) {\n    let {\n      instanceId,\n      handleLogout,\n      handleAccountImport,\n      handleNetworkChange,\n      handleSelectedAddressChange,\n      handleThemeChange\n    } = _ref;\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleLogout\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleAccountImport\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleNetworkChange\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleThemeChange\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleSelectedAddressChange\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"instanceId\", void 0);\n    this.instanceId = instanceId;\n    this.handleLogout = handleLogout;\n    this.handleAccountImport = handleAccountImport;\n    this.handleNetworkChange = handleNetworkChange;\n    this.handleSelectedAddressChange = handleSelectedAddressChange;\n    this.handleThemeChange = handleThemeChange;\n  }\n  setupStoreChannels() {\n    this.logoutChannel();\n    this.importAccountChannel();\n    this.networkChangeChannel();\n    this.selectedAddressChangeChannel();\n    this.themeChangedChannel();\n  }\n  logoutChannel() {\n    const logoutChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_LOGOUT_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);\n    logoutChannel.addEventListener(\"message\", ev => {\n      var _ev$data;\n      loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(\"received logout message\", ev);\n      if (!ev.error && ((_ev$data = ev.data) === null || _ev$data === void 0 ? void 0 : _ev$data.type) === BROADCAST_CHANNELS_MSGS.LOGOUT) {\n        loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(\"Logging Out\");\n        this.handleLogout();\n      }\n    });\n  }\n  importAccountChannel() {\n    const walletAccountImportChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_ACCOUNT_IMPORT_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);\n    walletAccountImportChannel.addEventListener(\"message\", ev => {\n      var _ev$data2;\n      if (!ev.error && ((_ev$data2 = ev.data) === null || _ev$data2 === void 0 ? void 0 : _ev$data2.type) === BROADCAST_CHANNELS_MSGS.ACCOUNT_IMPORTED) {\n        var _ev$data3;\n        this.handleAccountImport((_ev$data3 = ev.data) === null || _ev$data3 === void 0 ? void 0 : _ev$data3.privKey);\n      }\n    });\n  }\n  networkChangeChannel() {\n    const walletAccountImportChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_NETWORK_CHANGE_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);\n    walletAccountImportChannel.addEventListener(\"message\", ev => {\n      var _ev$data4;\n      if (!ev.error && ((_ev$data4 = ev.data) === null || _ev$data4 === void 0 ? void 0 : _ev$data4.type) === BROADCAST_CHANNELS_MSGS.NETWORK_CHANGE) {\n        var _ev$data5;\n        this.handleNetworkChange((_ev$data5 = ev.data) === null || _ev$data5 === void 0 ? void 0 : _ev$data5.network);\n      }\n    });\n  }\n  themeChangedChannel() {\n    const walletAccountImportChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(`${BROADCAST_CHANNELS.THEME_CHANGE}_${this.instanceId}`, broadcastChannelOptions);\n    walletAccountImportChannel.addEventListener(\"message\", ev => {\n      var _ev$data6;\n      loglevel__WEBPACK_IMPORTED_MODULE_6___default().info({\n        ev\n      });\n      if (!ev.error && ((_ev$data6 = ev.data) === null || _ev$data6 === void 0 ? void 0 : _ev$data6.type) === BROADCAST_CHANNELS_MSGS.SET_THEME) {\n        var _ev$data7;\n        this.handleThemeChange((_ev$data7 = ev.data) === null || _ev$data7 === void 0 ? void 0 : _ev$data7.theme);\n      }\n    });\n  }\n  selectedAddressChangeChannel() {\n    const walletAccountImportChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_SELECTED_ADDRESS_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);\n    walletAccountImportChannel.addEventListener(\"message\", ev => {\n      var _ev$data8;\n      if (!ev.error && ((_ev$data8 = ev.data) === null || _ev$data8 === void 0 ? void 0 : _ev$data8.type) === BROADCAST_CHANNELS_MSGS.SELECTED_ADDRESS_CHANGE) {\n        var _ev$data9;\n        this.handleSelectedAddressChange((_ev$data9 = ev.data) === null || _ev$data9 === void 0 ? void 0 : _ev$data9.selectedAddress);\n      }\n    });\n  }\n}\n\n/**\n * PopupWithBcHandler is a PopupHandler which uses broadcast channel to communicate with the popup window.\n */\nclass PopupWithBcHandler extends PopupHandler {\n  constructor(_ref) {\n    let {\n      config,\n      state,\n      instanceId\n    } = _ref;\n    super({\n      config,\n      state\n    });\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"bc\", void 0);\n    this.bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(instanceId, broadcastChannelOptions);\n  }\n\n  /**\n   * Receives the data from popup window and closes the window\n   * @param successExtraFn - Extra function to be called after the data is received\n   * @returns The data to be received\n   */\n  handle(successExtraFn) {\n    return new Promise((resolve, reject) => {\n      const closeListener = () => {\n        this.bc.close();\n        reject(new UserError(\"user closed popup\"));\n        this.removeListener(\"close\", closeListener);\n      };\n      this.on(\"close\", closeListener);\n      this.bc.addEventListener(\"message\", async ev => {\n        loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(ev, `receiving data on channel: ${this.bc.name}`);\n        try {\n          const {\n            error,\n            data\n          } = ev;\n          if (error) {\n            reject(new Error(error));\n            return;\n          }\n          if (successExtraFn) await successExtraFn.call(this, data);\n          resolve(data);\n        } catch (error) {\n          reject(error);\n        } finally {\n          this.bc.close();\n          this.close();\n        }\n      });\n      this.open().then(() => {\n        loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(`opened window ${this.bc.name}`);\n        // Opened window. yay.  let the bc events do their job\n        return undefined;\n      }).catch(err => {\n        loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(err, \"something went wrong while opening window\");\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * Use this if we have to send large payloads which don't fit in query/hash params.\n   * Waits for ack that popup window is ready to receive data.\n   * Receives the data from popup window and closes the window\n   * @param payload - The data to be sent to the popup window once we have ack that window is ready to receive data\n   * @param successExtraFn - Extra function to be called after the data is received\n   * @returns The data to be received\n   */\n  handleWithHandshake(payload, successExtraFn) {\n    return new Promise((resolve, reject) => {\n      const closeListener = () => {\n        this.bc.close();\n        reject(new UserError(\"user closed popup\"));\n        this.removeListener(\"close\", closeListener);\n      };\n      this.on(\"close\", closeListener);\n      this.bc.addEventListener(\"message\", async ev => {\n        try {\n          loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(ev, `receiving data on channel: ${this.bc.name}`);\n          const {\n            error,\n            data\n          } = ev;\n          if (error) {\n            reject(new Error(error));\n            return;\n          }\n          // Do handshake\n          const {\n            type = \"\"\n          } = data;\n          if (type === POPUP_LOADED) {\n            // Hack with generic to use the same type for both send and receive\n            await this.bc.postMessage({\n              data: payload\n            });\n          } else if (type === POPUP_RESULT) {\n            if (successExtraFn) await successExtraFn.call(this, data);\n            resolve(data);\n            // Must only close the bc after result is done\n            this.bc.close();\n            this.close();\n          }\n        } catch (error) {\n          reject(error);\n          this.bc.close();\n          this.close();\n        }\n      });\n      this.open().then(() => {\n        loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(`opened window ${this.bc.name}`);\n        // Opened window. yay.  let the bc events do their job\n        return undefined;\n      }).catch(err => {\n        loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(err, \"something went wrong while opening window\");\n        reject(err);\n      });\n    });\n  }\n}\n\nclass RedirectHandler {\n  constructor() {\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"error\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"finalQueryParams\", {});\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"instanceParameters\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"hashParameters\", void 0);\n    const {\n      hash\n    } = window.location;\n    const queryParameters = new URLSearchParams(window.location.search);\n    queryParameters.forEach((value, key) => {\n      this.finalQueryParams[key] = value;\n    });\n    const {\n      error,\n      instanceParameters,\n      hashParameters\n    } = handleRedirectParameters(hash, this.finalQueryParams);\n    this.error = error;\n    this.instanceParameters = instanceParameters;\n    this.hashParameters = hashParameters;\n  }\n  async handle() {\n    return new Promise((resolve, reject) => {\n      const {\n        finalQueryParams,\n        instanceParameters,\n        hashParameters,\n        error\n      } = this;\n      let bc;\n      try {\n        if (!finalQueryParams.windowId) {\n          bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(`${BROADCAST_CHANNELS.REDIRECT_CHANNEL}_${instanceParameters.instanceId}`, broadcastChannelOptions);\n          bc.addEventListener(\"message\", async ev => {\n            if (ev.error) {\n              reject(ev.error);\n              window.close();\n            } else {\n              resolve();\n              bc.close();\n              loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(\"posted\", {\n                finalQueryParams,\n                hashParameters,\n                instanceParameters\n              });\n            }\n          });\n          bc.postMessage({\n            data: {\n              instanceParams: instanceParameters,\n              hashParams: hashParameters,\n              queryParams: finalQueryParams\n            },\n            error\n          });\n          setTimeout(() => {\n            resolve();\n            window.location.href = window.location.origin + window.location.search + window.location.hash;\n          }, 5000);\n        } else {\n          bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(`${finalQueryParams.windowId}`, broadcastChannelOptions);\n          bc.addEventListener(\"message\", async ev => {\n            const {\n              url,\n              message\n            } = ev.data;\n            if (url) {\n              resolve();\n              window.location.href = url;\n            } else if (message === SETUP_COMPLETE) {\n              await bc.postMessage({\n                data: {\n                  windowId: finalQueryParams.windowId,\n                  message: POPUP_LOADED\n                }\n              });\n            }\n            if (ev.error && ev.error !== \"\") {\n              loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(ev.error);\n              resolve();\n              bc.close();\n            }\n          });\n        }\n      } catch (err) {\n        loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(err, \"something went wrong\");\n        reject(err);\n        if (bc) bc.close();\n        window.close();\n      }\n    });\n  }\n}\n\nconst ACTIVITY_ACTION = {\n  ACTIVITY_ACTION_ALL: \"walletActivity.allTransactions\",\n  ACTIVITY_ACTION_SEND: \"walletActivity.send\",\n  ACTIVITY_ACTION_RECEIVE: \"walletActivity.receive\",\n  ACTIVITY_ACTION_TOPUP: \"walletActivity.topup\"\n};\nconst ACCOUNT_CATEGORY = {\n  NORMAL: \"normal\",\n  THRESHOLD: \"threshold\",\n  IMPORTED: \"imported\"\n};\n\n/**\n * Preferences controller state\n */\n\n// By default, poll every 3 minutes\nconst DEFAULT_INTERVAL = 180 * 1000;\nconst DEFAULT_PREFERENCES = {\n  selectedCurrency: \"USD\",\n  theme: \"dark\",\n  locale: \"en-US\",\n  accountType: ACCOUNT_CATEGORY.NORMAL,\n  contacts: [],\n  jwtToken: \"\",\n  fetchedPastTx: [],\n  pastTransactions: [],\n  paymentTx: [],\n  defaultPublicAddress: \"\",\n  customTokens: [],\n  customNfts: [],\n  crashReport: true,\n  userInfo: {\n    aggregateVerifier: \"\",\n    email: \"\",\n    name: \"\",\n    profileImage: \"\",\n    typeOfLogin: LOGIN_PROVIDER.GOOGLE,\n    verifier: \"\",\n    verifierId: \"\"\n  }\n};\n\n/**\n * Controller that stores shared settings and exposes convenience methods\n */\nclass BasePreferencesController extends BaseController {\n  /**\n   * Creates a PreferencesController instance\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor(_ref) {\n    let {\n      config,\n      state,\n      defaultPreferences,\n      signAuthMessage\n    } = _ref;\n    super({\n      config,\n      state\n    });\n    /**\n     * Name of this controller used during composition\n     */\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"name\", \"PreferencesController\");\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"iframeOrigin\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"signAuthMessage\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"defaultPreferences\", void 0);\n    if (!config.api) {\n      throw new Error(\"PreferencesController - no api specified in config.\");\n    }\n    this.defaultState = {\n      identities: {},\n      selectedAddress: \"\",\n      lastErrorMessage: \"\",\n      lastSuccessMessage: \"\"\n    };\n    this.defaultConfig = {\n      api: config.api,\n      pollInterval: DEFAULT_INTERVAL\n    };\n    this.initialize();\n    this.defaultPreferences = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, DEFAULT_PREFERENCES), defaultPreferences);\n    this.signAuthMessage = signAuthMessage;\n  }\n  setIframeOrigin(origin) {\n    this.iframeOrigin = origin;\n  }\n  getAddressState(address) {\n    const selectedAddress = address || this.state.selectedAddress;\n    return this.state.identities[selectedAddress];\n  }\n\n  /**\n   * Sets selected address\n   *\n   * @param selectedAddress - casper account hash\n   */\n  setSelectedAddress(selectedAddress) {\n    this.update({\n      selectedAddress\n    });\n  }\n  async getUser(address) {\n    const user = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.get)(`${this.config.api}/user?fetchTx=false`, this.headers(address), {\n      useAPIKey: true\n    });\n    return user.data;\n  }\n  async createUser(params) {\n    const {\n      selectedCurrency,\n      theme,\n      verifier,\n      verifierId,\n      locale,\n      address,\n      idToken\n    } = params;\n    const userPayload = {\n      default_currency: selectedCurrency,\n      theme,\n      verifier,\n      verifier_id: verifierId,\n      locale,\n      idToken\n    };\n    await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/user`, userPayload, this.headers(address), {\n      useAPIKey: true\n    });\n    this.updateState({\n      theme,\n      defaultPublicAddress: address,\n      selectedCurrency,\n      locale\n    }, address);\n  }\n  async storeUserLogin(params) {\n    const {\n      verifierId,\n      verifier,\n      options,\n      address,\n      idToken,\n      web3AuthClientId\n    } = params;\n    if (!options.rehydrate) {\n      const browser = bowser__WEBPACK_IMPORTED_MODULE_8__[\"default\"].getParser(window.navigator.userAgent);\n      const specialBrowser = getCustomDeviceInfo();\n      const recordLoginPayload = {\n        os: browser.getOSName(),\n        os_version: browser.getOSVersion() || \"unidentified\",\n        browser: (specialBrowser === null || specialBrowser === void 0 ? void 0 : specialBrowser.browser) || browser.getBrowserName() || \"unidentified\",\n        browser_version: browser.getBrowserVersion() || \"unidentified\",\n        platform: browser.getPlatform().type || \"desktop\",\n        hostname: this.iframeOrigin,\n        verifier,\n        verifier_id: verifierId,\n        idToken,\n        web3auth_client_id: web3AuthClientId\n      };\n      await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/user/recordLogin`, recordLoginPayload, this.headers(address), {\n        useAPIKey: true\n      });\n    }\n  }\n  async setCrashReport(isEnabled) {\n    var _this$getAddressState;\n    if (isEnabled === ((_this$getAddressState = this.getAddressState()) === null || _this$getAddressState === void 0 ? void 0 : _this$getAddressState.crashReport)) return true;\n    try {\n      await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.patch)(`${this.config.api}/user`, {\n        enable_crash_reporter: isEnabled\n      }, this.headers(), {\n        useAPIKey: true\n      });\n      this.updateState({\n        crashReport: isEnabled\n      });\n      return true;\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(error);\n      return false;\n    }\n  }\n  async setUserTheme(theme) {\n    var _this$getAddressState2;\n    if (theme === ((_this$getAddressState2 = this.getAddressState()) === null || _this$getAddressState2 === void 0 ? void 0 : _this$getAddressState2.theme)) return true;\n    try {\n      await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.patch)(`${this.config.api}/user`, {\n        theme\n      }, this.headers(), {\n        useAPIKey: true\n      });\n      this.updateState({\n        theme\n      });\n      return true;\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(error);\n      return false;\n    }\n  }\n  async setUserLocale(locale) {\n    var _this$getAddressState3;\n    if (locale === ((_this$getAddressState3 = this.getAddressState()) === null || _this$getAddressState3 === void 0 ? void 0 : _this$getAddressState3.locale)) return;\n    try {\n      await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.patch)(`${this.config.api}/user`, {\n        locale\n      }, this.headers(), {\n        useAPIKey: true\n      });\n      this.updateState({\n        locale\n      });\n      return true;\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to set locale\", error);\n      return false;\n    }\n  }\n  async setSelectedCurrency(payload) {\n    var _this$getAddressState4;\n    if (payload.selectedCurrency === ((_this$getAddressState4 = this.getAddressState()) === null || _this$getAddressState4 === void 0 ? void 0 : _this$getAddressState4.selectedCurrency)) return true;\n    try {\n      await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.patch)(`${this.config.api}/user`, {\n        default_currency: payload.selectedCurrency\n      }, this.headers(), {\n        useAPIKey: true\n      });\n      this.updateState({\n        selectedCurrency: payload.selectedCurrency\n      });\n      return true;\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(error);\n      return false;\n    }\n  }\n  async addContact(contact) {\n    try {\n      var _this$getAddressState5;\n      const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/contact`, contact, this.headers(), {\n        useAPIKey: true\n      });\n      this.updateState({\n        contacts: [...(((_this$getAddressState5 = this.getAddressState()) === null || _this$getAddressState5 === void 0 ? void 0 : _this$getAddressState5.contacts) || []), response.data]\n      });\n      return true;\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to add contact\", error);\n      return false;\n    }\n  }\n  async deleteContact(contactId) {\n    try {\n      var _this$getAddressState6;\n      const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.remove)(`${this.config.api}/contact/${contactId}`, {}, this.headers(), {\n        useAPIKey: true\n      });\n      const finalContacts = (_this$getAddressState6 = this.getAddressState()) === null || _this$getAddressState6 === void 0 ? void 0 : _this$getAddressState6.contacts.filter(contact => contact.id !== response.data.id);\n      if (finalContacts) this.updateState({\n        contacts: [...finalContacts]\n      });\n      return true;\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to delete contact\", error);\n      return false;\n    }\n  }\n  async revokeDiscord(idToken) {\n    try {\n      const resp = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/revoke/discord`, {\n        token: idToken\n      }, this.headers(), {\n        useAPIKey: true\n      });\n      loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(resp);\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(error);\n    }\n  }\n  async patchPastTx(body, address) {\n    try {\n      const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.patch)(`${this.config.api}/transaction`, body, this.headers(address), {\n        useAPIKey: true\n      });\n      loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(\"successfully patched\", response);\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to patch tx\", error);\n    }\n  }\n  async postPastTx(tx, address) {\n    try {\n      const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/transaction`, tx, this.headers(address), {\n        useAPIKey: true\n      });\n      loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(\"successfully posted tx\", response);\n      return response;\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(error, \"unable to insert transaction\");\n    }\n  }\n  async getWalletOrders(address) {\n    try {\n      const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.get)(`${this.config.api}/transaction`, this.headers(address), {\n        useAPIKey: true\n      });\n      return response.success ? response.data ? response.data : [] : [];\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to get wallet orders tx\", error);\n      return [];\n    }\n  }\n  async getTopUpOrders(address) {\n    try {\n      const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.get)(`${this.config.commonApiHost}/transaction`, this.headers(address), {\n        useAPIKey: true\n      });\n      return response.data || [];\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to fetch past Top up orders\", error);\n    }\n  }\n  async getBillBoardData() {\n    try {\n      const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.get)(`${this.config.api}/billboard`, this.headers(), {\n        useAPIKey: true\n      });\n      return response.success ? response.data : [];\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to get billboard data\", error);\n      return [];\n    }\n  }\n  async getMessageForSigning(publicAddress) {\n    const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/auth/message`, {\n      public_address: publicAddress\n    }, {}, {\n      useAPIKey: true\n    });\n    return response.message;\n  }\n  async getTwitterId(payload) {\n    const res = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.get)(`${this.config.api}/twitter?screen_name=${payload.nick}`, this.headers(), {\n      useAPIKey: true\n    });\n    return `${payload.typeOfLogin.toLowerCase()}|${res.data.toString()}`;\n  }\n  async sendEmail(payload) {\n    return (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/transaction/sendemail`, payload.emailObject, this.headers(), {\n      useAPIKey: true\n    });\n  }\n  async refreshJwt() {\n    const address = this.state.selectedAddress;\n    const messageToSign = await this.getMessageForSigning(address);\n    if (!messageToSign.startsWith(this.config.signInPrefix)) throw new Error(\"Cannot sign on invalid message\");\n    const signedMessage = await this.signAuthMessage(address, messageToSign);\n    const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/auth/verify`, {\n      public_address: address,\n      signed_message: signedMessage\n    }, {}, {\n      useAPIKey: true\n    });\n    this.updateState({\n      jwtToken: response.token\n    }, address);\n  }\n  async getDappList() {\n    try {\n      const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.get)(`${this.config.api}/dapps`, this.headers(), {\n        useAPIKey: true\n      });\n      return response.success ? response.data : [];\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to get billboard data\", error);\n      return [];\n    }\n  }\n  async init(address, userInfo, jwtToken) {\n    let metadata = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let type = arguments.length > 4 ? arguments[4] : undefined;\n    let generateNewToken = arguments.length > 5 ? arguments[5] : undefined;\n    let response = {\n      token: jwtToken\n    };\n    if (this.getAddressState(address)) return;\n    if (!jwtToken || generateNewToken) {\n      let signedMessage;\n      if (!jwtToken) {\n        const messageToSign = await this.getMessageForSigning(address);\n        if (!messageToSign.startsWith(this.config.signInPrefix)) throw new Error(\"Cannot sign on invalid message\");\n        signedMessage = await this.signAuthMessage(address, messageToSign);\n      }\n      response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/auth/verify`, _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n        public_address: address,\n        signed_message: signedMessage,\n        id_token: generateNewToken ? jwtToken : undefined,\n        verifier: userInfo.aggregateVerifier || userInfo.verifier,\n        verifier_id: userInfo.verifierId\n      }, metadata), {}, {\n        useAPIKey: true\n      });\n    }\n    this.updateState({\n      jwtToken: response.token,\n      userInfo,\n      accountType: type !== null && type !== void 0 ? type : this.defaultPreferences.accountType\n    }, address);\n  }\n  updateState(preferences, address) {\n    const selectedAddress = address || this.state.selectedAddress;\n    const currentState = this.getAddressState(selectedAddress) || (0,lodash__WEBPACK_IMPORTED_MODULE_9__.cloneDeep)(this.defaultPreferences);\n    const mergedState = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, currentState), preferences);\n    this.update({\n      identities: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, this.state.identities), {}, {\n        [selectedAddress]: mergedState\n      })\n    });\n    return mergedState;\n  }\n  headers(address) {\n    var _this$getAddressState7;\n    const selectedAddress = address || this.state.selectedAddress;\n    return getHeaders(((_this$getAddressState7 = this.getAddressState(selectedAddress)) === null || _this$getAddressState7 === void 0 ? void 0 : _this$getAddressState7.jwtToken) || \"\");\n  }\n}\n\n/**\n * The status of the transaction. Each status represents the state of the transaction internally\n * in the wallet. Some of these correspond with the state of the transaction on the network, but\n * some are wallet-specific.\n */\n\nlet TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[\"approved\"] = \"approved\";\n  TransactionStatus[\"cancelled\"] = \"cancelled\";\n  TransactionStatus[\"cancelling\"] = \"cancelling\";\n  TransactionStatus[\"confirmed\"] = \"confirmed\";\n  TransactionStatus[\"failed\"] = \"failed\";\n  TransactionStatus[\"finalized\"] = \"finalized\";\n  TransactionStatus[\"processed\"] = \"processed\";\n  TransactionStatus[\"rejected\"] = \"rejected\";\n  TransactionStatus[\"signed\"] = \"signed\";\n  TransactionStatus[\"submitted\"] = \"submitted\";\n  TransactionStatus[\"unapproved\"] = \"unapproved\";\n  TransactionStatus[\"dropped\"] = \"dropped\";\n  TransactionStatus[\"expired\"] = \"expired\";\n  TransactionStatus[\"pending\"] = \"pending\";\n  return TransactionStatus;\n}({});\nconst TRANSACTION_TYPES = {\n  CANCEL: \"cancel\",\n  RETRY: \"retry\",\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  WASM_BASED_DEPLOY: \"wasmBasedDeploy\",\n  STANDARD_TRANSACTION: \"transaction\",\n  STANDARD_PAYMENT_TRANSACTION: \"payment_transaction\",\n  // specific to chains like solana and casper\n  SENT_ETHER: \"sentEther\",\n  TOKEN_METHOD_TRANSFER: \"transfer\",\n  TOKEN_METHOD_TRANSFER_FROM: \"transferFrom\",\n  TOKEN_METHOD_APPROVE: \"approve\",\n  COLLECTIBLE_METHOD_SAFE_TRANSFER_FROM: \"safeTransferFrom\",\n  SET_APPROVAL_FOR_ALL: \"setApprovalForAll\"\n};\nconst TX_EVENTS = {\n  TX_WARNING: \"tx:warning\",\n  TX_ERROR: \"tx:error\",\n  TX_FAILED: \"tx:failed\",\n  TX_CONFIRMED: \"tx:confirmed\",\n  TX_DROPPED: \"tx:dropped\",\n  TX_EXPIRED: \"tx:expired\",\n  TX_STATUS_UPDATE: \"tx:status_update\",\n  TX_UNAPPROVED: \"tx:unapproved\",\n  TX_RETRY: \"tx:retry\",\n  TX_BLOCK_UPDATE: \"tx:block_update\"\n};\n\n/**\n * Transaction controller configuration\n */\n\n/**\n * Transaction controller state\n */\n\n/**\n * Result\n *\n * result - Promise resolving to a new transaction hash\n * transactionMeta - Meta information about this new transaction\n */\n\nclass BaseTransactionStateManager extends BaseController {\n  constructor(_ref) {\n    let {\n      config,\n      state,\n      getCurrentChainId\n    } = _ref;\n    super({\n      config,\n      state\n    });\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"getCurrentChainId\", void 0);\n    this.defaultConfig = {\n      txHistoryLimit: 40\n    };\n    this.defaultState = {\n      transactions: {},\n      unapprovedTxs: {},\n      currentNetworkTxsList: []\n    };\n    this.initialize();\n    this.getCurrentChainId = getCurrentChainId;\n  }\n  getUnapprovedTxList() {\n    const chainId = this.getCurrentChainId();\n    return (0,lodash__WEBPACK_IMPORTED_MODULE_9__.pickBy)(this.state.transactions, transaction => transaction.status === TransactionStatus.unapproved && transactionMatchesNetwork(transaction, chainId));\n  }\n  getTransaction(txId) {\n    const {\n      transactions\n    } = this.state;\n    return transactions[txId];\n  }\n  updateTransaction(txMeta) {\n    // commit txMeta to state\n    const txId = txMeta.id;\n    txMeta.updated_at = new Date().toISOString();\n    this.update({\n      transactions: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, this.state.transactions), {}, {\n        [txId]: txMeta\n      })\n    });\n  }\n  setTxStatusRejected(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.rejected);\n    this._deleteTransaction(txId);\n  }\n\n  /**\n   * The implementing controller can override this functionality and add custom logic + call super.()\n   */\n  setTxStatusUnapproved(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.unapproved);\n  }\n  setTxStatusApproved(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.approved);\n  }\n  setTxStatusSigned(txId, isFinalStep) {\n    this._setTransactionStatus(txId, TransactionStatus.signed, isFinalStep);\n  }\n  setTxStatusSubmitted(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.submitted);\n  }\n  setTxStatusDropped(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.dropped);\n  }\n  setTxStatusExpired(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.expired);\n  }\n  setTxStatusConfirmed(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.confirmed);\n  }\n  setTxStatusFailed(txId, error_) {\n    const error = !error_ ? new Error(\"Internal torus failure\") : error_;\n    const txMeta = this.getTransaction(txId);\n    txMeta.error = error;\n    this.updateTransaction(txMeta);\n    this._setTransactionStatus(txId, TransactionStatus.failed);\n  }\n\n  /**\n   * Method to determine if the transaction is in a final state\n   * @param status - Transaction status\n   * @returns boolean if the transaction is in a final state\n   */\n  isFinalState(status) {\n    return status === TransactionStatus.rejected || status === TransactionStatus.submitted || status === TransactionStatus.confirmed || status === TransactionStatus.failed || status === TransactionStatus.cancelled || status === TransactionStatus.expired;\n  }\n\n  /**\n   * Filters out the unapproved transactions from state\n   */\n  clearUnapprovedTxs() {\n    this.update({\n      transactions: (0,lodash__WEBPACK_IMPORTED_MODULE_9__.omitBy)(this.state.transactions, transaction => transaction.status === TransactionStatus.unapproved)\n    });\n  }\n\n  /**\n   * will append new transactions to old txns.\n   */\n  _addTransactionsToState(transactions) {\n    this.update({\n      transactions: transactions.reduce((result, newTx) => {\n        result[newTx.id] = newTx;\n        return result;\n      }, this.state.transactions)\n    });\n  }\n\n  /**\n   * will set new txns, override existing if any in state.\n   */\n  _setTransactionsToState(transactions) {\n    this.update({\n      transactions: transactions.reduce((result, newTx) => {\n        result[newTx.id] = newTx;\n        return result;\n      }, {})\n    });\n  }\n  _deleteTransaction(targetTransactionId) {\n    const {\n      transactions\n    } = this.state;\n    delete transactions[targetTransactionId];\n    this.update({\n      transactions\n    });\n  }\n  _deleteTransactions(targetTransactionIds) {\n    const {\n      transactions\n    } = this.state;\n    targetTransactionIds.forEach(transactionId => {\n      delete transactions[transactionId];\n    });\n    this.update({\n      transactions\n    });\n  }\n  _setTransactionStatus(txId, status, isFinalStep) {\n    const txMeta = this.getTransaction(txId);\n    if (!txMeta) {\n      return;\n    }\n    txMeta.status = status;\n    // only updating status so no validation required on txn.\n    this.updateTransaction(txMeta);\n    this.emit(TX_EVENTS.TX_STATUS_UPDATE, {\n      txId,\n      status\n    });\n    if (this.isFinalState(status) || isFinalStep) {\n      this.emit(`${txMeta.id}:finished`, txMeta);\n    } else {\n      this.emit(`${txMeta.id}:${status}`, txId);\n    }\n  }\n}\n\n\n//# sourceMappingURL=baseControllers.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-session-manager/dist/baseSessionManager.esm.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-session-manager/dist/baseSessionManager.esm.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseSessionManager: () => (/* binding */ BaseSessionManager)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n\n\n\nclass BaseSessionManager {\n  constructor() {\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"sessionId\", void 0);\n  }\n  checkSessionParams() {\n    if (!this.sessionId) throw new Error(\"Session id is required\");\n    this.sessionId = this.sessionId.padStart(64, \"0\");\n  }\n\n  /**\n   * Common handler method for making an http request.\n   *\n   * Note: Embed all the query parameters in the path itself.\n   */\n  request(_ref) {\n    let {\n      method = \"GET\",\n      url,\n      data = {},\n      headers = {}\n    } = _ref;\n    const options = {\n      headers\n    };\n    switch (method) {\n      case \"GET\":\n        return (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_1__.get)(url, options);\n      case \"POST\":\n        return (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_1__.post)(url, data, options);\n      case \"PUT\":\n        return (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_1__.put)(url, data, options);\n      case \"PATCH\":\n        return (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_1__.patch)(url, data, options);\n    }\n    throw new Error(\"Invalid method type\");\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLXNlc3Npb24tbWFuYWdlci9kaXN0L2Jhc2VTZXNzaW9uTWFuYWdlci5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFvRTtBQUNKOztBQUVoRTtBQUNBO0FBQ0EsSUFBSSw0RUFBZTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw0REFBRztBQUNsQjtBQUNBLGVBQWUsNkRBQUk7QUFDbkI7QUFDQSxlQUFlLDREQUFHO0FBQ2xCO0FBQ0EsZUFBZSw4REFBSztBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFOEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC13YWxsZXQvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLXNlc3Npb24tbWFuYWdlci9kaXN0L2Jhc2VTZXNzaW9uTWFuYWdlci5lc20uanM/NWFlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHknO1xuaW1wb3J0IHsgcGF0Y2gsIHB1dCwgcG9zdCwgZ2V0IH0gZnJvbSAnQHRvcnVzbGFicy9odHRwLWhlbHBlcnMnO1xuXG5jbGFzcyBCYXNlU2Vzc2lvbk1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJzZXNzaW9uSWRcIiwgdm9pZCAwKTtcbiAgfVxuICBjaGVja1Nlc3Npb25QYXJhbXMoKSB7XG4gICAgaWYgKCF0aGlzLnNlc3Npb25JZCkgdGhyb3cgbmV3IEVycm9yKFwiU2Vzc2lvbiBpZCBpcyByZXF1aXJlZFwiKTtcbiAgICB0aGlzLnNlc3Npb25JZCA9IHRoaXMuc2Vzc2lvbklkLnBhZFN0YXJ0KDY0LCBcIjBcIik7XG4gIH1cblxuICAvKipcbiAgICogQ29tbW9uIGhhbmRsZXIgbWV0aG9kIGZvciBtYWtpbmcgYW4gaHR0cCByZXF1ZXN0LlxuICAgKlxuICAgKiBOb3RlOiBFbWJlZCBhbGwgdGhlIHF1ZXJ5IHBhcmFtZXRlcnMgaW4gdGhlIHBhdGggaXRzZWxmLlxuICAgKi9cbiAgcmVxdWVzdChfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIG1ldGhvZCA9IFwiR0VUXCIsXG4gICAgICB1cmwsXG4gICAgICBkYXRhID0ge30sXG4gICAgICBoZWFkZXJzID0ge31cbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgaGVhZGVyc1xuICAgIH07XG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgXCJHRVRcIjpcbiAgICAgICAgcmV0dXJuIGdldCh1cmwsIG9wdGlvbnMpO1xuICAgICAgY2FzZSBcIlBPU1RcIjpcbiAgICAgICAgcmV0dXJuIHBvc3QodXJsLCBkYXRhLCBvcHRpb25zKTtcbiAgICAgIGNhc2UgXCJQVVRcIjpcbiAgICAgICAgcmV0dXJuIHB1dCh1cmwsIGRhdGEsIG9wdGlvbnMpO1xuICAgICAgY2FzZSBcIlBBVENIXCI6XG4gICAgICAgIHJldHVybiBwYXRjaCh1cmwsIGRhdGEsIG9wdGlvbnMpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIG1ldGhvZCB0eXBlXCIpO1xuICB9XG59XG5cbmV4cG9ydCB7IEJhc2VTZXNzaW9uTWFuYWdlciB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-session-manager/dist/baseSessionManager.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/broadcast-channel.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/broadcast-channel.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BroadcastChannel: () => (/* binding */ BroadcastChannel),\n/* harmony export */   OPEN_BROADCAST_CHANNELS: () => (/* binding */ OPEN_BROADCAST_CHANNELS),\n/* harmony export */   enforceOptions: () => (/* binding */ enforceOptions)\n/* harmony export */ });\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\");\n/* harmony import */ var _method_chooser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./method-chooser.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/method-chooser.js\");\n/* harmony import */ var _options_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./options.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/options.js\");\n\n\n\n\n/**\n * Contains all open channels,\n * used in tests to ensure everything is closed.\n */\nvar OPEN_BROADCAST_CHANNELS = new Set();\nvar lastId = 0;\nvar BroadcastChannel = function BroadcastChannel(name, options) {\n  // identifier of the channel to debug stuff\n  this.id = lastId++;\n  OPEN_BROADCAST_CHANNELS.add(this);\n  this.name = name;\n  if (ENFORCED_OPTIONS) {\n    options = ENFORCED_OPTIONS;\n  }\n  this.options = (0,_options_js__WEBPACK_IMPORTED_MODULE_0__.fillOptionsWithDefaults)(options);\n  this.method = (0,_method_chooser_js__WEBPACK_IMPORTED_MODULE_1__.chooseMethod)(this.options);\n\n  // isListening\n  this._iL = false;\n\n  /**\n   * _onMessageListener\n   * setting onmessage twice,\n   * will overwrite the first listener\n   */\n  this._onML = null;\n\n  /**\n   * _addEventListeners\n   */\n  this._addEL = {\n    message: [],\n    internal: []\n  };\n\n  /**\n   * Unsend message promises\n   * where the sending is still in progress\n   * @type {Set<Promise>}\n   */\n  this._uMP = new Set();\n\n  /**\n   * _beforeClose\n   * array of promises that will be awaited\n   * before the channel is closed\n   */\n  this._befC = [];\n\n  /**\n   * _preparePromise\n   */\n  this._prepP = null;\n  _prepareChannel(this);\n};\n\n// STATICS\n\n/**\n * used to identify if someone overwrites\n * window.BroadcastChannel with this\n * See methods/native.js\n */\nBroadcastChannel._pubkey = true;\n\n/**\n * if set, this method is enforced,\n * no mather what the options are\n */\nvar ENFORCED_OPTIONS;\nfunction enforceOptions(options) {\n  ENFORCED_OPTIONS = options;\n}\n\n// PROTOTYPE\nBroadcastChannel.prototype = {\n  postMessage: function postMessage(msg) {\n    if (this.closed) {\n      throw new Error('BroadcastChannel.postMessage(): ' + 'Cannot post message after channel has closed ' +\n      /**\n       * In the past when this error appeared, it was realy hard to debug.\n       * So now we log the msg together with the error so it at least\n       * gives some clue about where in your application this happens.\n       */\n      JSON.stringify(msg));\n    }\n    return _post(this, 'message', msg);\n  },\n  postInternal: function postInternal(msg) {\n    return _post(this, 'internal', msg);\n  },\n  set onmessage(fn) {\n    var time = this.method.microSeconds();\n    var listenObj = {\n      time: time,\n      fn: fn\n    };\n    _removeListenerObject(this, 'message', this._onML);\n    if (fn && typeof fn === 'function') {\n      this._onML = listenObj;\n      _addListenerObject(this, 'message', listenObj);\n    } else {\n      this._onML = null;\n    }\n  },\n  addEventListener: function addEventListener(type, fn) {\n    var time = this.method.microSeconds();\n    var listenObj = {\n      time: time,\n      fn: fn\n    };\n    _addListenerObject(this, type, listenObj);\n  },\n  removeEventListener: function removeEventListener(type, fn) {\n    var obj = this._addEL[type].find(function (obj) {\n      return obj.fn === fn;\n    });\n    _removeListenerObject(this, type, obj);\n  },\n  close: function close() {\n    var _this = this;\n    if (this.closed) {\n      return;\n    }\n    OPEN_BROADCAST_CHANNELS[\"delete\"](this);\n    this.closed = true;\n    var awaitPrepare = this._prepP ? this._prepP : _util_js__WEBPACK_IMPORTED_MODULE_2__.PROMISE_RESOLVED_VOID;\n    this._onML = null;\n    this._addEL.message = [];\n    return awaitPrepare\n    // wait until all current sending are processed\n    .then(function () {\n      return Promise.all(Array.from(_this._uMP));\n    })\n    // run before-close hooks\n    .then(function () {\n      return Promise.all(_this._befC.map(function (fn) {\n        return fn();\n      }));\n    })\n    // close the channel\n    .then(function () {\n      return _this.method.close(_this._state);\n    });\n  },\n  get type() {\n    return this.method.type;\n  },\n  get isClosed() {\n    return this.closed;\n  }\n};\n\n/**\n * Post a message over the channel\n * @returns {Promise} that resolved when the message sending is done\n */\nfunction _post(broadcastChannel, type, msg) {\n  var time = broadcastChannel.method.microSeconds();\n  var msgObj = {\n    time: time,\n    type: type,\n    data: msg\n  };\n  var awaitPrepare = broadcastChannel._prepP ? broadcastChannel._prepP : _util_js__WEBPACK_IMPORTED_MODULE_2__.PROMISE_RESOLVED_VOID;\n  return awaitPrepare.then(function () {\n    var sendPromise = broadcastChannel.method.postMessage(broadcastChannel._state, msgObj);\n\n    // add/remove to unsend messages list\n    broadcastChannel._uMP.add(sendPromise);\n    sendPromise[\"catch\"]().then(function () {\n      return broadcastChannel._uMP[\"delete\"](sendPromise);\n    });\n    return sendPromise;\n  });\n}\nfunction _prepareChannel(channel) {\n  var maybePromise = channel.method.create(channel.name, channel.options);\n  if ((0,_util_js__WEBPACK_IMPORTED_MODULE_2__.isPromise)(maybePromise)) {\n    channel._prepP = maybePromise;\n    maybePromise.then(function (s) {\n      // used in tests to simulate slow runtime\n      /*if (channel.options.prepareDelay) {\n           await new Promise(res => setTimeout(res, this.options.prepareDelay));\n      }*/\n      channel._state = s;\n    });\n  } else {\n    channel._state = maybePromise;\n  }\n}\nfunction _hasMessageListeners(channel) {\n  if (channel._addEL.message.length > 0) return true;\n  if (channel._addEL.internal.length > 0) return true;\n  return false;\n}\nfunction _addListenerObject(channel, type, obj) {\n  channel._addEL[type].push(obj);\n  _startListening(channel);\n}\nfunction _removeListenerObject(channel, type, obj) {\n  channel._addEL[type] = channel._addEL[type].filter(function (o) {\n    return o !== obj;\n  });\n  _stopListening(channel);\n}\nfunction _startListening(channel) {\n  if (!channel._iL && _hasMessageListeners(channel)) {\n    // someone is listening, start subscribing\n\n    var listenerFn = function listenerFn(msgObj) {\n      channel._addEL[msgObj.type].forEach(function (listenerObject) {\n        /**\n         * Getting the current time in JavaScript has no good precision.\n         * So instead of only listening to events that happend 'after' the listener\n         * was added, we also listen to events that happended 100ms before it.\n         * This ensures that when another process, like a WebWorker, sends events\n         * we do not miss them out because their timestamp is a bit off compared to the main process.\n         * Not doing this would make messages missing when we send data directly after subscribing and awaiting a response.\n         * @link https://johnresig.com/blog/accuracy-of-javascript-time/\n         */\n        var hundredMsInMicro = 100 * 1000;\n        var minMessageTime = listenerObject.time - hundredMsInMicro;\n        if (msgObj.time >= minMessageTime) {\n          listenerObject.fn(msgObj.data);\n        } else if (channel.method.type === 'server') {\n          // server msg might lag based on connection.\n          listenerObject.fn(msgObj.data);\n        }\n      });\n    };\n    var time = channel.method.microSeconds();\n    if (channel._prepP) {\n      channel._prepP.then(function () {\n        channel._iL = true;\n        channel.method.onMessage(channel._state, listenerFn, time);\n      });\n    } else {\n      channel._iL = true;\n      channel.method.onMessage(channel._state, listenerFn, time);\n    }\n  }\n}\nfunction _stopListening(channel) {\n  if (channel._iL && !_hasMessageListeners(channel)) {\n    // noone is listening, stop subscribing\n    channel._iL = false;\n    var time = channel.method.microSeconds();\n    channel.method.onMessage(channel._state, null, time);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/broadcast-channel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/method-chooser.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/method-chooser.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chooseMethod: () => (/* binding */ chooseMethod)\n/* harmony export */ });\n/* harmony import */ var _methods_native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./methods/native.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/native.js\");\n/* harmony import */ var _methods_indexed_db_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./methods/indexed-db.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/indexed-db.js\");\n/* harmony import */ var _methods_localstorage_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./methods/localstorage.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/localstorage.js\");\n/* harmony import */ var _methods_server_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./methods/server.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/server.js\");\n/* harmony import */ var _methods_simulate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./methods/simulate.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/simulate.js\");\n\n\n\n\n\n\n// order is important\nvar METHODS = [_methods_native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n// fastest\n_methods_indexed_db_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], _methods_localstorage_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"], _methods_server_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]];\nfunction chooseMethod(options) {\n  var chooseMethods = [].concat(options.methods, METHODS).filter(Boolean);\n\n  // directly chosen\n  if (options.type) {\n    if (options.type === 'simulate') {\n      // only use simulate-method if directly chosen\n      return _methods_simulate_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n    }\n    var ret = chooseMethods.find(function (m) {\n      return m.type === options.type;\n    });\n    if (!ret) throw new Error('method-type ' + options.type + ' not found');else return ret;\n  }\n\n  /**\n   * if no webworker support is needed,\n   * remove idb from the list so that localstorage is been chosen\n   */\n  if (!options.webWorkerSupport) {\n    chooseMethods = chooseMethods.filter(function (m) {\n      return m.type !== 'idb';\n    });\n  }\n  var useMethod = chooseMethods.find(function (method) {\n    return method.canBeUsed(options);\n  });\n  if (!useMethod) throw new Error(\"No useable method found in \" + JSON.stringify(METHODS.map(function (m) {\n    return m.type;\n  })));else return useMethod;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9tZXRob2QtY2hvb3Nlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBK0M7QUFDTTtBQUNNO0FBQ1o7QUFDSTs7QUFFbkQ7QUFDQSxlQUFlLDBEQUFZO0FBQzNCO0FBQ0EsOERBQWMsRUFBRSxnRUFBa0IsRUFBRSwwREFBWTtBQUN6QztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSw0REFBYztBQUMzQjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsNEVBQTRFO0FBQzVFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRyxJQUFJO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC13YWxsZXQvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9tZXRob2QtY2hvb3Nlci5qcz9lYTFmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBOYXRpdmVNZXRob2QgZnJvbSAnLi9tZXRob2RzL25hdGl2ZS5qcyc7XG5pbXBvcnQgSW5kZXhlRGJNZXRob2QgZnJvbSAnLi9tZXRob2RzL2luZGV4ZWQtZGIuanMnO1xuaW1wb3J0IExvY2Fsc3RvcmFnZU1ldGhvZCBmcm9tICcuL21ldGhvZHMvbG9jYWxzdG9yYWdlLmpzJztcbmltcG9ydCBTZXJ2ZXJNZXRob2QgZnJvbSAnLi9tZXRob2RzL3NlcnZlci5qcyc7XG5pbXBvcnQgU2ltdWxhdGVNZXRob2QgZnJvbSAnLi9tZXRob2RzL3NpbXVsYXRlLmpzJztcblxuLy8gb3JkZXIgaXMgaW1wb3J0YW50XG52YXIgTUVUSE9EUyA9IFtOYXRpdmVNZXRob2QsXG4vLyBmYXN0ZXN0XG5JbmRleGVEYk1ldGhvZCwgTG9jYWxzdG9yYWdlTWV0aG9kLCBTZXJ2ZXJNZXRob2RdO1xuZXhwb3J0IGZ1bmN0aW9uIGNob29zZU1ldGhvZChvcHRpb25zKSB7XG4gIHZhciBjaG9vc2VNZXRob2RzID0gW10uY29uY2F0KG9wdGlvbnMubWV0aG9kcywgTUVUSE9EUykuZmlsdGVyKEJvb2xlYW4pO1xuXG4gIC8vIGRpcmVjdGx5IGNob3NlblxuICBpZiAob3B0aW9ucy50eXBlKSB7XG4gICAgaWYgKG9wdGlvbnMudHlwZSA9PT0gJ3NpbXVsYXRlJykge1xuICAgICAgLy8gb25seSB1c2Ugc2ltdWxhdGUtbWV0aG9kIGlmIGRpcmVjdGx5IGNob3NlblxuICAgICAgcmV0dXJuIFNpbXVsYXRlTWV0aG9kO1xuICAgIH1cbiAgICB2YXIgcmV0ID0gY2hvb3NlTWV0aG9kcy5maW5kKGZ1bmN0aW9uIChtKSB7XG4gICAgICByZXR1cm4gbS50eXBlID09PSBvcHRpb25zLnR5cGU7XG4gICAgfSk7XG4gICAgaWYgKCFyZXQpIHRocm93IG5ldyBFcnJvcignbWV0aG9kLXR5cGUgJyArIG9wdGlvbnMudHlwZSArICcgbm90IGZvdW5kJyk7ZWxzZSByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIGlmIG5vIHdlYndvcmtlciBzdXBwb3J0IGlzIG5lZWRlZCxcbiAgICogcmVtb3ZlIGlkYiBmcm9tIHRoZSBsaXN0IHNvIHRoYXQgbG9jYWxzdG9yYWdlIGlzIGJlZW4gY2hvc2VuXG4gICAqL1xuICBpZiAoIW9wdGlvbnMud2ViV29ya2VyU3VwcG9ydCkge1xuICAgIGNob29zZU1ldGhvZHMgPSBjaG9vc2VNZXRob2RzLmZpbHRlcihmdW5jdGlvbiAobSkge1xuICAgICAgcmV0dXJuIG0udHlwZSAhPT0gJ2lkYic7XG4gICAgfSk7XG4gIH1cbiAgdmFyIHVzZU1ldGhvZCA9IGNob29zZU1ldGhvZHMuZmluZChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgcmV0dXJuIG1ldGhvZC5jYW5CZVVzZWQob3B0aW9ucyk7XG4gIH0pO1xuICBpZiAoIXVzZU1ldGhvZCkgdGhyb3cgbmV3IEVycm9yKFwiTm8gdXNlYWJsZSBtZXRob2QgZm91bmQgaW4gXCIgKyBKU09OLnN0cmluZ2lmeShNRVRIT0RTLm1hcChmdW5jdGlvbiAobSkge1xuICAgIHJldHVybiBtLnR5cGU7XG4gIH0pKSk7ZWxzZSByZXR1cm4gdXNlTWV0aG9kO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/method-chooser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/indexed-db.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/indexed-db.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRANSACTION_SETTINGS: () => (/* binding */ TRANSACTION_SETTINGS),\n/* harmony export */   averageResponseTime: () => (/* binding */ averageResponseTime),\n/* harmony export */   canBeUsed: () => (/* binding */ canBeUsed),\n/* harmony export */   cleanOldMessages: () => (/* binding */ cleanOldMessages),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   commitIndexedDBTransaction: () => (/* binding */ commitIndexedDBTransaction),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   createDatabase: () => (/* binding */ createDatabase),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getAllMessages: () => (/* binding */ getAllMessages),\n/* harmony export */   getIdb: () => (/* binding */ getIdb),\n/* harmony export */   getMessagesHigherThan: () => (/* binding */ getMessagesHigherThan),\n/* harmony export */   getOldMessages: () => (/* binding */ getOldMessages),\n/* harmony export */   microSeconds: () => (/* binding */ microSeconds),\n/* harmony export */   onMessage: () => (/* binding */ onMessage),\n/* harmony export */   postMessage: () => (/* binding */ postMessage),\n/* harmony export */   removeMessagesById: () => (/* binding */ removeMessagesById),\n/* harmony export */   type: () => (/* binding */ type),\n/* harmony export */   writeMessage: () => (/* binding */ writeMessage)\n/* harmony export */ });\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\");\n/* harmony import */ var oblivious_set__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! oblivious-set */ \"(ssr)/./node_modules/oblivious-set/dist/es/index.js\");\n/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../options */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/options.js\");\n/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n *\n * When working on this, ensure to use these performance optimizations:\n * @link https://rxdb.info/slow-indexeddb.html\n */\n\n\nvar microSeconds = _util_js__WEBPACK_IMPORTED_MODULE_0__.microSeconds;\n\n\nvar DB_PREFIX = 'pubkey.broadcast-channel-0-';\nvar OBJECT_STORE_ID = 'messages';\n\n/**\n * Use relaxed durability for faster performance on all transactions.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\nvar TRANSACTION_SETTINGS = {\n  durability: 'relaxed'\n};\nvar type = 'idb';\nfunction getIdb() {\n  if (typeof indexedDB !== 'undefined') return indexedDB;\n  if (typeof window !== 'undefined') {\n    if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\n    if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\n    if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\n  }\n  return false;\n}\n\n/**\n * If possible, we should explicitly commit IndexedDB transactions\n * for better performance.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\nfunction commitIndexedDBTransaction(tx) {\n  if (tx.commit) {\n    tx.commit();\n  }\n}\nfunction createDatabase(channelName) {\n  var IndexedDB = getIdb();\n\n  // create table\n  var dbName = DB_PREFIX + channelName;\n\n  /**\n   * All IndexedDB databases are opened without version\n   * because it is a bit faster, especially on firefox\n   * @link http://nparashuram.com/IndexedDB/perf/#Open%20Database%20with%20version\n   */\n  var openRequest = IndexedDB.open(dbName);\n  openRequest.onupgradeneeded = function (ev) {\n    var db = ev.target.result;\n    db.createObjectStore(OBJECT_STORE_ID, {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  };\n  var dbPromise = new Promise(function (res, rej) {\n    openRequest.onerror = function (ev) {\n      return rej(ev);\n    };\n    openRequest.onsuccess = function () {\n      res(openRequest.result);\n    };\n  });\n  return dbPromise;\n}\n\n/**\n * writes the new message to the database\n * so other readers can find it\n */\nfunction writeMessage(db, readerUuid, messageJson) {\n  var time = new Date().getTime();\n  var writeObject = {\n    uuid: readerUuid,\n    time: time,\n    data: messageJson\n  };\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  return new Promise(function (res, rej) {\n    tx.oncomplete = function () {\n      return res();\n    };\n    tx.onerror = function (ev) {\n      return rej(ev);\n    };\n    var objectStore = tx.objectStore(OBJECT_STORE_ID);\n    objectStore.add(writeObject);\n    commitIndexedDBTransaction(tx);\n  });\n}\nfunction getAllMessages(db) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n      if (cursor) {\n        ret.push(cursor.value);\n        //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n        cursor[\"continue\"]();\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\nfunction getMessagesHigherThan(db, lastCursorId) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n\n  /**\n   * Optimization shortcut,\n   * if getAll() can be used, do not use a cursor.\n   * @link https://rxdb.info/slow-indexeddb.html\n   */\n  if (objectStore.getAll) {\n    var getAllRequest = objectStore.getAll(keyRangeValue);\n    return new Promise(function (res, rej) {\n      getAllRequest.onerror = function (err) {\n        return rej(err);\n      };\n      getAllRequest.onsuccess = function (e) {\n        res(e.target.result);\n      };\n    });\n  }\n  function openCursor() {\n    // Occasionally Safari will fail on IDBKeyRange.bound, this\n    // catches that error, having it open the cursor to the first\n    // item. When it gets data it will advance to the desired key.\n    try {\n      keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n      return objectStore.openCursor(keyRangeValue);\n    } catch (e) {\n      return objectStore.openCursor();\n    }\n  }\n  return new Promise(function (res, rej) {\n    var openCursorRequest = openCursor();\n    openCursorRequest.onerror = function (err) {\n      return rej(err);\n    };\n    openCursorRequest.onsuccess = function (ev) {\n      var cursor = ev.target.result;\n      if (cursor) {\n        if (cursor.value.id < lastCursorId + 1) {\n          cursor[\"continue\"](lastCursorId + 1);\n        } else {\n          ret.push(cursor.value);\n          cursor[\"continue\"]();\n        }\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\nfunction removeMessagesById(db, ids) {\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  return Promise.all(ids.map(function (id) {\n    var deleteRequest = objectStore[\"delete\"](id);\n    return new Promise(function (res) {\n      deleteRequest.onsuccess = function () {\n        return res();\n      };\n    });\n  }));\n}\nfunction getOldMessages(db, ttl) {\n  var olderThen = new Date().getTime() - ttl;\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n      if (cursor) {\n        var msgObk = cursor.value;\n        if (msgObk.time < olderThen) {\n          ret.push(msgObk);\n          //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n          cursor[\"continue\"]();\n        } else {\n          // no more old messages,\n          commitIndexedDBTransaction(tx);\n          res(ret);\n          return;\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\nfunction cleanOldMessages(db, ttl) {\n  return getOldMessages(db, ttl).then(function (tooOld) {\n    return removeMessagesById(db, tooOld.map(function (msg) {\n      return msg.id;\n    }));\n  });\n}\nfunction create(channelName, options) {\n  options = (0,_options__WEBPACK_IMPORTED_MODULE_1__.fillOptionsWithDefaults)(options);\n  return createDatabase(channelName).then(function (db) {\n    var state = {\n      closed: false,\n      lastCursorId: 0,\n      channelName: channelName,\n      options: options,\n      uuid: (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.randomToken)(),\n      /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */\n      eMIs: new oblivious_set__WEBPACK_IMPORTED_MODULE_2__.ObliviousSet(options.idb.ttl * 2),\n      // ensures we do not read messages in parrallel\n      writeBlockPromise: _util_js__WEBPACK_IMPORTED_MODULE_0__.PROMISE_RESOLVED_VOID,\n      messagesCallback: null,\n      readQueuePromises: [],\n      db: db\n    };\n\n    /**\n     * Handle abrupt closes that do not originate from db.close().\n     * This could happen, for example, if the underlying storage is\n     * removed or if the user clears the database in the browser's\n     * history preferences.\n     */\n    db.onclose = function () {\n      state.closed = true;\n      if (options.idb.onclose) options.idb.onclose();\n    };\n\n    /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */\n    _readLoop(state);\n    return state;\n  });\n}\nfunction _readLoop(state) {\n  if (state.closed) return;\n  readNewMessages(state).then(function () {\n    return (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.sleep)(state.options.idb.fallbackInterval);\n  }).then(function () {\n    return _readLoop(state);\n  });\n}\nfunction _filterMessage(msgObj, state) {\n  if (msgObj.uuid === state.uuid) return false; // send by own\n  if (state.eMIs.has(msgObj.id)) return false; // already emitted\n  if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n  return true;\n}\n\n/**\n * reads all new messages from the database and emits them\n */\nfunction readNewMessages(state) {\n  // channel already closed\n  if (state.closed) return _util_js__WEBPACK_IMPORTED_MODULE_0__.PROMISE_RESOLVED_VOID;\n\n  // if no one is listening, we do not need to scan for new messages\n  if (!state.messagesCallback) return _util_js__WEBPACK_IMPORTED_MODULE_0__.PROMISE_RESOLVED_VOID;\n  return getMessagesHigherThan(state.db, state.lastCursorId).then(function (newerMessages) {\n    var useMessages = newerMessages\n    /**\n     * there is a bug in iOS where the msgObj can be undefined some times\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */.filter(function (msgObj) {\n      return !!msgObj;\n    }).map(function (msgObj) {\n      if (msgObj.id > state.lastCursorId) {\n        state.lastCursorId = msgObj.id;\n      }\n      return msgObj;\n    }).filter(function (msgObj) {\n      return _filterMessage(msgObj, state);\n    }).sort(function (msgObjA, msgObjB) {\n      return msgObjA.time - msgObjB.time;\n    }); // sort by time\n    useMessages.forEach(function (msgObj) {\n      if (state.messagesCallback) {\n        state.eMIs.add(msgObj.id);\n        state.messagesCallback(msgObj.data);\n      }\n    });\n    return _util_js__WEBPACK_IMPORTED_MODULE_0__.PROMISE_RESOLVED_VOID;\n  });\n}\nfunction close(channelState) {\n  channelState.closed = true;\n  channelState.db.close();\n}\nfunction postMessage(channelState, messageJson) {\n  channelState.writeBlockPromise = channelState.writeBlockPromise.then(function () {\n    return writeMessage(channelState.db, channelState.uuid, messageJson);\n  }).then(function () {\n    if ((0,_util_js__WEBPACK_IMPORTED_MODULE_0__.randomInt)(0, 10) === 0) {\n      /* await (do not await) */\n      cleanOldMessages(channelState.db, channelState.options.idb.ttl);\n    }\n  });\n  return channelState.writeBlockPromise;\n}\nfunction onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n  readNewMessages(channelState);\n}\nfunction canBeUsed(options) {\n  if (!options.support3PC) return false;\n  var idb = getIdb();\n  if (!idb) return false;\n  return true;\n}\nfunction averageResponseTime(options) {\n  return options.idb.fallbackInterval * 2;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/indexed-db.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/localstorage.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/localstorage.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addStorageEventListener: () => (/* binding */ addStorageEventListener),\n/* harmony export */   averageResponseTime: () => (/* binding */ averageResponseTime),\n/* harmony export */   canBeUsed: () => (/* binding */ canBeUsed),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getLocalStorage: () => (/* binding */ getLocalStorage),\n/* harmony export */   microSeconds: () => (/* binding */ microSeconds),\n/* harmony export */   onMessage: () => (/* binding */ onMessage),\n/* harmony export */   postMessage: () => (/* binding */ postMessage),\n/* harmony export */   removeStorageEventListener: () => (/* binding */ removeStorageEventListener),\n/* harmony export */   storageKey: () => (/* binding */ storageKey),\n/* harmony export */   type: () => (/* binding */ type)\n/* harmony export */ });\n/* harmony import */ var oblivious_set__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! oblivious-set */ \"(ssr)/./node_modules/oblivious-set/dist/es/index.js\");\n/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../options */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/options.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\");\n/**\n * A localStorage-only method which uses localstorage and its 'storage'-event\n * This does not work inside of webworkers because they have no access to locastorage\n * This is basically implemented to support IE9 or your grandmothers toaster.\n * @link https://caniuse.com/#feat=namevalue-storage\n * @link https://caniuse.com/#feat=indexeddb\n */\n\n\n\n\nvar microSeconds = _util__WEBPACK_IMPORTED_MODULE_0__.microSeconds;\nvar KEY_PREFIX = 'pubkey.broadcastChannel-';\nvar type = 'localstorage';\n\n/**\n * copied from crosstab\n * @link https://github.com/tejacques/crosstab/blob/master/src/crosstab.js#L32\n */\nfunction getLocalStorage() {\n  var localStorage;\n  if (typeof window === 'undefined') return null;\n  try {\n    localStorage = window.localStorage;\n    localStorage = window['ie8-eventlistener/storage'] || window.localStorage;\n  } catch (e) {\n    // New versions of Firefox throw a Security exception\n    // if cookies are disabled. See\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1028153\n  }\n  return localStorage;\n}\nfunction storageKey(channelName) {\n  return KEY_PREFIX + channelName;\n}\n\n/**\n * writes the new message to the storage\n * and fires the storage-event so other readers can find it\n */\nfunction postMessage(channelState, messageJson) {\n  return new Promise(function (res) {\n    (0,_util__WEBPACK_IMPORTED_MODULE_0__.sleep)().then(function () {\n      var key = storageKey(channelState.channelName);\n      var writeObj = {\n        token: (0,_util__WEBPACK_IMPORTED_MODULE_0__.randomToken)(),\n        time: new Date().getTime(),\n        data: messageJson,\n        uuid: channelState.uuid\n      };\n      var value = JSON.stringify(writeObj);\n      getLocalStorage().setItem(key, value);\n\n      /**\n       * StorageEvent does not fire the 'storage' event\n       * in the window that changes the state of the local storage.\n       * So we fire it manually\n       */\n      var ev = document.createEvent('Event');\n      ev.initEvent('storage', true, true);\n      ev.key = key;\n      ev.newValue = value;\n      window.dispatchEvent(ev);\n      res();\n    });\n  });\n}\nfunction addStorageEventListener(channelName, fn) {\n  var key = storageKey(channelName);\n  var listener = function listener(ev) {\n    if (ev.key === key) {\n      fn(JSON.parse(ev.newValue));\n    }\n  };\n  window.addEventListener('storage', listener);\n  return listener;\n}\nfunction removeStorageEventListener(listener) {\n  window.removeEventListener('storage', listener);\n}\nfunction create(channelName, options) {\n  options = (0,_options__WEBPACK_IMPORTED_MODULE_1__.fillOptionsWithDefaults)(options);\n  if (!canBeUsed(options)) {\n    throw new Error('BroadcastChannel: localstorage cannot be used');\n  }\n  var uuid = (0,_util__WEBPACK_IMPORTED_MODULE_0__.randomToken)();\n\n  /**\n   * eMIs\n   * contains all messages that have been emitted before\n   * @type {ObliviousSet}\n   */\n  var eMIs = new oblivious_set__WEBPACK_IMPORTED_MODULE_2__.ObliviousSet(options.localstorage.removeTimeout);\n  var state = {\n    channelName: channelName,\n    uuid: uuid,\n    eMIs: eMIs // emittedMessagesIds\n  };\n\n  state.listener = addStorageEventListener(channelName, function (msgObj) {\n    if (!state.messagesCallback) return; // no listener\n    if (msgObj.uuid === uuid) return; // own message\n    if (!msgObj.token || eMIs.has(msgObj.token)) return; // already emitted\n    if (msgObj.data.time && msgObj.data.time < state.messagesCallbackTime) return; // too old\n\n    eMIs.add(msgObj.token);\n    state.messagesCallback(msgObj.data);\n  });\n  return state;\n}\nfunction close(channelState) {\n  removeStorageEventListener(channelState.listener);\n}\nfunction onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n}\nfunction canBeUsed(options) {\n  if (!options.support3PC) return false;\n  var ls = getLocalStorage();\n  if (!ls) return false;\n  try {\n    var key = '__broadcastchannel_check';\n    ls.setItem(key, 'works');\n    ls.removeItem(key);\n  } catch (e) {\n    // Safari 10 in private mode will not allow write access to local\n    // storage and fail with a QuotaExceededError. See\n    // https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API#Private_Browsing_Incognito_modes\n    return false;\n  }\n  return true;\n}\nfunction averageResponseTime() {\n  var defaultTime = 120;\n  var userAgent = navigator.userAgent.toLowerCase();\n  if (userAgent.includes('safari') && !userAgent.includes('chrome')) {\n    // safari is much slower so this time is higher\n    return defaultTime * 2;\n  }\n  return defaultTime;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/localstorage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/native.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/native.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   averageResponseTime: () => (/* binding */ averageResponseTime),\n/* harmony export */   canBeUsed: () => (/* binding */ canBeUsed),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   microSeconds: () => (/* binding */ microSeconds),\n/* harmony export */   onMessage: () => (/* binding */ onMessage),\n/* harmony export */   postMessage: () => (/* binding */ postMessage),\n/* harmony export */   type: () => (/* binding */ type)\n/* harmony export */ });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\");\n\nvar microSeconds = _util__WEBPACK_IMPORTED_MODULE_0__.microSeconds;\nvar type = 'native';\nfunction create(channelName) {\n  var state = {\n    messagesCallback: null,\n    bc: new BroadcastChannel(channelName),\n    subFns: [] // subscriberFunctions\n  };\n\n  state.bc.onmessage = function (msg) {\n    if (state.messagesCallback) {\n      state.messagesCallback(msg.data);\n    }\n  };\n  return state;\n}\nfunction close(channelState) {\n  channelState.bc.close();\n  channelState.subFns = [];\n}\nfunction postMessage(channelState, messageJson) {\n  try {\n    channelState.bc.postMessage(messageJson, false);\n    return _util__WEBPACK_IMPORTED_MODULE_0__.PROMISE_RESOLVED_VOID;\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\nfunction onMessage(channelState, fn) {\n  channelState.messagesCallback = fn;\n}\nfunction canBeUsed(options) {\n  /**\n   * in the electron-renderer, isNode will be true even if we are in browser-context\n   * so we also check if window is undefined\n   */\n  if (typeof window === 'undefined') return false;\n  if (!options.support3PC) return false;\n  if (typeof BroadcastChannel === 'function') {\n    if (BroadcastChannel._pubkey) {\n      throw new Error('BroadcastChannel: Do not overwrite window.BroadcastChannel with this module, this is not a polyfill');\n    }\n    return true;\n  } else return false;\n}\nfunction averageResponseTime() {\n  return 150;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9tZXRob2RzL25hdGl2ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQXVFO0FBQ2hFLG1CQUFtQiwrQ0FBSztBQUN4QjtBQUNBO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsV0FBVyx3REFBcUI7QUFDaEMsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNPO0FBQ1A7QUFDQTtBQUNBLGlFQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC13YWxsZXQvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9tZXRob2RzL25hdGl2ZS5qcz9mMDUzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1pY3JvU2Vjb25kcyBhcyBtaWNybywgUFJPTUlTRV9SRVNPTFZFRF9WT0lEIH0gZnJvbSAnLi4vdXRpbCc7XG5leHBvcnQgdmFyIG1pY3JvU2Vjb25kcyA9IG1pY3JvO1xuZXhwb3J0IHZhciB0eXBlID0gJ25hdGl2ZSc7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKGNoYW5uZWxOYW1lKSB7XG4gIHZhciBzdGF0ZSA9IHtcbiAgICBtZXNzYWdlc0NhbGxiYWNrOiBudWxsLFxuICAgIGJjOiBuZXcgQnJvYWRjYXN0Q2hhbm5lbChjaGFubmVsTmFtZSksXG4gICAgc3ViRm5zOiBbXSAvLyBzdWJzY3JpYmVyRnVuY3Rpb25zXG4gIH07XG5cbiAgc3RhdGUuYmMub25tZXNzYWdlID0gZnVuY3Rpb24gKG1zZykge1xuICAgIGlmIChzdGF0ZS5tZXNzYWdlc0NhbGxiYWNrKSB7XG4gICAgICBzdGF0ZS5tZXNzYWdlc0NhbGxiYWNrKG1zZy5kYXRhKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBzdGF0ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjbG9zZShjaGFubmVsU3RhdGUpIHtcbiAgY2hhbm5lbFN0YXRlLmJjLmNsb3NlKCk7XG4gIGNoYW5uZWxTdGF0ZS5zdWJGbnMgPSBbXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwb3N0TWVzc2FnZShjaGFubmVsU3RhdGUsIG1lc3NhZ2VKc29uKSB7XG4gIHRyeSB7XG4gICAgY2hhbm5lbFN0YXRlLmJjLnBvc3RNZXNzYWdlKG1lc3NhZ2VKc29uLCBmYWxzZSk7XG4gICAgcmV0dXJuIFBST01JU0VfUkVTT0xWRURfVk9JRDtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBvbk1lc3NhZ2UoY2hhbm5lbFN0YXRlLCBmbikge1xuICBjaGFubmVsU3RhdGUubWVzc2FnZXNDYWxsYmFjayA9IGZuO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNhbkJlVXNlZChvcHRpb25zKSB7XG4gIC8qKlxuICAgKiBpbiB0aGUgZWxlY3Ryb24tcmVuZGVyZXIsIGlzTm9kZSB3aWxsIGJlIHRydWUgZXZlbiBpZiB3ZSBhcmUgaW4gYnJvd3Nlci1jb250ZXh0XG4gICAqIHNvIHdlIGFsc28gY2hlY2sgaWYgd2luZG93IGlzIHVuZGVmaW5lZFxuICAgKi9cbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2U7XG4gIGlmICghb3B0aW9ucy5zdXBwb3J0M1BDKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgQnJvYWRjYXN0Q2hhbm5lbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChCcm9hZGNhc3RDaGFubmVsLl9wdWJrZXkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQnJvYWRjYXN0Q2hhbm5lbDogRG8gbm90IG92ZXJ3cml0ZSB3aW5kb3cuQnJvYWRjYXN0Q2hhbm5lbCB3aXRoIHRoaXMgbW9kdWxlLCB0aGlzIGlzIG5vdCBhIHBvbHlmaWxsJyk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGF2ZXJhZ2VSZXNwb25zZVRpbWUoKSB7XG4gIHJldHVybiAxNTA7XG59XG5leHBvcnQgZGVmYXVsdCB7XG4gIGNyZWF0ZTogY3JlYXRlLFxuICBjbG9zZTogY2xvc2UsXG4gIG9uTWVzc2FnZTogb25NZXNzYWdlLFxuICBwb3N0TWVzc2FnZTogcG9zdE1lc3NhZ2UsXG4gIGNhbkJlVXNlZDogY2FuQmVVc2VkLFxuICB0eXBlOiB0eXBlLFxuICBhdmVyYWdlUmVzcG9uc2VUaW1lOiBhdmVyYWdlUmVzcG9uc2VUaW1lLFxuICBtaWNyb1NlY29uZHM6IG1pY3JvU2Vjb25kc1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/native.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/server.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/server.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   averageResponseTime: () => (/* binding */ averageResponseTime),\n/* harmony export */   canBeUsed: () => (/* binding */ canBeUsed),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getSocketInstance: () => (/* binding */ getSocketInstance),\n/* harmony export */   microSeconds: () => (/* binding */ microSeconds),\n/* harmony export */   onMessage: () => (/* binding */ onMessage),\n/* harmony export */   postMessage: () => (/* binding */ postMessage),\n/* harmony export */   removeStorageEventListener: () => (/* binding */ removeStorageEventListener),\n/* harmony export */   setupSocketConnection: () => (/* binding */ setupSocketConnection),\n/* harmony export */   storageKey: () => (/* binding */ storageKey),\n/* harmony export */   type: () => (/* binding */ type)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"(ssr)/./node_modules/@babel/runtime/helpers/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"(ssr)/./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var oblivious_set__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! oblivious-set */ \"(ssr)/./node_modules/oblivious-set/dist/es/index.js\");\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! socket.io-client */ \"(ssr)/./node_modules/socket.io-client/build/esm-debug/index.js\");\n/* harmony import */ var _toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/eccrypto */ \"(ssr)/./node_modules/@toruslabs/eccrypto/dist/eccrypto.esm.js\");\n/* harmony import */ var _toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @toruslabs/metadata-helpers */ \"(ssr)/./node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\");\n/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../options */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/options.js\");\n\n\n/**\n * A localStorage-only method which uses localstorage and its 'storage'-event\n * This does not work inside of webworkers because they have no access to locastorage\n * This is basically implemented to support IE9 or your grandmothers toaster.\n * @link https://caniuse.com/#feat=namevalue-storage\n * @link https://caniuse.com/#feat=indexeddb\n */\n\n\n\n\n\n\n\n\nvar microSeconds = _util__WEBPACK_IMPORTED_MODULE_5__.microSeconds;\nvar KEY_PREFIX = 'pubkey.broadcastChannel-';\nvar type = 'server';\nvar SOCKET_CONN_INSTANCE = null;\n// used to decide to reconnect socket e.g. when socket connection is disconnected unexpectedly\nvar runningChannels = new Set();\nfunction storageKey(channelName) {\n  return KEY_PREFIX + channelName;\n}\n\n/**\n * writes the new message to the storage\n * and fires the storage-event so other readers can find it\n */\nfunction postMessage(channelState, messageJson) {\n  return new Promise(function (res, rej) {\n    (0,_util__WEBPACK_IMPORTED_MODULE_5__.sleep)().then( /*#__PURE__*/_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee() {\n      var key, channelEncPrivKey, encData, body;\n      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            key = storageKey(channelState.channelName);\n            channelEncPrivKey = (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_4__.keccak256)(Buffer.from(key, 'utf8'));\n            _context.next = 4;\n            return (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_4__.encryptData)(channelEncPrivKey.toString('hex'), {\n              token: (0,_util__WEBPACK_IMPORTED_MODULE_5__.randomToken)(),\n              time: new Date().getTime(),\n              data: messageJson,\n              uuid: channelState.uuid\n            });\n          case 4:\n            encData = _context.sent;\n            _context.t0 = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.getPublic)(channelEncPrivKey).toString('hex');\n            _context.t1 = encData;\n            _context.next = 9;\n            return (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.sign)(channelEncPrivKey, (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_4__.keccak256)(Buffer.from(encData, 'utf8')));\n          case 9:\n            _context.t2 = _context.sent.toString('hex');\n            body = {\n              sameOriginCheck: true,\n              sameIpCheck: true,\n              key: _context.t0,\n              data: _context.t1,\n              signature: _context.t2\n            };\n            if (channelState.timeout) body.timeout = channelState.timeout;\n            return _context.abrupt(\"return\", fetch(channelState.serverUrl + '/channel/set', {\n              method: 'POST',\n              body: JSON.stringify(body),\n              headers: {\n                'Content-Type': 'application/json; charset=utf-8'\n              }\n            }).then(res)[\"catch\"](rej));\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    })));\n  });\n}\nfunction getSocketInstance(serverUrl) {\n  if (SOCKET_CONN_INSTANCE) {\n    return SOCKET_CONN_INSTANCE;\n  }\n  var SOCKET_CONN = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_2__.io)(serverUrl, {\n    transports: ['websocket', 'polling'],\n    // use WebSocket first, if available\n    withCredentials: true,\n    reconnectionDelayMax: 10000,\n    reconnectionAttempts: 10\n  });\n  SOCKET_CONN.on('connect_error', function (err) {\n    // revert to classic upgrade\n    SOCKET_CONN.io.opts.transports = ['polling', 'websocket'];\n    _util__WEBPACK_IMPORTED_MODULE_5__.log.error('connect error', err);\n  });\n  SOCKET_CONN.on('connect', /*#__PURE__*/_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee2() {\n    var engine;\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          engine = SOCKET_CONN.io.engine;\n          _util__WEBPACK_IMPORTED_MODULE_5__.log.debug('initially connected to', engine.transport.name); // in most cases, prints \"polling\"\n          engine.once('upgrade', function () {\n            // called when the transport is upgraded (i.e. from HTTP long-polling to WebSocket)\n            _util__WEBPACK_IMPORTED_MODULE_5__.log.debug('upgraded', engine.transport.name); // in most cases, prints \"websocket\"\n          });\n\n          engine.once('close', function (reason) {\n            // called when the underlying connection is closed\n            _util__WEBPACK_IMPORTED_MODULE_5__.log.debug('connection closed', reason);\n          });\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  })));\n  SOCKET_CONN.on('error', function (err) {\n    _util__WEBPACK_IMPORTED_MODULE_5__.log.error('socket errored', err);\n    SOCKET_CONN.disconnect();\n  });\n  SOCKET_CONN_INSTANCE = SOCKET_CONN;\n  return SOCKET_CONN;\n}\nfunction setupSocketConnection(serverUrl, channelState, fn) {\n  var socketConn = getSocketInstance(serverUrl);\n  var key = storageKey(channelState.channelName);\n  var channelEncPrivKey = (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_4__.keccak256)(Buffer.from(key, 'utf8'));\n  var channelPubKey = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.getPublic)(channelEncPrivKey).toString('hex');\n  if (socketConn.connected) {\n    socketConn.emit('check_auth_status', channelPubKey, {\n      sameOriginCheck: true,\n      sameIpCheck: true\n    });\n  } else {\n    socketConn.once('connect', function () {\n      _util__WEBPACK_IMPORTED_MODULE_5__.log.debug('connected with socket');\n      socketConn.emit('check_auth_status', channelPubKey, {\n        sameOriginCheck: true,\n        sameIpCheck: true\n      });\n    });\n  }\n  var reconnect = function reconnect() {\n    socketConn.once('connect', /*#__PURE__*/_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee3() {\n      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            if (runningChannels.has(channelState.channelName)) {\n              socketConn.emit('check_auth_status', channelPubKey, {\n                sameOriginCheck: true,\n                sameIpCheck: true\n              });\n            }\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    })));\n  };\n  var visibilityListener = function visibilityListener() {\n    // if channel is closed, then remove the listener.\n    if (!socketConn || !runningChannels.has(channelState.channelName)) {\n      document.removeEventListener('visibilitychange', visibilityListener);\n      return;\n    }\n    // if not connected, then wait for connection and ping server for latest msg.\n    if (!socketConn.connected && document.visibilityState === 'visible') {\n      reconnect();\n    }\n  };\n  var listener = /*#__PURE__*/function () {\n    var _ref4 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee4(ev) {\n      var decData;\n      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_4__.decryptData)(channelEncPrivKey.toString('hex'), ev);\n          case 3:\n            decData = _context4.sent;\n            _util__WEBPACK_IMPORTED_MODULE_5__.log.info(decData);\n            fn(decData);\n            _context4.next = 11;\n            break;\n          case 8:\n            _context4.prev = 8;\n            _context4.t0 = _context4[\"catch\"](0);\n            _util__WEBPACK_IMPORTED_MODULE_5__.log.error(_context4.t0);\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4, null, [[0, 8]]);\n    }));\n    return function listener(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  socketConn.on('disconnect', function () {\n    _util__WEBPACK_IMPORTED_MODULE_5__.log.debug('socket disconnected');\n    if (runningChannels.has(channelState.channelName)) {\n      _util__WEBPACK_IMPORTED_MODULE_5__.log.error('socket disconnected unexpectedly, reconnecting socket');\n      reconnect();\n    }\n  });\n  socketConn.on(channelPubKey + \"_success\", listener);\n  if (typeof document !== 'undefined') document.addEventListener('visibilitychange', visibilityListener);\n  return socketConn;\n}\nfunction removeStorageEventListener() {\n  if (SOCKET_CONN_INSTANCE) {\n    SOCKET_CONN_INSTANCE.disconnect();\n  }\n}\nfunction create(channelName, options) {\n  options = (0,_options__WEBPACK_IMPORTED_MODULE_6__.fillOptionsWithDefaults)(options);\n  if (!canBeUsed(options)) {\n    throw new Error('BroadcastChannel: server cannot be used');\n  }\n  var uuid = (0,_util__WEBPACK_IMPORTED_MODULE_5__.randomToken)();\n\n  /**\n   * eMIs\n   * contains all messages that have been emitted before\n   * @type {ObliviousSet}\n   */\n  var eMIs = new oblivious_set__WEBPACK_IMPORTED_MODULE_7__.ObliviousSet(options.server.removeTimeout);\n  var state = {\n    channelName: channelName,\n    uuid: uuid,\n    eMIs: eMIs,\n    // emittedMessagesIds\n    serverUrl: options.server.url\n  };\n  if (options.server.timeout) state.timeout = options.server.timeout;\n  setupSocketConnection(options.server.url, state, function (msgObj) {\n    if (!state.messagesCallback) return; // no listener\n    if (msgObj.uuid === state.uuid) return; // own message\n    if (!msgObj.token || state.eMIs.has(msgObj.token)) return; // already emitted\n    // if (msgObj.data.time && msgObj.data.time < state.messagesCallbackTime) return; // too old\n\n    state.eMIs.add(msgObj.token);\n    state.messagesCallback(msgObj.data);\n  });\n  runningChannels.add(channelName);\n  return state;\n}\nfunction close(channelState) {\n  runningChannels[\"delete\"](channelState.channelName);\n  // give 2 sec for all msgs which are in transit to be consumed\n  // by receiver.\n  // window.setTimeout(() => {\n  //     removeStorageEventListener(channelState);\n  //     SOCKET_CONN_INSTANCE = null;\n  // }, 1000);\n}\n\nfunction onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n}\nfunction canBeUsed() {\n  return true;\n}\nfunction averageResponseTime() {\n  var defaultTime = 500;\n  // TODO: Maybe increase it based on operation\n  return defaultTime;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9tZXRob2RzL3NlcnZlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF3RTtBQUNYO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU2QztBQUNQO0FBQ2dCO0FBQzRCO0FBQ3BEO0FBQ3VCO0FBQ2U7QUFDN0QsbUJBQW1CLCtDQUFLO0FBQy9CO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsSUFBSSw0Q0FBSyxzQkFBc0IsOEVBQWlCLGVBQWUsc0VBQXdCO0FBQ3ZGO0FBQ0EsYUFBYSxzRUFBd0I7QUFDckM7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHNFQUFTO0FBQ3pDO0FBQ0EsbUJBQW1CLHdFQUFXO0FBQzlCLHFCQUFxQixrREFBVztBQUNoQztBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLDBCQUEwQiw4REFBUztBQUNuQztBQUNBO0FBQ0EsbUJBQW1CLHlEQUFJLG9CQUFvQixzRUFBUztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixvREFBRTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLElBQUksc0NBQUc7QUFDUCxHQUFHO0FBQ0gseUNBQXlDLDhFQUFpQixlQUFlLHNFQUF3QjtBQUNqRztBQUNBLFdBQVcsc0VBQXdCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0NBQUcseURBQXlEO0FBQ3RFO0FBQ0E7QUFDQSxZQUFZLHNDQUFHLDJDQUEyQztBQUMxRCxXQUFXOztBQUVYO0FBQ0E7QUFDQSxZQUFZLHNDQUFHO0FBQ2YsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBLElBQUksc0NBQUc7QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSwwQkFBMEIsc0VBQVM7QUFDbkMsc0JBQXNCLDhEQUFTO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBLE1BQU0sc0NBQUc7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQSw0Q0FBNEMsOEVBQWlCLGVBQWUsc0VBQXdCO0FBQ3BHLGFBQWEsc0VBQXdCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw4RUFBaUIsZUFBZSxzRUFBd0I7QUFDeEU7QUFDQSxhQUFhLHNFQUF3QjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix3RUFBVztBQUM5QjtBQUNBO0FBQ0EsWUFBWSxzQ0FBRztBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksc0NBQUc7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsSUFBSSxzQ0FBRztBQUNQO0FBQ0EsTUFBTSxzQ0FBRztBQUNUO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLGlFQUF1QjtBQUNuQztBQUNBO0FBQ0E7QUFDQSxhQUFhLGtEQUFXOztBQUV4QjtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxpQkFBaUIsdURBQVk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDLDRDQUE0QztBQUM1QywrREFBK0Q7QUFDL0Qsc0ZBQXNGOztBQUV0RjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC13YWxsZXQvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9tZXRob2RzL3NlcnZlci5qcz8xM2Y0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yXCI7XG5pbXBvcnQgX3JlZ2VuZXJhdG9yUnVudGltZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjtcbi8qKlxuICogQSBsb2NhbFN0b3JhZ2Utb25seSBtZXRob2Qgd2hpY2ggdXNlcyBsb2NhbHN0b3JhZ2UgYW5kIGl0cyAnc3RvcmFnZSctZXZlbnRcbiAqIFRoaXMgZG9lcyBub3Qgd29yayBpbnNpZGUgb2Ygd2Vid29ya2VycyBiZWNhdXNlIHRoZXkgaGF2ZSBubyBhY2Nlc3MgdG8gbG9jYXN0b3JhZ2VcbiAqIFRoaXMgaXMgYmFzaWNhbGx5IGltcGxlbWVudGVkIHRvIHN1cHBvcnQgSUU5IG9yIHlvdXIgZ3JhbmRtb3RoZXJzIHRvYXN0ZXIuXG4gKiBAbGluayBodHRwczovL2Nhbml1c2UuY29tLyNmZWF0PW5hbWV2YWx1ZS1zdG9yYWdlXG4gKiBAbGluayBodHRwczovL2Nhbml1c2UuY29tLyNmZWF0PWluZGV4ZWRkYlxuICovXG5cbmltcG9ydCB7IE9ibGl2aW91c1NldCB9IGZyb20gJ29ibGl2aW91cy1zZXQnO1xuaW1wb3J0IHsgaW8gfSBmcm9tICdzb2NrZXQuaW8tY2xpZW50JztcbmltcG9ydCB7IGdldFB1YmxpYywgc2lnbiB9IGZyb20gJ0B0b3J1c2xhYnMvZWNjcnlwdG8nO1xuaW1wb3J0IHsgZW5jcnlwdERhdGEsIGRlY3J5cHREYXRhLCBrZWNjYWsyNTYgfSBmcm9tICdAdG9ydXNsYWJzL21ldGFkYXRhLWhlbHBlcnMnO1xuaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBmaWxsT3B0aW9uc1dpdGhEZWZhdWx0cyB9IGZyb20gJy4uL29wdGlvbnMnO1xuaW1wb3J0IHsgc2xlZXAsIHJhbmRvbVRva2VuLCBtaWNyb1NlY29uZHMgYXMgbWljcm8gfSBmcm9tICcuLi91dGlsJztcbmV4cG9ydCB2YXIgbWljcm9TZWNvbmRzID0gbWljcm87XG52YXIgS0VZX1BSRUZJWCA9ICdwdWJrZXkuYnJvYWRjYXN0Q2hhbm5lbC0nO1xuZXhwb3J0IHZhciB0eXBlID0gJ3NlcnZlcic7XG52YXIgU09DS0VUX0NPTk5fSU5TVEFOQ0UgPSBudWxsO1xuLy8gdXNlZCB0byBkZWNpZGUgdG8gcmVjb25uZWN0IHNvY2tldCBlLmcuIHdoZW4gc29ja2V0IGNvbm5lY3Rpb24gaXMgZGlzY29ubmVjdGVkIHVuZXhwZWN0ZWRseVxudmFyIHJ1bm5pbmdDaGFubmVscyA9IG5ldyBTZXQoKTtcbmV4cG9ydCBmdW5jdGlvbiBzdG9yYWdlS2V5KGNoYW5uZWxOYW1lKSB7XG4gIHJldHVybiBLRVlfUFJFRklYICsgY2hhbm5lbE5hbWU7XG59XG5cbi8qKlxuICogd3JpdGVzIHRoZSBuZXcgbWVzc2FnZSB0byB0aGUgc3RvcmFnZVxuICogYW5kIGZpcmVzIHRoZSBzdG9yYWdlLWV2ZW50IHNvIG90aGVyIHJlYWRlcnMgY2FuIGZpbmQgaXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvc3RNZXNzYWdlKGNoYW5uZWxTdGF0ZSwgbWVzc2FnZUpzb24pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXMsIHJlaikge1xuICAgIHNsZWVwKCkudGhlbiggLyojX19QVVJFX18qL19hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XG4gICAgICB2YXIga2V5LCBjaGFubmVsRW5jUHJpdktleSwgZW5jRGF0YSwgYm9keTtcbiAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBrZXkgPSBzdG9yYWdlS2V5KGNoYW5uZWxTdGF0ZS5jaGFubmVsTmFtZSk7XG4gICAgICAgICAgICBjaGFubmVsRW5jUHJpdktleSA9IGtlY2NhazI1NihCdWZmZXIuZnJvbShrZXksICd1dGY4JykpO1xuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7XG4gICAgICAgICAgICByZXR1cm4gZW5jcnlwdERhdGEoY2hhbm5lbEVuY1ByaXZLZXkudG9TdHJpbmcoJ2hleCcpLCB7XG4gICAgICAgICAgICAgIHRva2VuOiByYW5kb21Ub2tlbigpLFxuICAgICAgICAgICAgICB0aW1lOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcbiAgICAgICAgICAgICAgZGF0YTogbWVzc2FnZUpzb24sXG4gICAgICAgICAgICAgIHV1aWQ6IGNoYW5uZWxTdGF0ZS51dWlkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICBlbmNEYXRhID0gX2NvbnRleHQuc2VudDtcbiAgICAgICAgICAgIF9jb250ZXh0LnQwID0gZ2V0UHVibGljKGNoYW5uZWxFbmNQcml2S2V5KS50b1N0cmluZygnaGV4Jyk7XG4gICAgICAgICAgICBfY29udGV4dC50MSA9IGVuY0RhdGE7XG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTtcbiAgICAgICAgICAgIHJldHVybiBzaWduKGNoYW5uZWxFbmNQcml2S2V5LCBrZWNjYWsyNTYoQnVmZmVyLmZyb20oZW5jRGF0YSwgJ3V0ZjgnKSkpO1xuICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIF9jb250ZXh0LnQyID0gX2NvbnRleHQuc2VudC50b1N0cmluZygnaGV4Jyk7XG4gICAgICAgICAgICBib2R5ID0ge1xuICAgICAgICAgICAgICBzYW1lT3JpZ2luQ2hlY2s6IHRydWUsXG4gICAgICAgICAgICAgIHNhbWVJcENoZWNrOiB0cnVlLFxuICAgICAgICAgICAgICBrZXk6IF9jb250ZXh0LnQwLFxuICAgICAgICAgICAgICBkYXRhOiBfY29udGV4dC50MSxcbiAgICAgICAgICAgICAgc2lnbmF0dXJlOiBfY29udGV4dC50MlxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChjaGFubmVsU3RhdGUudGltZW91dCkgYm9keS50aW1lb3V0ID0gY2hhbm5lbFN0YXRlLnRpbWVvdXQ7XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGZldGNoKGNoYW5uZWxTdGF0ZS5zZXJ2ZXJVcmwgKyAnL2NoYW5uZWwvc2V0Jywge1xuICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXG4gICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLnRoZW4ocmVzKVtcImNhdGNoXCJdKHJlaikpO1xuICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfSwgX2NhbGxlZSk7XG4gICAgfSkpKTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U29ja2V0SW5zdGFuY2Uoc2VydmVyVXJsKSB7XG4gIGlmIChTT0NLRVRfQ09OTl9JTlNUQU5DRSkge1xuICAgIHJldHVybiBTT0NLRVRfQ09OTl9JTlNUQU5DRTtcbiAgfVxuICB2YXIgU09DS0VUX0NPTk4gPSBpbyhzZXJ2ZXJVcmwsIHtcbiAgICB0cmFuc3BvcnRzOiBbJ3dlYnNvY2tldCcsICdwb2xsaW5nJ10sXG4gICAgLy8gdXNlIFdlYlNvY2tldCBmaXJzdCwgaWYgYXZhaWxhYmxlXG4gICAgd2l0aENyZWRlbnRpYWxzOiB0cnVlLFxuICAgIHJlY29ubmVjdGlvbkRlbGF5TWF4OiAxMDAwMCxcbiAgICByZWNvbm5lY3Rpb25BdHRlbXB0czogMTBcbiAgfSk7XG4gIFNPQ0tFVF9DT05OLm9uKCdjb25uZWN0X2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgIC8vIHJldmVydCB0byBjbGFzc2ljIHVwZ3JhZGVcbiAgICBTT0NLRVRfQ09OTi5pby5vcHRzLnRyYW5zcG9ydHMgPSBbJ3BvbGxpbmcnLCAnd2Vic29ja2V0J107XG4gICAgbG9nLmVycm9yKCdjb25uZWN0IGVycm9yJywgZXJyKTtcbiAgfSk7XG4gIFNPQ0tFVF9DT05OLm9uKCdjb25uZWN0JywgLyojX19QVVJFX18qL19hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkge1xuICAgIHZhciBlbmdpbmU7XG4gICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7XG4gICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICBlbmdpbmUgPSBTT0NLRVRfQ09OTi5pby5lbmdpbmU7XG4gICAgICAgICAgbG9nLmRlYnVnKCdpbml0aWFsbHkgY29ubmVjdGVkIHRvJywgZW5naW5lLnRyYW5zcG9ydC5uYW1lKTsgLy8gaW4gbW9zdCBjYXNlcywgcHJpbnRzIFwicG9sbGluZ1wiXG4gICAgICAgICAgZW5naW5lLm9uY2UoJ3VwZ3JhZGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBjYWxsZWQgd2hlbiB0aGUgdHJhbnNwb3J0IGlzIHVwZ3JhZGVkIChpLmUuIGZyb20gSFRUUCBsb25nLXBvbGxpbmcgdG8gV2ViU29ja2V0KVxuICAgICAgICAgICAgbG9nLmRlYnVnKCd1cGdyYWRlZCcsIGVuZ2luZS50cmFuc3BvcnQubmFtZSk7IC8vIGluIG1vc3QgY2FzZXMsIHByaW50cyBcIndlYnNvY2tldFwiXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBlbmdpbmUub25jZSgnY2xvc2UnLCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgICAvLyBjYWxsZWQgd2hlbiB0aGUgdW5kZXJseWluZyBjb25uZWN0aW9uIGlzIGNsb3NlZFxuICAgICAgICAgICAgbG9nLmRlYnVnKCdjb25uZWN0aW9uIGNsb3NlZCcsIHJlYXNvbik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpO1xuICAgICAgfVxuICAgIH0sIF9jYWxsZWUyKTtcbiAgfSkpKTtcbiAgU09DS0VUX0NPTk4ub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgIGxvZy5lcnJvcignc29ja2V0IGVycm9yZWQnLCBlcnIpO1xuICAgIFNPQ0tFVF9DT05OLmRpc2Nvbm5lY3QoKTtcbiAgfSk7XG4gIFNPQ0tFVF9DT05OX0lOU1RBTkNFID0gU09DS0VUX0NPTk47XG4gIHJldHVybiBTT0NLRVRfQ09OTjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFNvY2tldENvbm5lY3Rpb24oc2VydmVyVXJsLCBjaGFubmVsU3RhdGUsIGZuKSB7XG4gIHZhciBzb2NrZXRDb25uID0gZ2V0U29ja2V0SW5zdGFuY2Uoc2VydmVyVXJsKTtcbiAgdmFyIGtleSA9IHN0b3JhZ2VLZXkoY2hhbm5lbFN0YXRlLmNoYW5uZWxOYW1lKTtcbiAgdmFyIGNoYW5uZWxFbmNQcml2S2V5ID0ga2VjY2FrMjU2KEJ1ZmZlci5mcm9tKGtleSwgJ3V0ZjgnKSk7XG4gIHZhciBjaGFubmVsUHViS2V5ID0gZ2V0UHVibGljKGNoYW5uZWxFbmNQcml2S2V5KS50b1N0cmluZygnaGV4Jyk7XG4gIGlmIChzb2NrZXRDb25uLmNvbm5lY3RlZCkge1xuICAgIHNvY2tldENvbm4uZW1pdCgnY2hlY2tfYXV0aF9zdGF0dXMnLCBjaGFubmVsUHViS2V5LCB7XG4gICAgICBzYW1lT3JpZ2luQ2hlY2s6IHRydWUsXG4gICAgICBzYW1lSXBDaGVjazogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHNvY2tldENvbm4ub25jZSgnY29ubmVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxvZy5kZWJ1ZygnY29ubmVjdGVkIHdpdGggc29ja2V0Jyk7XG4gICAgICBzb2NrZXRDb25uLmVtaXQoJ2NoZWNrX2F1dGhfc3RhdHVzJywgY2hhbm5lbFB1YktleSwge1xuICAgICAgICBzYW1lT3JpZ2luQ2hlY2s6IHRydWUsXG4gICAgICAgIHNhbWVJcENoZWNrOiB0cnVlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICB2YXIgcmVjb25uZWN0ID0gZnVuY3Rpb24gcmVjb25uZWN0KCkge1xuICAgIHNvY2tldENvbm4ub25jZSgnY29ubmVjdCcsIC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHtcbiAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0Mykge1xuICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgaWYgKHJ1bm5pbmdDaGFubmVscy5oYXMoY2hhbm5lbFN0YXRlLmNoYW5uZWxOYW1lKSkge1xuICAgICAgICAgICAgICBzb2NrZXRDb25uLmVtaXQoJ2NoZWNrX2F1dGhfc3RhdHVzJywgY2hhbm5lbFB1YktleSwge1xuICAgICAgICAgICAgICAgIHNhbWVPcmlnaW5DaGVjazogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzYW1lSXBDaGVjazogdHJ1ZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIF9jYWxsZWUzKTtcbiAgICB9KSkpO1xuICB9O1xuICB2YXIgdmlzaWJpbGl0eUxpc3RlbmVyID0gZnVuY3Rpb24gdmlzaWJpbGl0eUxpc3RlbmVyKCkge1xuICAgIC8vIGlmIGNoYW5uZWwgaXMgY2xvc2VkLCB0aGVuIHJlbW92ZSB0aGUgbGlzdGVuZXIuXG4gICAgaWYgKCFzb2NrZXRDb25uIHx8ICFydW5uaW5nQ2hhbm5lbHMuaGFzKGNoYW5uZWxTdGF0ZS5jaGFubmVsTmFtZSkpIHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCB2aXNpYmlsaXR5TGlzdGVuZXIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBpZiBub3QgY29ubmVjdGVkLCB0aGVuIHdhaXQgZm9yIGNvbm5lY3Rpb24gYW5kIHBpbmcgc2VydmVyIGZvciBsYXRlc3QgbXNnLlxuICAgIGlmICghc29ja2V0Q29ubi5jb25uZWN0ZWQgJiYgZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAndmlzaWJsZScpIHtcbiAgICAgIHJlY29ubmVjdCgpO1xuICAgIH1cbiAgfTtcbiAgdmFyIGxpc3RlbmVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICB2YXIgX3JlZjQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNChldikge1xuICAgICAgdmFyIGRlY0RhdGE7XG4gICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHtcbiAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIF9jb250ZXh0NC5wcmV2ID0gMDtcbiAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMztcbiAgICAgICAgICAgIHJldHVybiBkZWNyeXB0RGF0YShjaGFubmVsRW5jUHJpdktleS50b1N0cmluZygnaGV4JyksIGV2KTtcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBkZWNEYXRhID0gX2NvbnRleHQ0LnNlbnQ7XG4gICAgICAgICAgICBsb2cuaW5mbyhkZWNEYXRhKTtcbiAgICAgICAgICAgIGZuKGRlY0RhdGEpO1xuICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIF9jb250ZXh0NC5wcmV2ID0gODtcbiAgICAgICAgICAgIF9jb250ZXh0NC50MCA9IF9jb250ZXh0NFtcImNhdGNoXCJdKDApO1xuICAgICAgICAgICAgbG9nLmVycm9yKF9jb250ZXh0NC50MCk7XG4gICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfSwgX2NhbGxlZTQsIG51bGwsIFtbMCwgOF1dKTtcbiAgICB9KSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGxpc3RlbmVyKF94KSB7XG4gICAgICByZXR1cm4gX3JlZjQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9KCk7XG4gIHNvY2tldENvbm4ub24oJ2Rpc2Nvbm5lY3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgbG9nLmRlYnVnKCdzb2NrZXQgZGlzY29ubmVjdGVkJyk7XG4gICAgaWYgKHJ1bm5pbmdDaGFubmVscy5oYXMoY2hhbm5lbFN0YXRlLmNoYW5uZWxOYW1lKSkge1xuICAgICAgbG9nLmVycm9yKCdzb2NrZXQgZGlzY29ubmVjdGVkIHVuZXhwZWN0ZWRseSwgcmVjb25uZWN0aW5nIHNvY2tldCcpO1xuICAgICAgcmVjb25uZWN0KCk7XG4gICAgfVxuICB9KTtcbiAgc29ja2V0Q29ubi5vbihjaGFubmVsUHViS2V5ICsgXCJfc3VjY2Vzc1wiLCBsaXN0ZW5lcik7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgdmlzaWJpbGl0eUxpc3RlbmVyKTtcbiAgcmV0dXJuIHNvY2tldENvbm47XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlU3RvcmFnZUV2ZW50TGlzdGVuZXIoKSB7XG4gIGlmIChTT0NLRVRfQ09OTl9JTlNUQU5DRSkge1xuICAgIFNPQ0tFVF9DT05OX0lOU1RBTkNFLmRpc2Nvbm5lY3QoKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZShjaGFubmVsTmFtZSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gZmlsbE9wdGlvbnNXaXRoRGVmYXVsdHMob3B0aW9ucyk7XG4gIGlmICghY2FuQmVVc2VkKG9wdGlvbnMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCcm9hZGNhc3RDaGFubmVsOiBzZXJ2ZXIgY2Fubm90IGJlIHVzZWQnKTtcbiAgfVxuICB2YXIgdXVpZCA9IHJhbmRvbVRva2VuKCk7XG5cbiAgLyoqXG4gICAqIGVNSXNcbiAgICogY29udGFpbnMgYWxsIG1lc3NhZ2VzIHRoYXQgaGF2ZSBiZWVuIGVtaXR0ZWQgYmVmb3JlXG4gICAqIEB0eXBlIHtPYmxpdmlvdXNTZXR9XG4gICAqL1xuICB2YXIgZU1JcyA9IG5ldyBPYmxpdmlvdXNTZXQob3B0aW9ucy5zZXJ2ZXIucmVtb3ZlVGltZW91dCk7XG4gIHZhciBzdGF0ZSA9IHtcbiAgICBjaGFubmVsTmFtZTogY2hhbm5lbE5hbWUsXG4gICAgdXVpZDogdXVpZCxcbiAgICBlTUlzOiBlTUlzLFxuICAgIC8vIGVtaXR0ZWRNZXNzYWdlc0lkc1xuICAgIHNlcnZlclVybDogb3B0aW9ucy5zZXJ2ZXIudXJsXG4gIH07XG4gIGlmIChvcHRpb25zLnNlcnZlci50aW1lb3V0KSBzdGF0ZS50aW1lb3V0ID0gb3B0aW9ucy5zZXJ2ZXIudGltZW91dDtcbiAgc2V0dXBTb2NrZXRDb25uZWN0aW9uKG9wdGlvbnMuc2VydmVyLnVybCwgc3RhdGUsIGZ1bmN0aW9uIChtc2dPYmopIHtcbiAgICBpZiAoIXN0YXRlLm1lc3NhZ2VzQ2FsbGJhY2spIHJldHVybjsgLy8gbm8gbGlzdGVuZXJcbiAgICBpZiAobXNnT2JqLnV1aWQgPT09IHN0YXRlLnV1aWQpIHJldHVybjsgLy8gb3duIG1lc3NhZ2VcbiAgICBpZiAoIW1zZ09iai50b2tlbiB8fCBzdGF0ZS5lTUlzLmhhcyhtc2dPYmoudG9rZW4pKSByZXR1cm47IC8vIGFscmVhZHkgZW1pdHRlZFxuICAgIC8vIGlmIChtc2dPYmouZGF0YS50aW1lICYmIG1zZ09iai5kYXRhLnRpbWUgPCBzdGF0ZS5tZXNzYWdlc0NhbGxiYWNrVGltZSkgcmV0dXJuOyAvLyB0b28gb2xkXG5cbiAgICBzdGF0ZS5lTUlzLmFkZChtc2dPYmoudG9rZW4pO1xuICAgIHN0YXRlLm1lc3NhZ2VzQ2FsbGJhY2sobXNnT2JqLmRhdGEpO1xuICB9KTtcbiAgcnVubmluZ0NoYW5uZWxzLmFkZChjaGFubmVsTmFtZSk7XG4gIHJldHVybiBzdGF0ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjbG9zZShjaGFubmVsU3RhdGUpIHtcbiAgcnVubmluZ0NoYW5uZWxzW1wiZGVsZXRlXCJdKGNoYW5uZWxTdGF0ZS5jaGFubmVsTmFtZSk7XG4gIC8vIGdpdmUgMiBzZWMgZm9yIGFsbCBtc2dzIHdoaWNoIGFyZSBpbiB0cmFuc2l0IHRvIGJlIGNvbnN1bWVkXG4gIC8vIGJ5IHJlY2VpdmVyLlxuICAvLyB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gIC8vICAgICByZW1vdmVTdG9yYWdlRXZlbnRMaXN0ZW5lcihjaGFubmVsU3RhdGUpO1xuICAvLyAgICAgU09DS0VUX0NPTk5fSU5TVEFOQ0UgPSBudWxsO1xuICAvLyB9LCAxMDAwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uTWVzc2FnZShjaGFubmVsU3RhdGUsIGZuLCB0aW1lKSB7XG4gIGNoYW5uZWxTdGF0ZS5tZXNzYWdlc0NhbGxiYWNrVGltZSA9IHRpbWU7XG4gIGNoYW5uZWxTdGF0ZS5tZXNzYWdlc0NhbGxiYWNrID0gZm47XG59XG5leHBvcnQgZnVuY3Rpb24gY2FuQmVVc2VkKCkge1xuICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhdmVyYWdlUmVzcG9uc2VUaW1lKCkge1xuICB2YXIgZGVmYXVsdFRpbWUgPSA1MDA7XG4gIC8vIFRPRE86IE1heWJlIGluY3JlYXNlIGl0IGJhc2VkIG9uIG9wZXJhdGlvblxuICByZXR1cm4gZGVmYXVsdFRpbWU7XG59XG5leHBvcnQgZGVmYXVsdCB7XG4gIGNyZWF0ZTogY3JlYXRlLFxuICBjbG9zZTogY2xvc2UsXG4gIG9uTWVzc2FnZTogb25NZXNzYWdlLFxuICBwb3N0TWVzc2FnZTogcG9zdE1lc3NhZ2UsXG4gIGNhbkJlVXNlZDogY2FuQmVVc2VkLFxuICB0eXBlOiB0eXBlLFxuICBhdmVyYWdlUmVzcG9uc2VUaW1lOiBhdmVyYWdlUmVzcG9uc2VUaW1lLFxuICBtaWNyb1NlY29uZHM6IG1pY3JvU2Vjb25kc1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/simulate.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/simulate.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   averageResponseTime: () => (/* binding */ averageResponseTime),\n/* harmony export */   canBeUsed: () => (/* binding */ canBeUsed),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   microSeconds: () => (/* binding */ microSeconds),\n/* harmony export */   onMessage: () => (/* binding */ onMessage),\n/* harmony export */   postMessage: () => (/* binding */ postMessage),\n/* harmony export */   type: () => (/* binding */ type)\n/* harmony export */ });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\");\n\nvar microSeconds = _util__WEBPACK_IMPORTED_MODULE_0__.microSeconds;\nvar type = 'simulate';\nvar SIMULATE_CHANNELS = new Set();\nfunction create(channelName) {\n  var state = {\n    name: channelName,\n    messagesCallback: null\n  };\n  SIMULATE_CHANNELS.add(state);\n  return state;\n}\nfunction close(channelState) {\n  SIMULATE_CHANNELS[\"delete\"](channelState);\n}\nfunction postMessage(channelState, messageJson) {\n  return new Promise(function (res) {\n    return setTimeout(function () {\n      var channelArray = Array.from(SIMULATE_CHANNELS);\n      channelArray.filter(function (channel) {\n        return channel.name === channelState.name;\n      }).filter(function (channel) {\n        return channel !== channelState;\n      }).filter(function (channel) {\n        return !!channel.messagesCallback;\n      }).forEach(function (channel) {\n        return channel.messagesCallback(messageJson);\n      });\n      res();\n    }, 5);\n  });\n}\nfunction onMessage(channelState, fn) {\n  channelState.messagesCallback = fn;\n}\nfunction canBeUsed() {\n  return true;\n}\nfunction averageResponseTime() {\n  return 5;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9tZXRob2RzL3NpbXVsYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBZ0Q7QUFDekMsbUJBQW1CLCtDQUFLO0FBQ3hCO0FBQ1A7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLGlFQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC13YWxsZXQvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9tZXRob2RzL3NpbXVsYXRlLmpzPzMxZmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWljcm9TZWNvbmRzIGFzIG1pY3JvIH0gZnJvbSAnLi4vdXRpbCc7XG5leHBvcnQgdmFyIG1pY3JvU2Vjb25kcyA9IG1pY3JvO1xuZXhwb3J0IHZhciB0eXBlID0gJ3NpbXVsYXRlJztcbnZhciBTSU1VTEFURV9DSEFOTkVMUyA9IG5ldyBTZXQoKTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoY2hhbm5lbE5hbWUpIHtcbiAgdmFyIHN0YXRlID0ge1xuICAgIG5hbWU6IGNoYW5uZWxOYW1lLFxuICAgIG1lc3NhZ2VzQ2FsbGJhY2s6IG51bGxcbiAgfTtcbiAgU0lNVUxBVEVfQ0hBTk5FTFMuYWRkKHN0YXRlKTtcbiAgcmV0dXJuIHN0YXRlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNsb3NlKGNoYW5uZWxTdGF0ZSkge1xuICBTSU1VTEFURV9DSEFOTkVMU1tcImRlbGV0ZVwiXShjaGFubmVsU3RhdGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvc3RNZXNzYWdlKGNoYW5uZWxTdGF0ZSwgbWVzc2FnZUpzb24pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXMpIHtcbiAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY2hhbm5lbEFycmF5ID0gQXJyYXkuZnJvbShTSU1VTEFURV9DSEFOTkVMUyk7XG4gICAgICBjaGFubmVsQXJyYXkuZmlsdGVyKGZ1bmN0aW9uIChjaGFubmVsKSB7XG4gICAgICAgIHJldHVybiBjaGFubmVsLm5hbWUgPT09IGNoYW5uZWxTdGF0ZS5uYW1lO1xuICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChjaGFubmVsKSB7XG4gICAgICAgIHJldHVybiBjaGFubmVsICE9PSBjaGFubmVsU3RhdGU7XG4gICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKGNoYW5uZWwpIHtcbiAgICAgICAgcmV0dXJuICEhY2hhbm5lbC5tZXNzYWdlc0NhbGxiYWNrO1xuICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoY2hhbm5lbCkge1xuICAgICAgICByZXR1cm4gY2hhbm5lbC5tZXNzYWdlc0NhbGxiYWNrKG1lc3NhZ2VKc29uKTtcbiAgICAgIH0pO1xuICAgICAgcmVzKCk7XG4gICAgfSwgNSk7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG9uTWVzc2FnZShjaGFubmVsU3RhdGUsIGZuKSB7XG4gIGNoYW5uZWxTdGF0ZS5tZXNzYWdlc0NhbGxiYWNrID0gZm47XG59XG5leHBvcnQgZnVuY3Rpb24gY2FuQmVVc2VkKCkge1xuICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhdmVyYWdlUmVzcG9uc2VUaW1lKCkge1xuICByZXR1cm4gNTtcbn1cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY3JlYXRlOiBjcmVhdGUsXG4gIGNsb3NlOiBjbG9zZSxcbiAgb25NZXNzYWdlOiBvbk1lc3NhZ2UsXG4gIHBvc3RNZXNzYWdlOiBwb3N0TWVzc2FnZSxcbiAgY2FuQmVVc2VkOiBjYW5CZVVzZWQsXG4gIHR5cGU6IHR5cGUsXG4gIGF2ZXJhZ2VSZXNwb25zZVRpbWU6IGF2ZXJhZ2VSZXNwb25zZVRpbWUsXG4gIG1pY3JvU2Vjb25kczogbWljcm9TZWNvbmRzXG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/simulate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/options.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/options.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fillOptionsWithDefaults: () => (/* binding */ fillOptionsWithDefaults)\n/* harmony export */ });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\");\n\nfunction fillOptionsWithDefaults() {\n  var originalOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var options = JSON.parse(JSON.stringify(originalOptions));\n  if (typeof options.support3PC === 'undefined') options.support3PC = (0,_util__WEBPACK_IMPORTED_MODULE_0__.are3PCSupported)();\n\n  // main\n  if (typeof options.webWorkerSupport === 'undefined') options.webWorkerSupport = true;\n\n  // indexed-db\n  if (!options.idb) options.idb = {};\n  //  after this time the messages get deleted\n  if (!options.idb.ttl) options.idb.ttl = 1000 * 45;\n  if (!options.idb.fallbackInterval) options.idb.fallbackInterval = 150;\n  //  handles abrupt db onclose events.\n  if (originalOptions.idb && typeof originalOptions.idb.onclose === 'function') options.idb.onclose = originalOptions.idb.onclose;\n\n  // localstorage\n  if (!options.localstorage) options.localstorage = {};\n  if (!options.localstorage.removeTimeout) options.localstorage.removeTimeout = 1000 * 60;\n\n  // server\n  if (!options.server) options.server = {};\n  if (!options.server.url) options.server.url = 'https://broadcast-server.tor.us';\n  if (!options.server.removeTimeout) options.server.removeTimeout = 1000 * 60 * 5; // 5 minutes\n\n  // custom methods\n  if (originalOptions.methods) options.methods = originalOptions.methods;\n  return options;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9vcHRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQ2xDO0FBQ1A7QUFDQTtBQUNBLHNFQUFzRSxzREFBZTs7QUFFckY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUZBQW1GOztBQUVuRjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXdhbGxldC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jyb2FkY2FzdC1jaGFubmVsL2Rpc3QvZXNub2RlL29wdGlvbnMuanM/MzEyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcmUzUENTdXBwb3J0ZWQgfSBmcm9tICcuL3V0aWwnO1xuZXhwb3J0IGZ1bmN0aW9uIGZpbGxPcHRpb25zV2l0aERlZmF1bHRzKCkge1xuICB2YXIgb3JpZ2luYWxPcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIG9wdGlvbnMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9yaWdpbmFsT3B0aW9ucykpO1xuICBpZiAodHlwZW9mIG9wdGlvbnMuc3VwcG9ydDNQQyA9PT0gJ3VuZGVmaW5lZCcpIG9wdGlvbnMuc3VwcG9ydDNQQyA9IGFyZTNQQ1N1cHBvcnRlZCgpO1xuXG4gIC8vIG1haW5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLndlYldvcmtlclN1cHBvcnQgPT09ICd1bmRlZmluZWQnKSBvcHRpb25zLndlYldvcmtlclN1cHBvcnQgPSB0cnVlO1xuXG4gIC8vIGluZGV4ZWQtZGJcbiAgaWYgKCFvcHRpb25zLmlkYikgb3B0aW9ucy5pZGIgPSB7fTtcbiAgLy8gIGFmdGVyIHRoaXMgdGltZSB0aGUgbWVzc2FnZXMgZ2V0IGRlbGV0ZWRcbiAgaWYgKCFvcHRpb25zLmlkYi50dGwpIG9wdGlvbnMuaWRiLnR0bCA9IDEwMDAgKiA0NTtcbiAgaWYgKCFvcHRpb25zLmlkYi5mYWxsYmFja0ludGVydmFsKSBvcHRpb25zLmlkYi5mYWxsYmFja0ludGVydmFsID0gMTUwO1xuICAvLyAgaGFuZGxlcyBhYnJ1cHQgZGIgb25jbG9zZSBldmVudHMuXG4gIGlmIChvcmlnaW5hbE9wdGlvbnMuaWRiICYmIHR5cGVvZiBvcmlnaW5hbE9wdGlvbnMuaWRiLm9uY2xvc2UgPT09ICdmdW5jdGlvbicpIG9wdGlvbnMuaWRiLm9uY2xvc2UgPSBvcmlnaW5hbE9wdGlvbnMuaWRiLm9uY2xvc2U7XG5cbiAgLy8gbG9jYWxzdG9yYWdlXG4gIGlmICghb3B0aW9ucy5sb2NhbHN0b3JhZ2UpIG9wdGlvbnMubG9jYWxzdG9yYWdlID0ge307XG4gIGlmICghb3B0aW9ucy5sb2NhbHN0b3JhZ2UucmVtb3ZlVGltZW91dCkgb3B0aW9ucy5sb2NhbHN0b3JhZ2UucmVtb3ZlVGltZW91dCA9IDEwMDAgKiA2MDtcblxuICAvLyBzZXJ2ZXJcbiAgaWYgKCFvcHRpb25zLnNlcnZlcikgb3B0aW9ucy5zZXJ2ZXIgPSB7fTtcbiAgaWYgKCFvcHRpb25zLnNlcnZlci51cmwpIG9wdGlvbnMuc2VydmVyLnVybCA9ICdodHRwczovL2Jyb2FkY2FzdC1zZXJ2ZXIudG9yLnVzJztcbiAgaWYgKCFvcHRpb25zLnNlcnZlci5yZW1vdmVUaW1lb3V0KSBvcHRpb25zLnNlcnZlci5yZW1vdmVUaW1lb3V0ID0gMTAwMCAqIDYwICogNTsgLy8gNSBtaW51dGVzXG5cbiAgLy8gY3VzdG9tIG1ldGhvZHNcbiAgaWYgKG9yaWdpbmFsT3B0aW9ucy5tZXRob2RzKSBvcHRpb25zLm1ldGhvZHMgPSBvcmlnaW5hbE9wdGlvbnMubWV0aG9kcztcbiAgcmV0dXJuIG9wdGlvbnM7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/options.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PROMISE_RESOLVED_FALSE: () => (/* binding */ PROMISE_RESOLVED_FALSE),\n/* harmony export */   PROMISE_RESOLVED_TRUE: () => (/* binding */ PROMISE_RESOLVED_TRUE),\n/* harmony export */   PROMISE_RESOLVED_VOID: () => (/* binding */ PROMISE_RESOLVED_VOID),\n/* harmony export */   are3PCSupported: () => (/* binding */ are3PCSupported),\n/* harmony export */   isPromise: () => (/* binding */ isPromise),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   microSeconds: () => (/* binding */ microSeconds),\n/* harmony export */   randomInt: () => (/* binding */ randomInt),\n/* harmony export */   randomToken: () => (/* binding */ randomToken),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel),\n/* harmony export */   sleep: () => (/* binding */ sleep)\n/* harmony export */ });\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bowser */ \"(ssr)/./node_modules/bowser/src/bowser.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n/**\n * returns true if the given object is a promise\n */\nfunction isPromise(obj) {\n  if (obj && typeof obj.then === 'function') {\n    return true;\n  } else {\n    return false;\n  }\n}\nvar PROMISE_RESOLVED_FALSE = Promise.resolve(false);\nvar PROMISE_RESOLVED_TRUE = Promise.resolve(true);\nvar PROMISE_RESOLVED_VOID = Promise.resolve();\nfunction sleep(time, resolveWith) {\n  if (!time) time = 0;\n  return new Promise(function (res) {\n    return setTimeout(function () {\n      return res(resolveWith);\n    }, time);\n  });\n}\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n/**\n * https://stackoverflow.com/a/8084248\n */\nfunction randomToken() {\n  return Math.random().toString(36).substring(2);\n}\nvar lastMs = 0;\nvar additional = 0;\n\n/**\n * returns the current time in micro-seconds,\n * WARNING: This is a pseudo-function\n * Performance.now is not reliable in webworkers, so we just make sure to never return the same time.\n * This is enough in browsers, and this function will not be used in nodejs.\n * The main reason for this hack is to ensure that BroadcastChannel behaves equal to production when it is used in fast-running unit tests.\n */\nfunction microSeconds() {\n  var ms = new Date().getTime();\n  if (ms === lastMs) {\n    additional++;\n    return ms * 1000 + additional;\n  } else {\n    lastMs = ms;\n    additional = 0;\n    return ms * 1000;\n  }\n}\nfunction are3PCSupported() {\n  if (typeof navigator === 'undefined') return false;\n  var browserInfo = bowser__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(navigator.userAgent);\n  log.info(JSON.stringify(browserInfo), 'current browser info');\n  var thirdPartyCookieSupport = true;\n  // brave\n  if (navigator.brave) {\n    thirdPartyCookieSupport = false;\n  }\n  // All webkit & gecko engine instances use itp (intelligent tracking prevention -\n  // https://webkit.org/tracking-prevention/#intelligent-tracking-prevention-itp)\n  if (browserInfo.engine.name === bowser__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ENGINE_MAP.WebKit || browserInfo.engine.name === bowser__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ENGINE_MAP.Gecko) {\n    thirdPartyCookieSupport = false;\n  }\n  return thirdPartyCookieSupport;\n}\nvar log = loglevel__WEBPACK_IMPORTED_MODULE_1___default().getLogger('broadcast-channel');\nlog.setLevel('error');\nvar setLogLevel = function setLogLevel(level) {\n  log.setLevel(level);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS91dGlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTRCO0FBQ0k7O0FBRWhDO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDTztBQUNBO0FBQ0E7QUFDQTtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG9CQUFvQiw4Q0FBTTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLDhDQUFNLGtEQUFrRCw4Q0FBTTtBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNPLFVBQVUseURBQWtCO0FBQ25DO0FBQ087QUFDUDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0Ly4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvYnJvYWRjYXN0LWNoYW5uZWwvZGlzdC9lc25vZGUvdXRpbC5qcz83ZmJiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCb3dzZXIgZnJvbSAnYm93c2VyJztcbmltcG9ydCBsb2dsZXZlbCBmcm9tICdsb2dsZXZlbCc7XG5cbi8qKlxuICogcmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBvYmplY3QgaXMgYSBwcm9taXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb21pc2Uob2JqKSB7XG4gIGlmIChvYmogJiYgdHlwZW9mIG9iai50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5leHBvcnQgdmFyIFBST01JU0VfUkVTT0xWRURfRkFMU0UgPSBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuZXhwb3J0IHZhciBQUk9NSVNFX1JFU09MVkVEX1RSVUUgPSBQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG5leHBvcnQgdmFyIFBST01JU0VfUkVTT0xWRURfVk9JRCA9IFByb21pc2UucmVzb2x2ZSgpO1xuZXhwb3J0IGZ1bmN0aW9uIHNsZWVwKHRpbWUsIHJlc29sdmVXaXRoKSB7XG4gIGlmICghdGltZSkgdGltZSA9IDA7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzKSB7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlcyhyZXNvbHZlV2l0aCk7XG4gICAgfSwgdGltZSk7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbUludChtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpICsgbWluKTtcbn1cblxuLyoqXG4gKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvODA4NDI0OFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tVG9rZW4oKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMik7XG59XG52YXIgbGFzdE1zID0gMDtcbnZhciBhZGRpdGlvbmFsID0gMDtcblxuLyoqXG4gKiByZXR1cm5zIHRoZSBjdXJyZW50IHRpbWUgaW4gbWljcm8tc2Vjb25kcyxcbiAqIFdBUk5JTkc6IFRoaXMgaXMgYSBwc2V1ZG8tZnVuY3Rpb25cbiAqIFBlcmZvcm1hbmNlLm5vdyBpcyBub3QgcmVsaWFibGUgaW4gd2Vid29ya2Vycywgc28gd2UganVzdCBtYWtlIHN1cmUgdG8gbmV2ZXIgcmV0dXJuIHRoZSBzYW1lIHRpbWUuXG4gKiBUaGlzIGlzIGVub3VnaCBpbiBicm93c2VycywgYW5kIHRoaXMgZnVuY3Rpb24gd2lsbCBub3QgYmUgdXNlZCBpbiBub2RlanMuXG4gKiBUaGUgbWFpbiByZWFzb24gZm9yIHRoaXMgaGFjayBpcyB0byBlbnN1cmUgdGhhdCBCcm9hZGNhc3RDaGFubmVsIGJlaGF2ZXMgZXF1YWwgdG8gcHJvZHVjdGlvbiB3aGVuIGl0IGlzIHVzZWQgaW4gZmFzdC1ydW5uaW5nIHVuaXQgdGVzdHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtaWNyb1NlY29uZHMoKSB7XG4gIHZhciBtcyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICBpZiAobXMgPT09IGxhc3RNcykge1xuICAgIGFkZGl0aW9uYWwrKztcbiAgICByZXR1cm4gbXMgKiAxMDAwICsgYWRkaXRpb25hbDtcbiAgfSBlbHNlIHtcbiAgICBsYXN0TXMgPSBtcztcbiAgICBhZGRpdGlvbmFsID0gMDtcbiAgICByZXR1cm4gbXMgKiAxMDAwO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gYXJlM1BDU3VwcG9ydGVkKCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTtcbiAgdmFyIGJyb3dzZXJJbmZvID0gQm93c2VyLnBhcnNlKG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICBsb2cuaW5mbyhKU09OLnN0cmluZ2lmeShicm93c2VySW5mbyksICdjdXJyZW50IGJyb3dzZXIgaW5mbycpO1xuICB2YXIgdGhpcmRQYXJ0eUNvb2tpZVN1cHBvcnQgPSB0cnVlO1xuICAvLyBicmF2ZVxuICBpZiAobmF2aWdhdG9yLmJyYXZlKSB7XG4gICAgdGhpcmRQYXJ0eUNvb2tpZVN1cHBvcnQgPSBmYWxzZTtcbiAgfVxuICAvLyBBbGwgd2Via2l0ICYgZ2Vja28gZW5naW5lIGluc3RhbmNlcyB1c2UgaXRwIChpbnRlbGxpZ2VudCB0cmFja2luZyBwcmV2ZW50aW9uIC1cbiAgLy8gaHR0cHM6Ly93ZWJraXQub3JnL3RyYWNraW5nLXByZXZlbnRpb24vI2ludGVsbGlnZW50LXRyYWNraW5nLXByZXZlbnRpb24taXRwKVxuICBpZiAoYnJvd3NlckluZm8uZW5naW5lLm5hbWUgPT09IEJvd3Nlci5FTkdJTkVfTUFQLldlYktpdCB8fCBicm93c2VySW5mby5lbmdpbmUubmFtZSA9PT0gQm93c2VyLkVOR0lORV9NQVAuR2Vja28pIHtcbiAgICB0aGlyZFBhcnR5Q29va2llU3VwcG9ydCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiB0aGlyZFBhcnR5Q29va2llU3VwcG9ydDtcbn1cbmV4cG9ydCB2YXIgbG9nID0gbG9nbGV2ZWwuZ2V0TG9nZ2VyKCdicm9hZGNhc3QtY2hhbm5lbCcpO1xubG9nLnNldExldmVsKCdlcnJvcicpO1xuZXhwb3J0IHZhciBzZXRMb2dMZXZlbCA9IGZ1bmN0aW9uIHNldExvZ0xldmVsKGxldmVsKSB7XG4gIGxvZy5zZXRMZXZlbChsZXZlbCk7XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/constants/dist/constants.esm.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@toruslabs/constants/dist/constants.esm.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FND_SERVER: () => (/* binding */ FND_SERVER),\n/* harmony export */   LEGACY_NETWORKS_ROUTE_MAP: () => (/* binding */ LEGACY_NETWORKS_ROUTE_MAP),\n/* harmony export */   METADATA_MAP: () => (/* binding */ METADATA_MAP),\n/* harmony export */   MULTI_CLUSTER_NETWORKS: () => (/* binding */ MULTI_CLUSTER_NETWORKS),\n/* harmony export */   NETWORK_MAP: () => (/* binding */ NETWORK_MAP),\n/* harmony export */   PROXY_CONTRACT_ADDRESS: () => (/* binding */ PROXY_CONTRACT_ADDRESS),\n/* harmony export */   SESSION_SERVER: () => (/* binding */ SESSION_SERVER),\n/* harmony export */   SIGNER_MAP: () => (/* binding */ SIGNER_MAP),\n/* harmony export */   TORUS_LEGACY_NETWORK: () => (/* binding */ TORUS_LEGACY_NETWORK),\n/* harmony export */   TORUS_SAPPHIRE_NETWORK: () => (/* binding */ TORUS_SAPPHIRE_NETWORK),\n/* harmony export */   abi: () => (/* binding */ abi)\n/* harmony export */ });\nconst TORUS_LEGACY_NETWORK = {\n  MAINNET: \"mainnet\",\n  TESTNET: \"testnet\",\n  CYAN: \"cyan\",\n  AQUA: \"aqua\",\n  CELESTE: \"celeste\"\n};\nconst TORUS_SAPPHIRE_NETWORK = {\n  SAPPHIRE_DEVNET: \"sapphire_devnet\",\n  SAPPHIRE_MAINNET: \"sapphire_mainnet\"\n};\nconst PROXY_CONTRACT_ADDRESS = {\n  [TORUS_LEGACY_NETWORK.MAINNET]: \"0xf20336e16B5182637f09821c27BDe29b0AFcfe80\",\n  [TORUS_LEGACY_NETWORK.TESTNET]: \"0xd084604e5FA387FbC2Da8bAab07fDD6aDED4614A\",\n  [TORUS_LEGACY_NETWORK.CYAN]: \"0x9f072ba19b3370e512aa1b4bfcdaf97283168005\",\n  [TORUS_LEGACY_NETWORK.AQUA]: \"0x29Dea82a0509153b91040ee13cDBba0f03efb625\",\n  [TORUS_LEGACY_NETWORK.CELESTE]: \"0x6Bffb4e89453069E7487f0fa5c9f4a2D771cce6c\"\n};\nconst MULTI_CLUSTER_NETWORKS = [\n// TORUS_LEGACY_NETWORK.AQUA,\nTORUS_LEGACY_NETWORK.CELESTE\n// TORUS_LEGACY_NETWORK.CYAN,\n];\nconst LEGACY_NETWORKS_ROUTE_MAP = {\n  [TORUS_LEGACY_NETWORK.AQUA]: {\n    migrationCompleted: true,\n    networkIdentifier: \"aqua\",\n    networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET\n  },\n  [TORUS_LEGACY_NETWORK.CELESTE]: {\n    migrationCompleted: false,\n    networkIdentifier: \"celeste\",\n    networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET\n  },\n  [TORUS_LEGACY_NETWORK.CYAN]: {\n    migrationCompleted: true,\n    networkIdentifier: \"cyan\",\n    networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET\n  },\n  [TORUS_LEGACY_NETWORK.MAINNET]: {\n    migrationCompleted: true,\n    networkIdentifier: \"mainnet\",\n    networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET\n  },\n  [TORUS_LEGACY_NETWORK.TESTNET]: {\n    migrationCompleted: true,\n    networkIdentifier: \"teal\",\n    networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_DEVNET\n  }\n};\nconst NETWORK_MAP = {\n  [TORUS_LEGACY_NETWORK.MAINNET]: \"mainnet\",\n  [TORUS_LEGACY_NETWORK.TESTNET]: \"goerli\",\n  [TORUS_LEGACY_NETWORK.CYAN]: \"polygon-mainnet\",\n  [TORUS_LEGACY_NETWORK.AQUA]: \"polygon-mainnet\",\n  [TORUS_LEGACY_NETWORK.CELESTE]: \"polygon-mainnet\"\n};\nconst SIGNER_MAP = {\n  [TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET]: \"https://signer.web3auth.io\",\n  [TORUS_SAPPHIRE_NETWORK.SAPPHIRE_DEVNET]: \"https://signer.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.MAINNET]: \"https://signer.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.TESTNET]: \"https://signer.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.CYAN]: \"https://signer-polygon.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.AQUA]: \"https://signer-polygon.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.CELESTE]: \"https://signer-polygon.web3auth.io\"\n};\nconst METADATA_MAP = {\n  [TORUS_LEGACY_NETWORK.MAINNET]: \"https://metadata.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.TESTNET]: \"https://metadata.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.CYAN]: \"https://metadata.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.AQUA]: \"https://metadata.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.CELESTE]: \"https://metadata.web3auth.io\"\n};\nconst FND_SERVER = \"https://fnd.web3auth.io\";\nconst SESSION_SERVER = \"https://session.web3auth.io\";\n\nconst abi = [{\n  inputs: [{\n    internalType: \"string\",\n    name: \"_verifier\",\n    type: \"string\"\n  }, {\n    internalType: \"bytes32\",\n    name: \"hashedVerifierId\",\n    type: \"bytes32\"\n  }],\n  name: \"getNodeSet\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"currentEpoch\",\n    type: \"uint256\"\n  }, {\n    internalType: \"string[]\",\n    name: \"torusNodeEndpoints\",\n    type: \"string[]\"\n  }, {\n    internalType: \"uint256[]\",\n    name: \"torusNodePubX\",\n    type: \"uint256[]\"\n  }, {\n    internalType: \"uint256[]\",\n    name: \"torusNodePubY\",\n    type: \"uint256[]\"\n  }, {\n    internalType: \"uint256[]\",\n    name: \"torusIndexes\",\n    type: \"uint256[]\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9jb25zdGFudHMvZGlzdC9jb25zdGFudHMuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLENBQUM7O0FBRTBNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0Ly4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvY29uc3RhbnRzL2Rpc3QvY29uc3RhbnRzLmVzbS5qcz8yYmMwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFRPUlVTX0xFR0FDWV9ORVRXT1JLID0ge1xuICBNQUlOTkVUOiBcIm1haW5uZXRcIixcbiAgVEVTVE5FVDogXCJ0ZXN0bmV0XCIsXG4gIENZQU46IFwiY3lhblwiLFxuICBBUVVBOiBcImFxdWFcIixcbiAgQ0VMRVNURTogXCJjZWxlc3RlXCJcbn07XG5jb25zdCBUT1JVU19TQVBQSElSRV9ORVRXT1JLID0ge1xuICBTQVBQSElSRV9ERVZORVQ6IFwic2FwcGhpcmVfZGV2bmV0XCIsXG4gIFNBUFBISVJFX01BSU5ORVQ6IFwic2FwcGhpcmVfbWFpbm5ldFwiXG59O1xuY29uc3QgUFJPWFlfQ09OVFJBQ1RfQUREUkVTUyA9IHtcbiAgW1RPUlVTX0xFR0FDWV9ORVRXT1JLLk1BSU5ORVRdOiBcIjB4ZjIwMzM2ZTE2QjUxODI2MzdmMDk4MjFjMjdCRGUyOWIwQUZjZmU4MFwiLFxuICBbVE9SVVNfTEVHQUNZX05FVFdPUksuVEVTVE5FVF06IFwiMHhkMDg0NjA0ZTVGQTM4N0ZiQzJEYThiQWFiMDdmREQ2YURFRDQ2MTRBXCIsXG4gIFtUT1JVU19MRUdBQ1lfTkVUV09SSy5DWUFOXTogXCIweDlmMDcyYmExOWIzMzcwZTUxMmFhMWI0YmZjZGFmOTcyODMxNjgwMDVcIixcbiAgW1RPUlVTX0xFR0FDWV9ORVRXT1JLLkFRVUFdOiBcIjB4MjlEZWE4MmEwNTA5MTUzYjkxMDQwZWUxM2NEQmJhMGYwM2VmYjYyNVwiLFxuICBbVE9SVVNfTEVHQUNZX05FVFdPUksuQ0VMRVNURV06IFwiMHg2QmZmYjRlODk0NTMwNjlFNzQ4N2YwZmE1YzlmNGEyRDc3MWNjZTZjXCJcbn07XG5jb25zdCBNVUxUSV9DTFVTVEVSX05FVFdPUktTID0gW1xuLy8gVE9SVVNfTEVHQUNZX05FVFdPUksuQVFVQSxcblRPUlVTX0xFR0FDWV9ORVRXT1JLLkNFTEVTVEVcbi8vIFRPUlVTX0xFR0FDWV9ORVRXT1JLLkNZQU4sXG5dO1xuY29uc3QgTEVHQUNZX05FVFdPUktTX1JPVVRFX01BUCA9IHtcbiAgW1RPUlVTX0xFR0FDWV9ORVRXT1JLLkFRVUFdOiB7XG4gICAgbWlncmF0aW9uQ29tcGxldGVkOiB0cnVlLFxuICAgIG5ldHdvcmtJZGVudGlmaWVyOiBcImFxdWFcIixcbiAgICBuZXR3b3JrTWlncmF0ZWRUbzogVE9SVVNfU0FQUEhJUkVfTkVUV09SSy5TQVBQSElSRV9NQUlOTkVUXG4gIH0sXG4gIFtUT1JVU19MRUdBQ1lfTkVUV09SSy5DRUxFU1RFXToge1xuICAgIG1pZ3JhdGlvbkNvbXBsZXRlZDogZmFsc2UsXG4gICAgbmV0d29ya0lkZW50aWZpZXI6IFwiY2VsZXN0ZVwiLFxuICAgIG5ldHdvcmtNaWdyYXRlZFRvOiBUT1JVU19TQVBQSElSRV9ORVRXT1JLLlNBUFBISVJFX01BSU5ORVRcbiAgfSxcbiAgW1RPUlVTX0xFR0FDWV9ORVRXT1JLLkNZQU5dOiB7XG4gICAgbWlncmF0aW9uQ29tcGxldGVkOiB0cnVlLFxuICAgIG5ldHdvcmtJZGVudGlmaWVyOiBcImN5YW5cIixcbiAgICBuZXR3b3JrTWlncmF0ZWRUbzogVE9SVVNfU0FQUEhJUkVfTkVUV09SSy5TQVBQSElSRV9NQUlOTkVUXG4gIH0sXG4gIFtUT1JVU19MRUdBQ1lfTkVUV09SSy5NQUlOTkVUXToge1xuICAgIG1pZ3JhdGlvbkNvbXBsZXRlZDogdHJ1ZSxcbiAgICBuZXR3b3JrSWRlbnRpZmllcjogXCJtYWlubmV0XCIsXG4gICAgbmV0d29ya01pZ3JhdGVkVG86IFRPUlVTX1NBUFBISVJFX05FVFdPUksuU0FQUEhJUkVfTUFJTk5FVFxuICB9LFxuICBbVE9SVVNfTEVHQUNZX05FVFdPUksuVEVTVE5FVF06IHtcbiAgICBtaWdyYXRpb25Db21wbGV0ZWQ6IHRydWUsXG4gICAgbmV0d29ya0lkZW50aWZpZXI6IFwidGVhbFwiLFxuICAgIG5ldHdvcmtNaWdyYXRlZFRvOiBUT1JVU19TQVBQSElSRV9ORVRXT1JLLlNBUFBISVJFX0RFVk5FVFxuICB9XG59O1xuY29uc3QgTkVUV09SS19NQVAgPSB7XG4gIFtUT1JVU19MRUdBQ1lfTkVUV09SSy5NQUlOTkVUXTogXCJtYWlubmV0XCIsXG4gIFtUT1JVU19MRUdBQ1lfTkVUV09SSy5URVNUTkVUXTogXCJnb2VybGlcIixcbiAgW1RPUlVTX0xFR0FDWV9ORVRXT1JLLkNZQU5dOiBcInBvbHlnb24tbWFpbm5ldFwiLFxuICBbVE9SVVNfTEVHQUNZX05FVFdPUksuQVFVQV06IFwicG9seWdvbi1tYWlubmV0XCIsXG4gIFtUT1JVU19MRUdBQ1lfTkVUV09SSy5DRUxFU1RFXTogXCJwb2x5Z29uLW1haW5uZXRcIlxufTtcbmNvbnN0IFNJR05FUl9NQVAgPSB7XG4gIFtUT1JVU19TQVBQSElSRV9ORVRXT1JLLlNBUFBISVJFX01BSU5ORVRdOiBcImh0dHBzOi8vc2lnbmVyLndlYjNhdXRoLmlvXCIsXG4gIFtUT1JVU19TQVBQSElSRV9ORVRXT1JLLlNBUFBISVJFX0RFVk5FVF06IFwiaHR0cHM6Ly9zaWduZXIud2ViM2F1dGguaW9cIixcbiAgW1RPUlVTX0xFR0FDWV9ORVRXT1JLLk1BSU5ORVRdOiBcImh0dHBzOi8vc2lnbmVyLndlYjNhdXRoLmlvXCIsXG4gIFtUT1JVU19MRUdBQ1lfTkVUV09SSy5URVNUTkVUXTogXCJodHRwczovL3NpZ25lci53ZWIzYXV0aC5pb1wiLFxuICBbVE9SVVNfTEVHQUNZX05FVFdPUksuQ1lBTl06IFwiaHR0cHM6Ly9zaWduZXItcG9seWdvbi53ZWIzYXV0aC5pb1wiLFxuICBbVE9SVVNfTEVHQUNZX05FVFdPUksuQVFVQV06IFwiaHR0cHM6Ly9zaWduZXItcG9seWdvbi53ZWIzYXV0aC5pb1wiLFxuICBbVE9SVVNfTEVHQUNZX05FVFdPUksuQ0VMRVNURV06IFwiaHR0cHM6Ly9zaWduZXItcG9seWdvbi53ZWIzYXV0aC5pb1wiXG59O1xuY29uc3QgTUVUQURBVEFfTUFQID0ge1xuICBbVE9SVVNfTEVHQUNZX05FVFdPUksuTUFJTk5FVF06IFwiaHR0cHM6Ly9tZXRhZGF0YS53ZWIzYXV0aC5pb1wiLFxuICBbVE9SVVNfTEVHQUNZX05FVFdPUksuVEVTVE5FVF06IFwiaHR0cHM6Ly9tZXRhZGF0YS53ZWIzYXV0aC5pb1wiLFxuICBbVE9SVVNfTEVHQUNZX05FVFdPUksuQ1lBTl06IFwiaHR0cHM6Ly9tZXRhZGF0YS53ZWIzYXV0aC5pb1wiLFxuICBbVE9SVVNfTEVHQUNZX05FVFdPUksuQVFVQV06IFwiaHR0cHM6Ly9tZXRhZGF0YS53ZWIzYXV0aC5pb1wiLFxuICBbVE9SVVNfTEVHQUNZX05FVFdPUksuQ0VMRVNURV06IFwiaHR0cHM6Ly9tZXRhZGF0YS53ZWIzYXV0aC5pb1wiXG59O1xuY29uc3QgRk5EX1NFUlZFUiA9IFwiaHR0cHM6Ly9mbmQud2ViM2F1dGguaW9cIjtcbmNvbnN0IFNFU1NJT05fU0VSVkVSID0gXCJodHRwczovL3Nlc3Npb24ud2ViM2F1dGguaW9cIjtcblxuY29uc3QgYWJpID0gW3tcbiAgaW5wdXRzOiBbe1xuICAgIGludGVybmFsVHlwZTogXCJzdHJpbmdcIixcbiAgICBuYW1lOiBcIl92ZXJpZmllclwiLFxuICAgIHR5cGU6IFwic3RyaW5nXCJcbiAgfSwge1xuICAgIGludGVybmFsVHlwZTogXCJieXRlczMyXCIsXG4gICAgbmFtZTogXCJoYXNoZWRWZXJpZmllcklkXCIsXG4gICAgdHlwZTogXCJieXRlczMyXCJcbiAgfV0sXG4gIG5hbWU6IFwiZ2V0Tm9kZVNldFwiLFxuICBvdXRwdXRzOiBbe1xuICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgbmFtZTogXCJjdXJyZW50RXBvY2hcIixcbiAgICB0eXBlOiBcInVpbnQyNTZcIlxuICB9LCB7XG4gICAgaW50ZXJuYWxUeXBlOiBcInN0cmluZ1tdXCIsXG4gICAgbmFtZTogXCJ0b3J1c05vZGVFbmRwb2ludHNcIixcbiAgICB0eXBlOiBcInN0cmluZ1tdXCJcbiAgfSwge1xuICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2W11cIixcbiAgICBuYW1lOiBcInRvcnVzTm9kZVB1YlhcIixcbiAgICB0eXBlOiBcInVpbnQyNTZbXVwiXG4gIH0sIHtcbiAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NltdXCIsXG4gICAgbmFtZTogXCJ0b3J1c05vZGVQdWJZXCIsXG4gICAgdHlwZTogXCJ1aW50MjU2W11cIlxuICB9LCB7XG4gICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZbXVwiLFxuICAgIG5hbWU6IFwidG9ydXNJbmRleGVzXCIsXG4gICAgdHlwZTogXCJ1aW50MjU2W11cIlxuICB9XSxcbiAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgdHlwZTogXCJmdW5jdGlvblwiXG59XTtcblxuZXhwb3J0IHsgRk5EX1NFUlZFUiwgTEVHQUNZX05FVFdPUktTX1JPVVRFX01BUCwgTUVUQURBVEFfTUFQLCBNVUxUSV9DTFVTVEVSX05FVFdPUktTLCBORVRXT1JLX01BUCwgUFJPWFlfQ09OVFJBQ1RfQUREUkVTUywgU0VTU0lPTl9TRVJWRVIsIFNJR05FUl9NQVAsIFRPUlVTX0xFR0FDWV9ORVRXT1JLLCBUT1JVU19TQVBQSElSRV9ORVRXT1JLLCBhYmkgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/constants/dist/constants.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/eccrypto/dist/eccrypto.esm.js":
/*!***************************************************************!*\
  !*** ./node_modules/@toruslabs/eccrypto/dist/eccrypto.esm.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decrypt: () => (/* binding */ decrypt),\n/* harmony export */   derive: () => (/* binding */ derive),\n/* harmony export */   derivePadded: () => (/* binding */ derivePadded),\n/* harmony export */   deriveUnpadded: () => (/* binding */ deriveUnpadded),\n/* harmony export */   encrypt: () => (/* binding */ encrypt),\n/* harmony export */   generatePrivate: () => (/* binding */ generatePrivate),\n/* harmony export */   getPublic: () => (/* binding */ getPublic),\n/* harmony export */   getPublicCompressed: () => (/* binding */ getPublicCompressed),\n/* harmony export */   sign: () => (/* binding */ sign),\n/* harmony export */   verify: () => (/* binding */ verify)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\");\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(elliptic__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nconst ec = new elliptic__WEBPACK_IMPORTED_MODULE_1__.ec(\"secp256k1\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst browserCrypto = global.crypto || global.msCrypto || {};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst subtle = browserCrypto.subtle || browserCrypto.webkitSubtle;\nconst EC_GROUP_ORDER = Buffer.from(\"fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\", \"hex\");\nconst ZERO32 = Buffer.alloc(32, 0);\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || \"Assertion failed\");\n  }\n}\nfunction isScalar(x) {\n  return Buffer.isBuffer(x) && x.length === 32;\n}\nfunction isValidPrivateKey(privateKey) {\n  if (!isScalar(privateKey)) {\n    return false;\n  }\n  return privateKey.compare(ZERO32) > 0 &&\n  // > 0\n  privateKey.compare(EC_GROUP_ORDER) < 0; // < G\n}\n\n// Compare two buffers in constant time to prevent timing attacks.\nfunction equalConstTime(b1, b2) {\n  if (b1.length !== b2.length) {\n    return false;\n  }\n  let res = 0;\n  for (let i = 0; i < b1.length; i++) {\n    res |= b1[i] ^ b2[i]; // jshint ignore:line\n  }\n\n  return res === 0;\n}\n\n/* This must check if we're in the browser or\nnot, since the functions are different and does\nnot convert using browserify */\nfunction randomBytes(size) {\n  const arr = new Uint8Array(size);\n  if (typeof browserCrypto.getRandomValues === \"undefined\") {\n    return Buffer.from(crypto__WEBPACK_IMPORTED_MODULE_0___default().randomBytes(size));\n  }\n  browserCrypto.getRandomValues(arr);\n  return Buffer.from(arr);\n}\nasync function sha512(msg) {\n  if (subtle) {\n    const hash = await subtle.digest(\"SHA-512\", msg);\n    const result = new Uint8Array(hash);\n    return result;\n  }\n  const hash = crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash(\"sha512\");\n  const result = hash.update(msg).digest();\n  return new Uint8Array(result);\n}\nfunction getAes(op) {\n  return async function (iv, key, data) {\n    if (subtle) {\n      const importAlgorithm = {\n        name: \"AES-CBC\"\n      };\n      const cryptoKey = await subtle.importKey(\"raw\", key, importAlgorithm, false, [op]);\n      const encAlgorithm = {\n        name: \"AES-CBC\",\n        iv\n      };\n      const result = await subtle[op](encAlgorithm, cryptoKey, data);\n      return Buffer.from(new Uint8Array(result));\n    } else if (op === \"encrypt\") {\n      const cipher = crypto__WEBPACK_IMPORTED_MODULE_0___default().createCipheriv(\"aes-256-cbc\", key, iv);\n      const firstChunk = cipher.update(data);\n      const secondChunk = cipher.final();\n      return Buffer.concat([firstChunk, secondChunk]);\n    } else if (op === \"decrypt\") {\n      const decipher = crypto__WEBPACK_IMPORTED_MODULE_0___default().createDecipheriv(\"aes-256-cbc\", key, iv);\n      const firstChunk = decipher.update(data);\n      const secondChunk = decipher.final();\n      return Buffer.concat([firstChunk, secondChunk]);\n    }\n    throw new Error(`Unsupported operation: ${op}`);\n  };\n}\nconst aesCbcEncrypt = getAes(\"encrypt\");\nconst aesCbcDecrypt = getAes(\"decrypt\");\nasync function hmacSha256Sign(key, msg) {\n  if (subtle) {\n    const importAlgorithm = {\n      name: \"HMAC\",\n      hash: {\n        name: \"SHA-256\"\n      }\n    };\n    const cryptoKey = await subtle.importKey(\"raw\", new Uint8Array(key), importAlgorithm, false, [\"sign\", \"verify\"]);\n    const sig = await subtle.sign(\"HMAC\", cryptoKey, msg);\n    const result = Buffer.from(new Uint8Array(sig));\n    return result;\n  }\n  const hmac = crypto__WEBPACK_IMPORTED_MODULE_0___default().createHmac(\"sha256\", Buffer.from(key));\n  hmac.update(msg);\n  const result = hmac.digest();\n  return result;\n}\nasync function hmacSha256Verify(key, msg, sig) {\n  const expectedSig = await hmacSha256Sign(key, msg);\n  return equalConstTime(expectedSig, sig);\n}\n\n/**\n * Generate a new valid private key. Will use the window.crypto or window.msCrypto as source\n * depending on your browser.\n */\nconst generatePrivate = function () {\n  let privateKey = randomBytes(32);\n  while (!isValidPrivateKey(privateKey)) {\n    privateKey = randomBytes(32);\n  }\n  return privateKey;\n};\nconst getPublic = function (privateKey) {\n  // This function has sync API so we throw an error immediately.\n  assert(privateKey.length === 32, \"Bad private key\");\n  assert(isValidPrivateKey(privateKey), \"Bad private key\");\n  // XXX(Kagami): `elliptic.utils.encode` returns array for every\n  // encoding except `hex`.\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(\"array\"));\n};\n\n/**\n * Get compressed version of public key.\n */\nconst getPublicCompressed = function (privateKey) {\n  // jshint ignore:line\n  assert(privateKey.length === 32, \"Bad private key\");\n  assert(isValidPrivateKey(privateKey), \"Bad private key\");\n  // See https://github.com/wanderer/secp256k1-node/issues/46\n  const compressed = true;\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, \"array\"));\n};\n\n// NOTE(Kagami): We don't use promise shim in Browser implementation\n// because it's supported natively in new browsers (see\n// <http://caniuse.com/#feat=promises>) and we can use only new browsers\n// because of the WebCryptoAPI (see\n// <http://caniuse.com/#feat=cryptography>).\nconst sign = async function (privateKey, msg) {\n  assert(privateKey.length === 32, \"Bad private key\");\n  assert(isValidPrivateKey(privateKey), \"Bad private key\");\n  assert(msg.length > 0, \"Message should not be empty\");\n  assert(msg.length <= 32, \"Message is too long\");\n  return Buffer.from(ec.sign(msg, privateKey, {\n    canonical: true\n  }).toDER());\n};\nconst verify = async function (publicKey, msg, sig) {\n  assert(publicKey.length === 65 || publicKey.length === 33, \"Bad public key\");\n  if (publicKey.length === 65) {\n    assert(publicKey[0] === 4, \"Bad public key\");\n  }\n  if (publicKey.length === 33) {\n    assert(publicKey[0] === 2 || publicKey[0] === 3, \"Bad public key\");\n  }\n  assert(msg.length > 0, \"Message should not be empty\");\n  assert(msg.length <= 32, \"Message is too long\");\n  if (ec.verify(msg, sig, publicKey)) {\n    return null;\n  }\n  throw new Error(\"Bad signature\");\n};\nconst derive = async function (privateKeyA, publicKeyB) {\n  assert(Buffer.isBuffer(privateKeyA), \"Bad private key\");\n  assert(Buffer.isBuffer(publicKeyB), \"Bad public key\");\n  assert(privateKeyA.length === 32, \"Bad private key\");\n  assert(isValidPrivateKey(privateKeyA), \"Bad private key\");\n  assert(publicKeyB.length === 65 || publicKeyB.length === 33, \"Bad public key\");\n  if (publicKeyB.length === 65) {\n    assert(publicKeyB[0] === 4, \"Bad public key\");\n  }\n  if (publicKeyB.length === 33) {\n    assert(publicKeyB[0] === 2 || publicKeyB[0] === 3, \"Bad public key\");\n  }\n  const keyA = ec.keyFromPrivate(privateKeyA);\n  const keyB = ec.keyFromPublic(publicKeyB);\n  const Px = keyA.derive(keyB.getPublic()); // BN instance\n  return Buffer.from(Px.toArray());\n};\nconst deriveUnpadded = derive;\nconst derivePadded = async function (privateKeyA, publicKeyB) {\n  assert(Buffer.isBuffer(privateKeyA), \"Bad private key\");\n  assert(Buffer.isBuffer(publicKeyB), \"Bad public key\");\n  assert(privateKeyA.length === 32, \"Bad private key\");\n  assert(isValidPrivateKey(privateKeyA), \"Bad private key\");\n  assert(publicKeyB.length === 65 || publicKeyB.length === 33, \"Bad public key\");\n  if (publicKeyB.length === 65) {\n    assert(publicKeyB[0] === 4, \"Bad public key\");\n  }\n  if (publicKeyB.length === 33) {\n    assert(publicKeyB[0] === 2 || publicKeyB[0] === 3, \"Bad public key\");\n  }\n  const keyA = ec.keyFromPrivate(privateKeyA);\n  const keyB = ec.keyFromPublic(publicKeyB);\n  const Px = keyA.derive(keyB.getPublic()); // BN instance\n  return Buffer.from(Px.toString(16, 64), \"hex\");\n};\nconst encrypt = async function (publicKeyTo, msg, opts) {\n  opts = opts || {};\n  let ephemPrivateKey = opts.ephemPrivateKey || randomBytes(32);\n  // There is a very unlikely possibility that it is not a valid key\n  while (!isValidPrivateKey(ephemPrivateKey)) {\n    ephemPrivateKey = opts.ephemPrivateKey || randomBytes(32);\n  }\n  const ephemPublicKey = getPublic(ephemPrivateKey);\n  const Px = await deriveUnpadded(ephemPrivateKey, publicKeyTo);\n  const hash = await sha512(Px);\n  const iv = opts.iv || randomBytes(16);\n  const encryptionKey = hash.slice(0, 32);\n  const macKey = hash.slice(32);\n  const data = await aesCbcEncrypt(iv, Buffer.from(encryptionKey), msg);\n  const ciphertext = data;\n  const dataToMac = Buffer.concat([iv, ephemPublicKey, ciphertext]);\n  const mac = await hmacSha256Sign(Buffer.from(macKey), dataToMac);\n  return {\n    iv,\n    ephemPublicKey,\n    ciphertext,\n    mac\n  };\n};\nconst decrypt = async function (privateKey, opts, _padding) {\n  const padding = _padding !== null && _padding !== void 0 ? _padding : false;\n  const deriveLocal = padding ? derivePadded : deriveUnpadded;\n  const Px = await deriveLocal(privateKey, opts.ephemPublicKey);\n  const hash = await sha512(Px);\n  const encryptionKey = hash.slice(0, 32);\n  const macKey = hash.slice(32);\n  const dataToMac = Buffer.concat([opts.iv, opts.ephemPublicKey, opts.ciphertext]);\n  const macGood = await hmacSha256Verify(Buffer.from(macKey), dataToMac, opts.mac);\n  if (!macGood && padding === false) {\n    return decrypt(privateKey, opts, true);\n  } else if (!macGood && padding === true) {\n    throw new Error(\"bad MAC after trying padded\");\n  }\n  const msg = await aesCbcDecrypt(opts.iv, Buffer.from(encryptionKey), opts.ciphertext);\n  return Buffer.from(new Uint8Array(msg));\n};\n\n\n//# sourceMappingURL=eccrypto.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/eccrypto/dist/eccrypto.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/fetch-node-details/dist/fetchNodeDetails.esm.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@toruslabs/fetch-node-details/dist/fetchNodeDetails.esm.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NodeDetailManager: () => (/* binding */ NodeDetailManager),\n/* harmony export */   \"default\": () => (/* binding */ NodeDetailManager)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _toruslabs_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @toruslabs/constants */ \"(ssr)/./node_modules/@toruslabs/constants/dist/constants.esm.js\");\n/* harmony import */ var _toruslabs_fnd_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/fnd-base */ \"(ssr)/./node_modules/@toruslabs/fnd-base/dist/fndBase.esm.js\");\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\nconst log = loglevel__WEBPACK_IMPORTED_MODULE_4___default().getLogger(\"fnd\");\nclass NodeDetailManager {\n  constructor() {\n    let {\n      network = _toruslabs_constants__WEBPACK_IMPORTED_MODULE_1__.TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET,\n      fndServerEndpoint,\n      enableLogging = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"fndServerEndpoint\", `${_toruslabs_constants__WEBPACK_IMPORTED_MODULE_1__.FND_SERVER}/node-details`);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_currentEpoch\", \"1\");\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_torusNodeEndpoints\", []);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_torusNodeRSSEndpoints\", []);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_torusNodeSSSEndpoints\", []);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_torusNodeTSSEndpoints\", []);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_torusNodePub\", []);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_torusIndexes\", []);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"updated\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"network\", void 0);\n    this.network = network;\n    this.updated = false;\n    if (fndServerEndpoint) {\n      this.fndServerEndpoint = fndServerEndpoint;\n    }\n    if (enableLogging) {\n      log.enableAll();\n    } else {\n      log.disableAll();\n    }\n  }\n  get _nodeDetails() {\n    return {\n      currentEpoch: this._currentEpoch,\n      torusNodeEndpoints: this._torusNodeEndpoints,\n      torusNodeSSSEndpoints: this._torusNodeSSSEndpoints,\n      torusNodeRSSEndpoints: this._torusNodeRSSEndpoints,\n      torusNodeTSSEndpoints: this._torusNodeTSSEndpoints,\n      torusNodePub: this._torusNodePub,\n      torusIndexes: this._torusIndexes,\n      updated: this.updated\n    };\n  }\n  async getNodeDetails(_ref) {\n    let {\n      verifier,\n      verifierId\n    } = _ref;\n    try {\n      if (this.updated && !_toruslabs_constants__WEBPACK_IMPORTED_MODULE_1__.MULTI_CLUSTER_NETWORKS.includes(this.network)) return this._nodeDetails;\n      try {\n        const {\n          nodeDetails\n        } = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.get)(`${this.fndServerEndpoint}?network=${this.network}&verifier=${verifier}&verifierId=${verifierId}`);\n        this.setNodeDetails(nodeDetails);\n        return this._nodeDetails;\n      } catch (error) {\n        log.error(\"Failed to fetch node details from server, using local.\", error);\n      }\n      const nodeDetails = (0,_toruslabs_fnd_base__WEBPACK_IMPORTED_MODULE_2__.fetchLocalConfig)(this.network);\n      if (!nodeDetails) throw new Error(\"Failed to fetch node details\");\n      this.setNodeDetails(nodeDetails);\n      return this._nodeDetails;\n    } catch (error) {\n      log.error(\"Failed to fetch node details\", error);\n      throw error;\n    }\n  }\n  async getMetadataUrl() {\n    if (Object.values(_toruslabs_constants__WEBPACK_IMPORTED_MODULE_1__.TORUS_LEGACY_NETWORK).includes(this.network)) {\n      return _toruslabs_constants__WEBPACK_IMPORTED_MODULE_1__.METADATA_MAP[this.network];\n    }\n    const nodeDetails = await this.getNodeDetails({\n      verifier: \"test-verifier\",\n      verifierId: \"test-verifier-id\"\n    });\n    return nodeDetails.torusNodeEndpoints[0].replace(\"/sss/jrpc\", \"/metadata\");\n  }\n  setNodeDetails(nodeDetails) {\n    const {\n      currentEpoch,\n      torusNodeEndpoints,\n      torusNodeSSSEndpoints,\n      torusNodeRSSEndpoints,\n      torusNodeTSSEndpoints,\n      torusNodePub,\n      torusIndexes\n    } = nodeDetails;\n    this._torusNodeEndpoints = torusNodeEndpoints;\n    this._torusNodeSSSEndpoints = torusNodeSSSEndpoints || [];\n    this._torusNodeRSSEndpoints = torusNodeRSSEndpoints || [];\n    this._torusNodeTSSEndpoints = torusNodeTSSEndpoints || [];\n    this._torusNodePub = torusNodePub;\n    this._torusIndexes = torusIndexes;\n    this._currentEpoch = currentEpoch;\n    this.updated = true;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9mZXRjaC1ub2RlLWRldGFpbHMvZGlzdC9mZXRjaE5vZGVEZXRhaWxzLmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBb0U7QUFDa0U7QUFDL0U7QUFDVDtBQUNoQjs7QUFFOUIsWUFBWSx5REFBZ0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHdFQUFzQjtBQUN0QztBQUNBO0FBQ0EsTUFBTTtBQUNOLElBQUksNEVBQWUsK0JBQStCLDREQUFVLENBQUM7QUFDN0QsSUFBSSw0RUFBZTtBQUNuQixJQUFJLDRFQUFlO0FBQ25CLElBQUksNEVBQWU7QUFDbkIsSUFBSSw0RUFBZTtBQUNuQixJQUFJLDRFQUFlO0FBQ25CLElBQUksNEVBQWU7QUFDbkIsSUFBSSw0RUFBZTtBQUNuQixJQUFJLDRFQUFlO0FBQ25CLElBQUksNEVBQWU7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSwyQkFBMkIsd0VBQXNCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLFVBQVUsUUFBUSw0REFBRyxJQUFJLHVCQUF1QixXQUFXLGFBQWEsWUFBWSxTQUFTLGNBQWMsV0FBVztBQUN0SDtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSwwQkFBMEIscUVBQWdCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNFQUFvQjtBQUMxQyxhQUFhLDhEQUFZO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTJEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0Ly4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvZmV0Y2gtbm9kZS1kZXRhaWxzL2Rpc3QvZmV0Y2hOb2RlRGV0YWlscy5lc20uanM/ZTA3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHknO1xuaW1wb3J0IHsgVE9SVVNfU0FQUEhJUkVfTkVUV09SSywgRk5EX1NFUlZFUiwgTVVMVElfQ0xVU1RFUl9ORVRXT1JLUywgVE9SVVNfTEVHQUNZX05FVFdPUkssIE1FVEFEQVRBX01BUCB9IGZyb20gJ0B0b3J1c2xhYnMvY29uc3RhbnRzJztcbmltcG9ydCB7IGZldGNoTG9jYWxDb25maWcgfSBmcm9tICdAdG9ydXNsYWJzL2ZuZC1iYXNlJztcbmltcG9ydCB7IGdldCB9IGZyb20gJ0B0b3J1c2xhYnMvaHR0cC1oZWxwZXJzJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnbG9nbGV2ZWwnO1xuXG5jb25zdCBsb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKFwiZm5kXCIpO1xuY2xhc3MgTm9kZURldGFpbE1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBsZXQge1xuICAgICAgbmV0d29yayA9IFRPUlVTX1NBUFBISVJFX05FVFdPUksuU0FQUEhJUkVfTUFJTk5FVCxcbiAgICAgIGZuZFNlcnZlckVuZHBvaW50LFxuICAgICAgZW5hYmxlTG9nZ2luZyA9IGZhbHNlXG4gICAgfSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZm5kU2VydmVyRW5kcG9pbnRcIiwgYCR7Rk5EX1NFUlZFUn0vbm9kZS1kZXRhaWxzYCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX2N1cnJlbnRFcG9jaFwiLCBcIjFcIik7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3RvcnVzTm9kZUVuZHBvaW50c1wiLCBbXSk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3RvcnVzTm9kZVJTU0VuZHBvaW50c1wiLCBbXSk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3RvcnVzTm9kZVNTU0VuZHBvaW50c1wiLCBbXSk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3RvcnVzTm9kZVRTU0VuZHBvaW50c1wiLCBbXSk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3RvcnVzTm9kZVB1YlwiLCBbXSk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3RvcnVzSW5kZXhlc1wiLCBbXSk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwidXBkYXRlZFwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5ldHdvcmtcIiwgdm9pZCAwKTtcbiAgICB0aGlzLm5ldHdvcmsgPSBuZXR3b3JrO1xuICAgIHRoaXMudXBkYXRlZCA9IGZhbHNlO1xuICAgIGlmIChmbmRTZXJ2ZXJFbmRwb2ludCkge1xuICAgICAgdGhpcy5mbmRTZXJ2ZXJFbmRwb2ludCA9IGZuZFNlcnZlckVuZHBvaW50O1xuICAgIH1cbiAgICBpZiAoZW5hYmxlTG9nZ2luZykge1xuICAgICAgbG9nLmVuYWJsZUFsbCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2cuZGlzYWJsZUFsbCgpO1xuICAgIH1cbiAgfVxuICBnZXQgX25vZGVEZXRhaWxzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjdXJyZW50RXBvY2g6IHRoaXMuX2N1cnJlbnRFcG9jaCxcbiAgICAgIHRvcnVzTm9kZUVuZHBvaW50czogdGhpcy5fdG9ydXNOb2RlRW5kcG9pbnRzLFxuICAgICAgdG9ydXNOb2RlU1NTRW5kcG9pbnRzOiB0aGlzLl90b3J1c05vZGVTU1NFbmRwb2ludHMsXG4gICAgICB0b3J1c05vZGVSU1NFbmRwb2ludHM6IHRoaXMuX3RvcnVzTm9kZVJTU0VuZHBvaW50cyxcbiAgICAgIHRvcnVzTm9kZVRTU0VuZHBvaW50czogdGhpcy5fdG9ydXNOb2RlVFNTRW5kcG9pbnRzLFxuICAgICAgdG9ydXNOb2RlUHViOiB0aGlzLl90b3J1c05vZGVQdWIsXG4gICAgICB0b3J1c0luZGV4ZXM6IHRoaXMuX3RvcnVzSW5kZXhlcyxcbiAgICAgIHVwZGF0ZWQ6IHRoaXMudXBkYXRlZFxuICAgIH07XG4gIH1cbiAgYXN5bmMgZ2V0Tm9kZURldGFpbHMoX3JlZikge1xuICAgIGxldCB7XG4gICAgICB2ZXJpZmllcixcbiAgICAgIHZlcmlmaWVySWRcbiAgICB9ID0gX3JlZjtcbiAgICB0cnkge1xuICAgICAgaWYgKHRoaXMudXBkYXRlZCAmJiAhTVVMVElfQ0xVU1RFUl9ORVRXT1JLUy5pbmNsdWRlcyh0aGlzLm5ldHdvcmspKSByZXR1cm4gdGhpcy5fbm9kZURldGFpbHM7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgbm9kZURldGFpbHNcbiAgICAgICAgfSA9IGF3YWl0IGdldChgJHt0aGlzLmZuZFNlcnZlckVuZHBvaW50fT9uZXR3b3JrPSR7dGhpcy5uZXR3b3JrfSZ2ZXJpZmllcj0ke3ZlcmlmaWVyfSZ2ZXJpZmllcklkPSR7dmVyaWZpZXJJZH1gKTtcbiAgICAgICAgdGhpcy5zZXROb2RlRGV0YWlscyhub2RlRGV0YWlscyk7XG4gICAgICAgIHJldHVybiB0aGlzLl9ub2RlRGV0YWlscztcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGxvZy5lcnJvcihcIkZhaWxlZCB0byBmZXRjaCBub2RlIGRldGFpbHMgZnJvbSBzZXJ2ZXIsIHVzaW5nIGxvY2FsLlwiLCBlcnJvcik7XG4gICAgICB9XG4gICAgICBjb25zdCBub2RlRGV0YWlscyA9IGZldGNoTG9jYWxDb25maWcodGhpcy5uZXR3b3JrKTtcbiAgICAgIGlmICghbm9kZURldGFpbHMpIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCBub2RlIGRldGFpbHNcIik7XG4gICAgICB0aGlzLnNldE5vZGVEZXRhaWxzKG5vZGVEZXRhaWxzKTtcbiAgICAgIHJldHVybiB0aGlzLl9ub2RlRGV0YWlscztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nLmVycm9yKFwiRmFpbGVkIHRvIGZldGNoIG5vZGUgZGV0YWlsc1wiLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZ2V0TWV0YWRhdGFVcmwoKSB7XG4gICAgaWYgKE9iamVjdC52YWx1ZXMoVE9SVVNfTEVHQUNZX05FVFdPUkspLmluY2x1ZGVzKHRoaXMubmV0d29yaykpIHtcbiAgICAgIHJldHVybiBNRVRBREFUQV9NQVBbdGhpcy5uZXR3b3JrXTtcbiAgICB9XG4gICAgY29uc3Qgbm9kZURldGFpbHMgPSBhd2FpdCB0aGlzLmdldE5vZGVEZXRhaWxzKHtcbiAgICAgIHZlcmlmaWVyOiBcInRlc3QtdmVyaWZpZXJcIixcbiAgICAgIHZlcmlmaWVySWQ6IFwidGVzdC12ZXJpZmllci1pZFwiXG4gICAgfSk7XG4gICAgcmV0dXJuIG5vZGVEZXRhaWxzLnRvcnVzTm9kZUVuZHBvaW50c1swXS5yZXBsYWNlKFwiL3Nzcy9qcnBjXCIsIFwiL21ldGFkYXRhXCIpO1xuICB9XG4gIHNldE5vZGVEZXRhaWxzKG5vZGVEZXRhaWxzKSB7XG4gICAgY29uc3Qge1xuICAgICAgY3VycmVudEVwb2NoLFxuICAgICAgdG9ydXNOb2RlRW5kcG9pbnRzLFxuICAgICAgdG9ydXNOb2RlU1NTRW5kcG9pbnRzLFxuICAgICAgdG9ydXNOb2RlUlNTRW5kcG9pbnRzLFxuICAgICAgdG9ydXNOb2RlVFNTRW5kcG9pbnRzLFxuICAgICAgdG9ydXNOb2RlUHViLFxuICAgICAgdG9ydXNJbmRleGVzXG4gICAgfSA9IG5vZGVEZXRhaWxzO1xuICAgIHRoaXMuX3RvcnVzTm9kZUVuZHBvaW50cyA9IHRvcnVzTm9kZUVuZHBvaW50cztcbiAgICB0aGlzLl90b3J1c05vZGVTU1NFbmRwb2ludHMgPSB0b3J1c05vZGVTU1NFbmRwb2ludHMgfHwgW107XG4gICAgdGhpcy5fdG9ydXNOb2RlUlNTRW5kcG9pbnRzID0gdG9ydXNOb2RlUlNTRW5kcG9pbnRzIHx8IFtdO1xuICAgIHRoaXMuX3RvcnVzTm9kZVRTU0VuZHBvaW50cyA9IHRvcnVzTm9kZVRTU0VuZHBvaW50cyB8fCBbXTtcbiAgICB0aGlzLl90b3J1c05vZGVQdWIgPSB0b3J1c05vZGVQdWI7XG4gICAgdGhpcy5fdG9ydXNJbmRleGVzID0gdG9ydXNJbmRleGVzO1xuICAgIHRoaXMuX2N1cnJlbnRFcG9jaCA9IGN1cnJlbnRFcG9jaDtcbiAgICB0aGlzLnVwZGF0ZWQgPSB0cnVlO1xuICB9XG59XG5cbmV4cG9ydCB7IE5vZGVEZXRhaWxNYW5hZ2VyLCBOb2RlRGV0YWlsTWFuYWdlciBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/fetch-node-details/dist/fetchNodeDetails.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/fnd-base/dist/fndBase.esm.js":
/*!**************************************************************!*\
  !*** ./node_modules/@toruslabs/fnd-base/dist/fndBase.esm.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SAPPHIRE_NETWORK_URLS: () => (/* binding */ SAPPHIRE_NETWORK_URLS),\n/* harmony export */   fetchLocalConfig: () => (/* binding */ fetchLocalConfig),\n/* harmony export */   getRSSEndpoints: () => (/* binding */ getRSSEndpoints),\n/* harmony export */   getSSSEndpoints: () => (/* binding */ getSSSEndpoints),\n/* harmony export */   getSapphireNodeDetails: () => (/* binding */ getSapphireNodeDetails),\n/* harmony export */   getTSSEndpoints: () => (/* binding */ getTSSEndpoints)\n/* harmony export */ });\n/* harmony import */ var _toruslabs_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @toruslabs/constants */ \"(ssr)/./node_modules/@toruslabs/constants/dist/constants.esm.js\");\n\n\nconst SAPPHIRE_NETWORK_URLS = {\n  [_toruslabs_constants__WEBPACK_IMPORTED_MODULE_0__.TORUS_SAPPHIRE_NETWORK.SAPPHIRE_DEVNET]: [\"https://node-1.dev-node.web3auth.io\", \"https://node-2.dev-node.web3auth.io\", \"https://node-3.dev-node.web3auth.io\", \"https://node-4.dev-node.web3auth.io\", \"https://node-5.dev-node.web3auth.io\"],\n  [_toruslabs_constants__WEBPACK_IMPORTED_MODULE_0__.TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET]: [\"https://node-1.node.web3auth.io\", \"https://node-2.node.web3auth.io\", \"https://node-3.node.web3auth.io\", \"https://node-4.node.web3auth.io\", \"https://node-5.node.web3auth.io\"]\n};\nconst getSSSEndpoints = (sapphireNetwork, legacyNetwork) => {\n  const endpoints = SAPPHIRE_NETWORK_URLS[sapphireNetwork];\n  if (!endpoints || endpoints.length === 0) {\n    throw new Error(`Unsupported network: ${sapphireNetwork}`);\n  }\n  const routeIdentifier = _toruslabs_constants__WEBPACK_IMPORTED_MODULE_0__.LEGACY_NETWORKS_ROUTE_MAP[legacyNetwork];\n  return endpoints.map(e => {\n    if (routeIdentifier && routeIdentifier.networkIdentifier) {\n      return `${e}/sss/${routeIdentifier.networkIdentifier}/jrpc`;\n    }\n    return `${e}/sss/jrpc`;\n  });\n};\nconst getRSSEndpoints = (sapphireNetwork, legacyNetwork) => {\n  const endpoints = SAPPHIRE_NETWORK_URLS[sapphireNetwork];\n  if (!endpoints || endpoints.length === 0) {\n    throw new Error(`Unsupported network: ${sapphireNetwork}`);\n  }\n  const routeIdentifier = _toruslabs_constants__WEBPACK_IMPORTED_MODULE_0__.LEGACY_NETWORKS_ROUTE_MAP[legacyNetwork];\n  return endpoints.map(e => {\n    if (routeIdentifier && routeIdentifier.networkIdentifier) {\n      return `${e}/rss/${routeIdentifier.networkIdentifier}`;\n    }\n    return `${e}/rss`;\n  });\n};\nconst getTSSEndpoints = (sapphireNetwork, legacyNetwork) => {\n  const endpoints = SAPPHIRE_NETWORK_URLS[sapphireNetwork];\n  if (!endpoints || endpoints.length === 0) {\n    throw new Error(`Unsupported network: ${sapphireNetwork}`);\n  }\n  const routeIdentifier = _toruslabs_constants__WEBPACK_IMPORTED_MODULE_0__.LEGACY_NETWORKS_ROUTE_MAP[legacyNetwork];\n  return endpoints.map(e => {\n    if (routeIdentifier && routeIdentifier.networkIdentifier) {\n      return `${e}/tss/${routeIdentifier.networkIdentifier}`;\n    }\n    return `${e}/tss`;\n  });\n};\n\nconst SAPPHIRE_NODE_PUB_KEYS = {\n  [_toruslabs_constants__WEBPACK_IMPORTED_MODULE_0__.TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET]: [{\n    X: \"e0925898fee0e9e941fdca7ee88deec99939ae9407e923535c4d4a3a3ff8b052\",\n    Y: \"54b9fea924e3f3e40791f9987f4234ae4222412d65b74068032fa5d8b63375c1\"\n  }, {\n    X: \"9124cf1e280aab32ba50dffd2de81cecabc13d82d2c1fe9de82f3b3523f9b637\",\n    Y: \"fca939a1ceb42ce745c55b21ef094f543b457630cb63a94ef4f1afeee2b1f107\"\n  }, {\n    X: \"555f681a63d469cc6c3a58a97e29ebd277425f0e6159708e7c7bf05f18f89476\",\n    Y: \"606f2bcc0884fa5b64366fc3e8362e4939841b56acd60d5f4553cf36b891ac4e\"\n  }, {\n    X: \"2b5f58d8e340f1ab922e89b3a69a68930edfe51364644a456335e179bc130128\",\n    Y: \"4b4daa05939426e3cbe7d08f0e773d2bf36f64c00d04620ee6df2a7af4d2247\"\n  }, {\n    X: \"3ecbb6a68afe72cf34ec6c0a12b5cb78a0d2e83ba402983b6adbc5f36219861a\",\n    Y: \"dc1031c5cc8f0472bd521a62a64ebca9e163902c247bf05937daf4ae835091e4\"\n  }],\n  [_toruslabs_constants__WEBPACK_IMPORTED_MODULE_0__.TORUS_SAPPHIRE_NETWORK.SAPPHIRE_DEVNET]: [{\n    X: \"f74389b0a4c8d10d2a687ae575f69b20f412d41ab7f1fe6b358aa14871327247\",\n    Y: \"54e3a73098ed9bced3ef8821736e9794f9264a1420c0c7ad15d2fa617ba35ef7\"\n  }, {\n    X: \"bc38813a6873e526087918507c78fc3a61624670ee851ecfb4f3bef55d027b5a\",\n    Y: \"ac4b21229f662a0aefdfdac21cf17c3261a392c74a8790db218b34e3e4c1d56a\"\n  }, {\n    X: \"b56541684ea5fa40c8337b7688d502f0e9e092098962ad344c34e94f06d293fb\",\n    Y: \"759a998cef79d389082f9a75061a29190eec0cac99b8c25ddcf6b58569dad55c\"\n  }, {\n    X: \"7bcb058d4c6ffc6ba4bfdfd93d141af35a66338a62c7c27cdad2ae3f8289b767\",\n    Y: \"336ab1935e41ed4719e162587f0ab55518db4207a1eb36cc72303f1b86689d2b\"\n  }, {\n    X: \"bf12a136ef94399ea098f926f04e26a4ec4ac70f69cce274e8893704c4951773\",\n    Y: \"bdd44828020f52ce510e026338216ada184a6867eb4e19fb4c2d495d4a7e15e4\"\n  }]\n};\n\nconst getSapphireNodeDetails = (sapphireNetwork, legacyNetwork) => {\n  return {\n    currentEpoch: \"1\",\n    torusNodeEndpoints: getSSSEndpoints(sapphireNetwork, legacyNetwork),\n    torusNodeSSSEndpoints: getSSSEndpoints(sapphireNetwork, legacyNetwork),\n    torusNodeRSSEndpoints: getRSSEndpoints(sapphireNetwork, legacyNetwork),\n    torusNodeTSSEndpoints: getTSSEndpoints(sapphireNetwork, legacyNetwork),\n    torusIndexes: [1, 2, 3, 4, 5],\n    torusNodePub: SAPPHIRE_NODE_PUB_KEYS[sapphireNetwork]\n  };\n};\n\nfunction fetchLocalConfig(network) {\n  if (Object.values(_toruslabs_constants__WEBPACK_IMPORTED_MODULE_0__.TORUS_SAPPHIRE_NETWORK).includes(network)) {\n    return getSapphireNodeDetails(network);\n  }\n  if (Object.values(_toruslabs_constants__WEBPACK_IMPORTED_MODULE_0__.TORUS_LEGACY_NETWORK).includes(network)) {\n    const legacyMap = _toruslabs_constants__WEBPACK_IMPORTED_MODULE_0__.LEGACY_NETWORKS_ROUTE_MAP[network];\n    if (legacyMap.migrationCompleted) return getSapphireNodeDetails(legacyMap.networkMigratedTo, network);\n  }\n  return undefined;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/fnd-base/dist/fndBase.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearAPIKey: () => (/* binding */ clearAPIKey),\n/* harmony export */   clearEmbedHost: () => (/* binding */ clearEmbedHost),\n/* harmony export */   enableSentryTracing: () => (/* binding */ enableSentryTracing),\n/* harmony export */   gatewayAuthHeader: () => (/* binding */ gatewayAuthHeader),\n/* harmony export */   gatewayEmbedHostHeader: () => (/* binding */ gatewayEmbedHostHeader),\n/* harmony export */   generateJsonRPCObject: () => (/* binding */ generateJsonRPCObject),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getAPIKey: () => (/* binding */ getAPIKey),\n/* harmony export */   getEmbedHost: () => (/* binding */ getEmbedHost),\n/* harmony export */   patch: () => (/* binding */ patch),\n/* harmony export */   post: () => (/* binding */ post),\n/* harmony export */   promiseRace: () => (/* binding */ promiseRace),\n/* harmony export */   promiseTimeout: () => (/* binding */ promiseTimeout),\n/* harmony export */   put: () => (/* binding */ put),\n/* harmony export */   remove: () => (/* binding */ remove),\n/* harmony export */   setAPIKey: () => (/* binding */ setAPIKey),\n/* harmony export */   setEmbedHost: () => (/* binding */ setEmbedHost),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash.merge */ \"(ssr)/./node_modules/lodash.merge/index.js\");\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_merge__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\nconst log = loglevel__WEBPACK_IMPORTED_MODULE_2___default().getLogger(\"http-helpers\");\nlog.setLevel(loglevel__WEBPACK_IMPORTED_MODULE_2__.levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\";\n\n// #region API Keys\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nlet sentry = null;\nconst tracingOrigins = [];\nconst tracingPaths = [];\nfunction enableSentryTracing(_sentry, _tracingOrigins, _tracingPaths) {\n  sentry = _sentry;\n  tracingOrigins.push(..._tracingOrigins);\n  tracingPaths.push(..._tracingPaths);\n}\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\nfunction getEmbedHost() {\n  return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n  return apiKey;\n}\n\n// #endregion\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\nasync function fetchAndTrace(url, init) {\n  let _url = null;\n  try {\n    _url = new URL(url);\n  } catch (error) {}\n  if (sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname))) {\n    const transaction = sentry.startTransaction({\n      name: url\n    });\n    const span = transaction.startChild({\n      op: \"http\"\n    }); // This function returns a Span\n\n    const response = await fetch(url, init);\n    span.finish(); // Remember that only finished spans will be sent with the transaction\n\n    transaction.finish(); // Finishing the transaction will send it to Sentry\n\n    return response;\n  }\n  return fetch(url, init);\n}\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\nfunction debugLogResponse(response) {\n  log.info(`Response: ${response.status} ${response.statusText}`);\n  log.info(`Url: ${response.url}`);\n}\nfunction logTracingHeader(response) {\n  const tracingHeader = response.headers.get(\"x-web3-correlation-id\");\n  if (tracingHeader) log.info(`Request tracing with traceID = ${tracingHeader}`);\n}\nconst promiseTimeout = async (ms, promise) => {\n  let timeoutFunc = null;\n  try {\n    const timeout = new Promise((_resolve, reject) => {\n      timeoutFunc = setTimeout(() => {\n        reject(new Error(`Timed out in ${ms}ms`));\n      }, ms);\n    });\n    const result = await Promise.race([promise, timeout]);\n    // promise.race will return the first resolved promise\n    // then we clear the timeout\n    if (timeoutFunc != null) {\n      clearTimeout(timeoutFunc);\n    }\n    return result;\n  } catch (err) {\n    // clear the timeout\n    if (timeoutFunc != null) {\n      clearTimeout(timeoutFunc);\n    }\n    // rethrow the original error\n    throw err;\n  }\n};\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = lodash_merge__WEBPACK_IMPORTED_MODULE_1___default()(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    const responseContentType = response.headers.get(\"content-type\");\n    if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n      return response.json();\n    }\n    return response.text();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = lodash_merge__WEBPACK_IMPORTED_MODULE_1___default()(defaultOptions, options_, {\n    method: \"POST\"\n  });\n\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  return promiseTimeout(customOptions.timeout || 60000, fetchAndTrace(url, options).then(response => {\n    if (customOptions.logTracingHeader) {\n      logTracingHeader(response);\n    }\n    if (response.ok) {\n      const responseContentType = response.headers.get(\"content-type\");\n      if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n        return response.json();\n      }\n      return response.text();\n    }\n    debugLogResponse(response);\n    throw response;\n  }));\n};\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = lodash_merge__WEBPACK_IMPORTED_MODULE_1___default()(defaultOptions, options_, {\n    method: \"PATCH\"\n  });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    const responseContentType = response.headers.get(\"content-type\");\n    if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n      return response.json();\n    }\n    return response.text();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst put = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = lodash_merge__WEBPACK_IMPORTED_MODULE_1___default()(defaultOptions, options_, {\n    method: \"PUT\"\n  });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    const responseContentType = response.headers.get(\"content-type\");\n    if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n      return response.json();\n    }\n    return response.text();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = lodash_merge__WEBPACK_IMPORTED_MODULE_1___default()(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    const responseContentType = response.headers.get(\"content-type\");\n    if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n      return response.json();\n    }\n    return response.text();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((_resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decryptData: () => (/* binding */ decryptData),\n/* harmony export */   \"default\": () => (/* binding */ MetadataStorageLayer),\n/* harmony export */   ec: () => (/* binding */ ec),\n/* harmony export */   encParamsBufToHex: () => (/* binding */ encParamsBufToHex),\n/* harmony export */   encParamsHexToBuf: () => (/* binding */ encParamsHexToBuf),\n/* harmony export */   encryptAndSetData: () => (/* binding */ encryptAndSetData),\n/* harmony export */   encryptData: () => (/* binding */ encryptData),\n/* harmony export */   getAndDecryptData: () => (/* binding */ getAndDecryptData),\n/* harmony export */   getDeviceShare: () => (/* binding */ getDeviceShare),\n/* harmony export */   getTorusShare: () => (/* binding */ getTorusShare),\n/* harmony export */   keccak256: () => (/* binding */ keccak256),\n/* harmony export */   setDeviceShare: () => (/* binding */ setDeviceShare),\n/* harmony export */   setTorusShare: () => (/* binding */ setTorusShare)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n/* harmony import */ var json_stable_stringify__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! json-stable-stringify */ \"(ssr)/./node_modules/json-stable-stringify/index.js\");\n/* harmony import */ var json_stable_stringify__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(json_stable_stringify__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\");\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(elliptic__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var ethereum_cryptography_keccak__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ethereum-cryptography/keccak */ \"(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var _toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @toruslabs/eccrypto */ \"(ssr)/./node_modules/@toruslabs/eccrypto/dist/eccrypto.esm.js\");\n\n\n\n\n\n\n\n\nfunction keccak256(a) {\n  return Buffer.from((0,ethereum_cryptography_keccak__WEBPACK_IMPORTED_MODULE_5__.keccak256)(a));\n}\nconst ec = new elliptic__WEBPACK_IMPORTED_MODULE_4__.ec(\"secp256k1\");\n\nclass MetadataStorageLayer {\n  // ms\n\n  constructor() {\n    let metadataHost = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"https://metadata.tor.us\";\n    let serverTimeOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"metadataHost\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"serverTimeOffset\", void 0);\n    this.metadataHost = metadataHost;\n    this.serverTimeOffset = serverTimeOffset;\n  }\n  static setAPIKey(apiKey) {\n    (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_2__.setAPIKey)(apiKey);\n  }\n  static setEmbedHost(embedHost) {\n    (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_2__.setEmbedHost)(embedHost);\n  }\n  generateMetadataParams(message, privateKeyHex) {\n    var _sig$recoveryParam$to, _sig$recoveryParam;\n    const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n    const setData = {\n      data: message,\n      timestamp: Math.floor(this.serverTimeOffset + Date.now() / 1000).toString(16)\n    };\n    const sig = key.sign(keccak256(Buffer.from(json_stable_stringify__WEBPACK_IMPORTED_MODULE_3___default()(setData), \"utf8\")));\n    return {\n      pub_key_X: key.getPublic().getX().toString(16, 64),\n      pub_key_Y: key.getPublic().getY().toString(16, 64),\n      set_data: setData,\n      signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + ((_sig$recoveryParam$to = (_sig$recoveryParam = sig.recoveryParam) === null || _sig$recoveryParam === void 0 ? void 0 : _sig$recoveryParam.toString(16).padStart(2, \"0\").slice(-2)) !== null && _sig$recoveryParam$to !== void 0 ? _sig$recoveryParam$to : \"00\"), \"hex\").toString(\"base64\")\n    };\n  }\n  generatePubKeyParams(privateKeyHex) {\n    const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n    return {\n      pub_key_X: key.getPublic().getX().toString(16, 64),\n      pub_key_Y: key.getPublic().getY().toString(16, 64)\n    };\n  }\n  async setMetadata(data, namespace, options) {\n    const params = namespace !== null ? _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, data), {}, {\n      namespace\n    }) : data;\n    const metadataResponse = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_2__.post)(`${this.metadataHost}/set`, params, options, {\n      useAPIKey: true\n    });\n    return metadataResponse.message;\n  }\n  async getMetadata(pubKey, namespace, options) {\n    const params = namespace !== null ? _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, pubKey), {}, {\n      namespace\n    }) : pubKey;\n    const metadataResponse = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_2__.post)(`${this.metadataHost}/get`, params, options, {\n      useAPIKey: true\n    });\n    return metadataResponse.message;\n  }\n}\n\nconst WEBAUTHN_TORUS_SHARE = \"webauthn_torus_share\";\nconst WEBAUTHN_DEVICE_SHARE = \"webauthn_device_share\";\nfunction encParamsHexToBuf(encParamsHex) {\n  return {\n    iv: Buffer.from(encParamsHex.iv, \"hex\"),\n    ephemPublicKey: Buffer.from(encParamsHex.ephemPublicKey, \"hex\"),\n    ciphertext: Buffer.from(encParamsHex.ciphertext, \"hex\"),\n    mac: Buffer.from(encParamsHex.mac, \"hex\")\n  };\n}\nfunction encParamsBufToHex(encParams) {\n  return {\n    iv: Buffer.from(encParams.iv).toString(\"hex\"),\n    ephemPublicKey: Buffer.from(encParams.ephemPublicKey).toString(\"hex\"),\n    ciphertext: Buffer.from(encParams.ciphertext).toString(\"hex\"),\n    mac: Buffer.from(encParams.mac).toString(\"hex\")\n  };\n}\nasync function encryptData(privKeyHex, d) {\n  const serializedDec = JSON.stringify(d);\n  const serializedBuf = Buffer.from(serializedDec, \"utf-8\");\n  const encParams = await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_6__.encrypt)((0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_6__.getPublic)(Buffer.from(privKeyHex, \"hex\")), serializedBuf);\n  const encParamsHex = encParamsBufToHex(encParams);\n  const sData = JSON.stringify(encParamsHex);\n  return sData;\n}\nasync function decryptData(privKeyHex, d) {\n  const encParamsHex = JSON.parse(d);\n  const encParams = encParamsHexToBuf(encParamsHex);\n  const keyPair = ec.keyFromPrivate(privKeyHex);\n  const serializedBuf = await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_6__.decrypt)(Buffer.from(keyPair.getPrivate().toString(\"hex\", 64), \"hex\"), encParams);\n  const serializedDec = serializedBuf.toString(\"utf-8\");\n  const data = JSON.parse(serializedDec);\n  return data;\n}\nasync function getAndDecryptData(m, privKeyHex, namespace) {\n  const keyPair = ec.keyFromPrivate(privKeyHex, \"hex\");\n  const pubKey = keyPair.getPublic();\n  const serializedData = await m.getMetadata({\n    pub_key_X: pubKey.getX().toString(16, 64),\n    pub_key_Y: pubKey.getY().toString(16, 64)\n  }, namespace);\n  if (!serializedData) {\n    return null;\n  }\n  const data = await decryptData(privKeyHex, serializedData);\n  return data;\n}\nasync function encryptAndSetData(m, privKeyHex, d, namespace) {\n  const sData = await encryptData(privKeyHex, d);\n  const metadataParams = m.generateMetadataParams(sData, privKeyHex);\n  await m.setMetadata(metadataParams, namespace);\n}\nasync function setTorusShare(m, webAuthnPubKey, webAuthnRefHex, subspace, subspaceData) {\n  const refKeyPair = ec.keyFromPrivate(webAuthnRefHex);\n  const privKey = refKeyPair.getPrivate();\n  const pubKey = ec.keyFromPublic({\n    x: webAuthnPubKey.pub_key_X,\n    y: webAuthnPubKey.pub_key_Y\n  });\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n  let d = {};\n  if (data) d = data;\n  const serializedSubspaceData = JSON.stringify(subspaceData);\n  const serializedSubspaceDataBuf = Buffer.from(serializedSubspaceData, \"utf-8\");\n  const encSubspaceData = await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_6__.encrypt)(Buffer.from(pubKey.getPublic(\"hex\"), \"hex\"), serializedSubspaceDataBuf);\n  const encSubspaceDataHex = encParamsBufToHex(encSubspaceData);\n  d[subspace] = encSubspaceDataHex;\n  await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_TORUS_SHARE);\n}\nasync function setDeviceShare(m, webAuthnRefHex, subspace, subspaceData) {\n  const keyPair = ec.keyFromPrivate(webAuthnRefHex);\n  const privKey = keyPair.getPrivate();\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n  let d = {};\n  if (data) d = data;\n  d[subspace] = subspaceData;\n  await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_DEVICE_SHARE);\n}\nasync function getTorusShare(m, webAuthnKeyHex, webAuthnRefHex, subspace) {\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n  if (!data) return null;\n  const encParamsHex = data[subspace];\n  if (!encParamsHex) return null;\n  const encParams = encParamsHexToBuf(encParamsHex);\n  const keyPair = ec.keyFromPrivate(webAuthnKeyHex);\n  const privKey = keyPair.getPrivate();\n  const serializedSubspaceDataBuf = await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_6__.decrypt)(Buffer.from(privKey.toString(\"hex\", 64), \"hex\"), encParams);\n  const serializedSubspaceData = serializedSubspaceDataBuf.toString(\"utf-8\");\n  const subspaceData = JSON.parse(serializedSubspaceData);\n  return subspaceData;\n}\nasync function getDeviceShare(m, webAuthnRefHex, subspace) {\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n  if (data) return data[subspace];\n  return null;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePostMessageStream: () => (/* binding */ BasePostMessageStream),\n/* harmony export */   IGNORE_SUBSTREAM: () => (/* binding */ IGNORE_SUBSTREAM),\n/* harmony export */   JRPCEngine: () => (/* binding */ JRPCEngine),\n/* harmony export */   ObjectMultiplex: () => (/* binding */ ObjectMultiplex),\n/* harmony export */   PostMessageStream: () => (/* binding */ PostMessageStream),\n/* harmony export */   SafeEventEmitter: () => (/* binding */ SafeEventEmitter),\n/* harmony export */   SerializableError: () => (/* binding */ SerializableError),\n/* harmony export */   Substream: () => (/* binding */ Substream),\n/* harmony export */   createAsyncMiddleware: () => (/* binding */ createAsyncMiddleware),\n/* harmony export */   createEngineStream: () => (/* binding */ createEngineStream),\n/* harmony export */   createErrorMiddleware: () => (/* binding */ createErrorMiddleware),\n/* harmony export */   createIdRemapMiddleware: () => (/* binding */ createIdRemapMiddleware),\n/* harmony export */   createLoggerMiddleware: () => (/* binding */ createLoggerMiddleware),\n/* harmony export */   createScaffoldMiddleware: () => (/* binding */ createScaffoldMiddleware),\n/* harmony export */   createStreamMiddleware: () => (/* binding */ createStreamMiddleware),\n/* harmony export */   getRpcPromiseCallback: () => (/* binding */ getRpcPromiseCallback),\n/* harmony export */   mergeMiddleware: () => (/* binding */ mergeMiddleware),\n/* harmony export */   providerAsMiddleware: () => (/* binding */ providerAsMiddleware),\n/* harmony export */   providerFromEngine: () => (/* binding */ providerFromEngine),\n/* harmony export */   providerFromMiddleware: () => (/* binding */ providerFromMiddleware),\n/* harmony export */   setupMultiplex: () => (/* binding */ setupMultiplex)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var readable_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/lib/ours/index.js\");\n/* harmony import */ var readable_stream__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(readable_stream__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var fast_safe_stringify__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fast-safe-stringify */ \"(ssr)/./node_modules/fast-safe-stringify/index.js\");\n/* harmony import */ var fast_safe_stringify__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(fast_safe_stringify__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @metamask/rpc-errors */ \"(ssr)/./node_modules/@metamask/rpc-errors/dist/index.mjs\");\n/* harmony import */ var end_of_stream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! end-of-stream */ \"(ssr)/./node_modules/end-of-stream/index.js\");\n/* harmony import */ var end_of_stream__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(end_of_stream__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var once__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! once */ \"(ssr)/./node_modules/once/once.js\");\n/* harmony import */ var once__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(once__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! pump */ \"(ssr)/./node_modules/pump/index.js\");\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(pump__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\n\nfunction noop() {\n  return undefined;\n}\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\nclass BasePostMessageStream extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n  constructor(_ref) {\n    let {\n      name,\n      target,\n      targetWindow = window,\n      targetOrigin = \"*\"\n    } = _ref;\n    super({\n      objectMode: true\n    });\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_init\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_haveSyn\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_name\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_target\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_targetWindow\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_targetOrigin\", void 0);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_onMessage\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_synIntervalId\", void 0);\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n    window.addEventListener(\"message\", this._onMessage, false);\n    this._handShake();\n  }\n  _break() {\n    this.cork();\n    this._write(BRK, null, noop);\n    this._haveSyn = false;\n    this._init = false;\n  }\n  _handShake() {\n    this._write(SYN, null, noop);\n    this.cork();\n  }\n  _onData(data) {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n  _postMessage(data) {\n    const originConstraint = this._targetOrigin;\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n  onMessage(event) {\n    const message = event.data;\n\n    // validate message\n    if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n      return;\n    }\n    this._onData(message.data);\n  }\n  _read() {\n    return undefined;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _write(data, _, cb) {\n    this._postMessage(data);\n    cb();\n  }\n  _destroy() {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\nfunction arrayClone(arr) {\n  const n = arr.length;\n  const copy = new Array(n);\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n  return copy;\n}\nclass SafeEventEmitter extends events__WEBPACK_IMPORTED_MODULE_2__.EventEmitter {\n  emit(type) {\n    let doError = type === \"error\";\n    const events = this._events;\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    }\n\n    // If there is no 'error' event listener then throw.\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    if (doError) {\n      let er;\n      if (args.length > 0) {\n        [er] = args;\n      }\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      }\n      // At least give some kind of context to the user\n      const err = new Error(`Unhandled error.${er ? ` (${er.message})` : \"\"}`);\n      err.context = er;\n      throw err; // Unhandled 'error' event\n    }\n    const handler = events[type];\n    if (handler === undefined) {\n      return false;\n    }\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n    return true;\n  }\n}\n\nclass SerializableError extends Error {\n  constructor(_ref) {\n    let {\n      code,\n      message,\n      data\n    } = _ref;\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n    super(message);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"code\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"data\", void 0);\n    this.code = code;\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n  toString() {\n    return fast_safe_stringify__WEBPACK_IMPORTED_MODULE_3___default()({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack\n    });\n  }\n}\n\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\nfunction createErrorMiddleware(log) {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n      next(done => {\n        const {\n          error\n        } = res;\n        if (!error) {\n          return done();\n        }\n        log.error(`OpenLogin - RPC Error: ${error.message}`, error);\n        return done();\n      });\n    } catch (error) {\n      log.error(`OpenLogin - RPC Error thrown: ${error.message}`, error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\nfunction createStreamMiddleware() {\n  const idMap = {};\n  function readNoop() {\n    return false;\n  }\n  const events = new SafeEventEmitter();\n  function processResponse(res) {\n    const context = idMap[res.id];\n    if (!context) {\n      throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n    }\n    delete idMap[res.id];\n    // copy whole res onto original res\n    Object.assign(context.res, res);\n    // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n    setTimeout(context.end);\n  }\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n  function processMessage(res, _encoding, cb) {\n    let err;\n    try {\n      const isNotification = !res.id;\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    }\n    // continue processing stream\n    cb(err);\n  }\n  const stream = new readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n  const middleware = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req);\n    // register request on id map\n    idMap[req.id] = {\n      req,\n      res,\n      next,\n      end\n    };\n  };\n  return {\n    events,\n    middleware,\n    stream\n  };\n}\nfunction createScaffoldMiddleware(handlers) {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method];\n    // if no handler, return\n    if (handler === undefined) {\n      return next();\n    }\n    // if handler is fn, call as middleware\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    }\n    // if handler is some other value, use as result\n    res.result = handler;\n    return end();\n  };\n}\nfunction createIdRemapMiddleware() {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = Math.random().toString(36).slice(2);\n    req.id = newId;\n    res.id = newId;\n    next(done => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\nfunction createLoggerMiddleware(logger) {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise;\n    const nextPromise = new Promise(resolve => {\n      resolveNextPromise = resolve;\n    });\n    let returnHandlerCallback = null;\n    let nextWasCalled = false;\n\n    // This will be called by the consumer's async middleware.\n    const asyncNext = async () => {\n      nextWasCalled = true;\n\n      // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next(runReturnHandlersCallback => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n        returnHandlerCallback(null);\n      } else {\n        end(null);\n      }\n    } catch (err) {\n      const error = err;\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nclass JRPCEngine extends SafeEventEmitter {\n  constructor() {\n    super();\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_middleware\", void 0);\n    this._middleware = [];\n  }\n\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n  static async _runAllMiddleware(req, res, middlewareStack) {\n    const returnHandlers = [];\n    let error = null;\n    let isComplete = false;\n\n    // Go down stack of middleware, call and collect optional returnHandlers\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n      if (isComplete) {\n        break;\n      }\n    }\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * and a boolean indicating whether the request should end.\n   */\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n        if (error) {\n          if (Object.keys(error).includes(\"stack\") === false) error.stack = \"Stack trace is not available.\";\n          res.error = (0,_metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.serializeError)(error, {\n            shouldIncludeStack: true,\n            fallbackError: {\n              message: (error === null || error === void 0 ? void 0 : error.message) || (error === null || error === void 0 ? void 0 : error.toString()),\n              code: (error === null || error === void 0 ? void 0 : error.code) || -32603,\n              stack: error === null || error === void 0 ? void 0 : error.stack,\n              data: (error === null || error === void 0 ? void 0 : error.data) || (error === null || error === void 0 ? void 0 : error.message) || (error === null || error === void 0 ? void 0 : error.toString())\n            }\n          });\n        }\n        // True indicates that the request should end\n        resolve([error, true]);\n      };\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({\n                code: -32603,\n                message: \"JRPCEngine: 'next' return handlers must be functions\"\n              }));\n            }\n            returnHandlers.push(returnHandler);\n          }\n\n          // False indicates that the request should not end\n          resolve([null, false]);\n        }\n      };\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n  static async _runReturnHandlers(handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler(err => err ? reject(err) : resolve());\n      });\n    }\n  }\n\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n  static _checkForCompletion(_req, res, isComplete) {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Response has no error or result for request\"\n      });\n    }\n    if (!isComplete) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Nothing ended request\"\n      });\n    }\n  }\n\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n\n  /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @param callback - An error-first callback that will receive the response.\n   */\n\n  /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @param callback - An error-first callback that will receive the array of\n   * responses.\n   */\n\n  /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @returns A promise that resolves with the response, or rejects with an\n   * error.\n   */\n\n  /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @returns A promise that resolves with the array of responses, or rejects\n   * with an error.\n   */\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  handle(req, cb) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n      return this._handleBatch(req);\n    }\n    if (cb) {\n      return this._handle(req, cb);\n    }\n    return this._promiseHandle(req);\n  }\n\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n  asMiddleware() {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError);\n        }\n        return next(async handlerCallback => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n\n  /**\n   * Like _handle, but for batch requests.\n   */\n\n  /**\n   * Like _handle, but for batch requests.\n   */\n\n  async _handleBatch(reqs, cb) {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all(\n      // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this)));\n\n      // 3. Return batch response\n      if (cb) {\n        return cb(null, responses);\n      }\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * A promise-wrapped _handle.\n   */\n  _promiseHandle(req) {\n    return new Promise((resolve, reject) => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        if (_err && res === undefined) {\n          reject(_err);\n        } else resolve(res);\n      }).catch(reject);\n    });\n  }\n\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n  async _handle(callerReq, cb) {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"request must be plain object\"\n      });\n      return cb(error, {\n        id: undefined,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"method must be string\"\n      });\n      return cb(error, {\n        id: callerReq.id,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n    const req = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default()({}, callerReq);\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc\n    };\n    let error = null;\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n      if (!res.error) {\n        var _error2, _error3, _error4, _error5, _error6, _error7, _error8;\n        if (Object.keys(error).includes(\"stack\") === false) error.stack = \"Stack trace is not available.\";\n        res.error = (0,_metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.serializeError)(error, {\n          shouldIncludeStack: true,\n          fallbackError: {\n            message: ((_error2 = error) === null || _error2 === void 0 ? void 0 : _error2.message) || ((_error3 = error) === null || _error3 === void 0 ? void 0 : _error3.toString()),\n            code: ((_error4 = error) === null || _error4 === void 0 ? void 0 : _error4.code) || -32603,\n            stack: (_error5 = error) === null || _error5 === void 0 ? void 0 : _error5.stack,\n            data: ((_error6 = error) === null || _error6 === void 0 ? void 0 : _error6.data) || ((_error7 = error) === null || _error7 === void 0 ? void 0 : _error7.message) || ((_error8 = error) === null || _error8 === void 0 ? void 0 : _error8.toString())\n          }\n        });\n      }\n    }\n    return cb(error, res);\n  }\n\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n  async _processRequest(req, res) {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n    // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n    JRPCEngine._checkForCompletion(req, res, isComplete);\n\n    // The return handlers should run even if an error was encountered during\n    // middleware processing.\n    await JRPCEngine._runReturnHandlers(returnHandlers);\n\n    // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n    if (error) {\n      throw error;\n    }\n  }\n}\nfunction mergeMiddleware(middlewareStack) {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach(middleware => engine.push(middleware));\n  return engine.asMiddleware();\n}\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n  const {\n    engine\n  } = opts;\n  // eslint-disable-next-line prefer-const\n  let stream;\n  function read() {\n    return undefined;\n  }\n  function write(req, _encoding, cb) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n  stream = new readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex({\n    objectMode: true,\n    read,\n    write\n  });\n\n  // forward notifications\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      stream.push(message);\n    });\n  }\n  return stream;\n}\nfunction providerFromEngine(engine) {\n  const provider = new SafeEventEmitter();\n  // handle both rpc send methods\n  provider.sendAsync = async req => {\n    const res = await engine.handle(req);\n    if (res.error) {\n      var _res$error, _res$error2, _res$error3, _res$error4, _res$error5, _res$error6, _res$error7;\n      if (Object.keys(res.error).includes(\"stack\") === false) res.error.stack = \"Stack trace is not available.\";\n      const err = (0,_metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.serializeError)(res.error, {\n        fallbackError: {\n          message: ((_res$error = res.error) === null || _res$error === void 0 ? void 0 : _res$error.message) || ((_res$error2 = res.error) === null || _res$error2 === void 0 ? void 0 : _res$error2.toString()),\n          code: ((_res$error3 = res.error) === null || _res$error3 === void 0 ? void 0 : _res$error3.code) || -32603,\n          stack: (_res$error4 = res.error) === null || _res$error4 === void 0 ? void 0 : _res$error4.stack,\n          data: ((_res$error5 = res.error) === null || _res$error5 === void 0 ? void 0 : _res$error5.data) || ((_res$error6 = res.error) === null || _res$error6 === void 0 ? void 0 : _res$error6.message) || ((_res$error7 = res.error) === null || _res$error7 === void 0 ? void 0 : _res$error7.toString())\n        },\n        shouldIncludeStack: true\n      });\n      throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.internal(err);\n    }\n    return res.result;\n  };\n  provider.send = (req, callback) => {\n    if (typeof callback !== \"function\") {\n      throw new Error('Must provide callback to \"send\" method.');\n    }\n    engine.handle(req, callback);\n  };\n  // forward notifications\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      provider.emit(\"data\", null, message);\n    });\n  }\n  provider.request = async args => {\n    const req = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default()({}, args), {}, {\n      id: Math.random().toString(36).slice(2),\n      jsonrpc: \"2.0\"\n    });\n    const res = await provider.sendAsync(req);\n    return res;\n  };\n  return provider;\n}\nfunction providerFromMiddleware(middleware) {\n  const engine = new JRPCEngine();\n  engine.push(middleware);\n  const provider = providerFromEngine(engine);\n  return provider;\n}\nfunction providerAsMiddleware(provider) {\n  return async (req, res, _next, end) => {\n    // send request to provider\n    try {\n      const providerRes = await provider.sendAsync(req);\n      res.result = providerRes;\n      return end();\n    } catch (error) {\n      return end(error);\n    }\n  };\n}\n\nclass Substream extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n  constructor(_ref) {\n    let {\n      parent,\n      name\n    } = _ref;\n    super({\n      objectMode: true\n    });\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_parent\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_name\", void 0);\n    this._parent = parent;\n    this._name = name;\n  }\n\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n  _read() {\n    return undefined;\n  }\n\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n  _write(chunk, _encoding, callback) {\n    this._parent.push({\n      name: this._name,\n      data: chunk\n    });\n    callback();\n  }\n}\n\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\nclass ObjectMultiplex extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default()({}, opts), {}, {\n      objectMode: true\n    }));\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_substreams\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"getStream\", void 0);\n    this._substreams = {};\n  }\n  createStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n\n    // create substream\n    const substream = new Substream({\n      parent: this,\n      name\n    });\n    this._substreams[name] = substream;\n\n    // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    anyStreamEnd(this, _error => substream.destroy(_error || undefined));\n    return substream;\n  }\n\n  // ignore streams (dont display orphaned data warning)\n  ignoreStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n    // set\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n  _read() {\n    return undefined;\n  }\n  _write(chunk, _encoding, callback) {\n    const {\n      name,\n      data\n    } = chunk;\n    if (!name) {\n      window.console.warn(`ObjectMultiplex - malformed chunk without name \"${chunk}\"`);\n      return callback();\n    }\n\n    // get corresponding substream\n    const substream = this._substreams[name];\n    if (!substream) {\n      window.console.warn(`ObjectMultiplex - orphaned data for stream \"${name}\"`);\n      return callback();\n    }\n\n    // push data into substream\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n    return callback();\n  }\n}\n\n// util\nfunction anyStreamEnd(stream, _cb) {\n  const cb = once__WEBPACK_IMPORTED_MODULE_7___default()(_cb);\n  end_of_stream__WEBPACK_IMPORTED_MODULE_6___default()(stream, {\n    readable: false\n  }, cb);\n  end_of_stream__WEBPACK_IMPORTED_MODULE_6___default()(stream, {\n    writable: false\n  }, cb);\n}\nfunction setupMultiplex(stream) {\n  const mux = new ObjectMultiplex();\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n    return this.createStream(name);\n  };\n  pump__WEBPACK_IMPORTED_MODULE_8___default()(stream, mux, stream, err => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n\nclass PostMessageStream extends BasePostMessageStream {\n  _postMessage(data) {\n    let originConstraint = this._targetOrigin;\n    if (typeof data === \"object\") {\n      const dataObj = data;\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data;\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0];\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin;\n          }\n\n          // add a constraint for the response\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n}\n\n\n//# sourceMappingURL=openloginJrpc.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/openlogin-session-manager/dist/openloginSessionManager.esm.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@toruslabs/openlogin-session-manager/dist/openloginSessionManager.esm.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenloginSessionManager: () => (/* binding */ OpenloginSessionManager)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _toruslabs_base_session_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @toruslabs/base-session-manager */ \"(ssr)/./node_modules/@toruslabs/base-session-manager/dist/baseSessionManager.esm.js\");\n/* harmony import */ var _toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/eccrypto */ \"(ssr)/./node_modules/@toruslabs/eccrypto/dist/eccrypto.esm.js\");\n/* harmony import */ var _toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/metadata-helpers */ \"(ssr)/./node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js\");\n\n\n\n\n\nconst DEFAULT_SESSION_TIMEOUT = 86400;\nclass OpenloginSessionManager extends _toruslabs_base_session_manager__WEBPACK_IMPORTED_MODULE_1__.BaseSessionManager {\n  constructor() {\n    let {\n      sessionServerBaseUrl,\n      sessionNamespace,\n      sessionTime,\n      sessionId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"sessionServerBaseUrl\", \"https://session.web3auth.io\");\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"sessionNamespace\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"sessionTime\", DEFAULT_SESSION_TIMEOUT);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"sessionId\", \"\");\n    if (sessionServerBaseUrl) {\n      this.sessionServerBaseUrl = sessionServerBaseUrl;\n    }\n    if (sessionNamespace) this.sessionNamespace = sessionNamespace;\n    if (sessionTime) this.sessionTime = sessionTime;\n    if (sessionId) this.sessionId = sessionId.padStart(64, \"0\");\n  }\n  static generateRandomSessionKey() {\n    return (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__.generatePrivate)().toString(\"hex\").padStart(64, \"0\");\n  }\n  async createSession(data) {\n    super.checkSessionParams();\n    const privKey = Buffer.from(this.sessionId, \"hex\");\n    const pubKey = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__.getPublic)(privKey).toString(\"hex\");\n    const encData = await (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.encryptData)(this.sessionId, data);\n    const signature = (await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__.sign)(privKey, (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.keccak256)(Buffer.from(encData, \"utf8\")))).toString(\"hex\");\n    const body = {\n      key: pubKey,\n      data: encData,\n      signature,\n      namespace: this.sessionNamespace,\n      timeout: this.sessionTime\n    };\n    await super.request({\n      method: \"POST\",\n      url: `${this.sessionServerBaseUrl}/store/set`,\n      data: body\n    });\n    return this.sessionId;\n  }\n  async authorizeSession() {\n    super.checkSessionParams();\n    const pubkey = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__.getPublic)(Buffer.from(this.sessionId, \"hex\")).toString(\"hex\");\n    const url = new URL(`${this.sessionServerBaseUrl}/store/get`);\n    url.searchParams.append(\"key\", pubkey);\n    if (this.sessionNamespace) url.searchParams.append(\"namespace\", this.sessionNamespace);\n    const result = await super.request({\n      url: url.toString()\n    });\n    if (!result.message) {\n      throw new Error(\"Session Expired or Invalid public key\");\n    }\n    const response = await (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.decryptData)(this.sessionId, result.message);\n    if (response.error) {\n      throw new Error(\"There was an error decrypting data.\");\n    }\n    return response;\n  }\n  async updateSession(data) {\n    super.checkSessionParams();\n    const privKey = Buffer.from(this.sessionId, \"hex\");\n    const pubKey = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__.getPublic)(privKey).toString(\"hex\");\n    const encData = await (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.encryptData)(this.sessionId, data);\n    const signature = (await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__.sign)(privKey, (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.keccak256)(Buffer.from(encData, \"utf8\")))).toString(\"hex\");\n    const body = {\n      key: pubKey,\n      data: encData,\n      signature,\n      namespace: this.sessionNamespace\n    };\n    await super.request({\n      method: \"PUT\",\n      url: `${this.sessionServerBaseUrl}/store/update`,\n      data: body\n    });\n  }\n  async invalidateSession() {\n    super.checkSessionParams();\n    const privKey = Buffer.from(this.sessionId, \"hex\");\n    const pubKey = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__.getPublic)(privKey).toString(\"hex\");\n    const encData = await (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.encryptData)(this.sessionId, {});\n    const signature = (await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__.sign)(privKey, (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.keccak256)(Buffer.from(encData, \"utf8\")))).toString(\"hex\");\n    const data = {\n      key: pubKey,\n      data: encData,\n      signature,\n      namespace: this.sessionNamespace,\n      timeout: 1\n    };\n    await super.request({\n      method: \"POST\",\n      url: `${this.sessionServerBaseUrl}/store/set`,\n      data\n    });\n    this.sessionId = \"\";\n    return true;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9vcGVubG9naW4tc2Vzc2lvbi1tYW5hZ2VyL2Rpc3Qvb3BlbmxvZ2luU2Vzc2lvbk1hbmFnZXIuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFvRTtBQUNDO0FBQ0U7QUFDVzs7QUFFbEY7QUFDQSxzQ0FBc0MsK0VBQWtCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLElBQUksNEVBQWU7QUFDbkIsSUFBSSw0RUFBZTtBQUNuQixJQUFJLDRFQUFlO0FBQ25CLElBQUksNEVBQWU7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0VBQWU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsOERBQVM7QUFDNUIsMEJBQTBCLHdFQUFXO0FBQ3JDLDZCQUE2Qix5REFBSSxVQUFVLHNFQUFTO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsMEJBQTBCO0FBQ3hDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDhEQUFTO0FBQzVCLDJCQUEyQiwwQkFBMEI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLHdFQUFXO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsOERBQVM7QUFDNUIsMEJBQTBCLHdFQUFXO0FBQ3JDLDZCQUE2Qix5REFBSSxVQUFVLHNFQUFTO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDBCQUEwQjtBQUN4QztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiw4REFBUztBQUM1QiwwQkFBMEIsd0VBQVcsbUJBQW1CO0FBQ3hELDZCQUE2Qix5REFBSSxVQUFVLHNFQUFTO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsMEJBQTBCO0FBQ3hDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXdhbGxldC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL29wZW5sb2dpbi1zZXNzaW9uLW1hbmFnZXIvZGlzdC9vcGVubG9naW5TZXNzaW9uTWFuYWdlci5lc20uanM/NTk1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHknO1xuaW1wb3J0IHsgQmFzZVNlc3Npb25NYW5hZ2VyIH0gZnJvbSAnQHRvcnVzbGFicy9iYXNlLXNlc3Npb24tbWFuYWdlcic7XG5pbXBvcnQgeyBnZW5lcmF0ZVByaXZhdGUsIGdldFB1YmxpYywgc2lnbiB9IGZyb20gJ0B0b3J1c2xhYnMvZWNjcnlwdG8nO1xuaW1wb3J0IHsgZW5jcnlwdERhdGEsIGtlY2NhazI1NiwgZGVjcnlwdERhdGEgfSBmcm9tICdAdG9ydXNsYWJzL21ldGFkYXRhLWhlbHBlcnMnO1xuXG5jb25zdCBERUZBVUxUX1NFU1NJT05fVElNRU9VVCA9IDg2NDAwO1xuY2xhc3MgT3BlbmxvZ2luU2Vzc2lvbk1hbmFnZXIgZXh0ZW5kcyBCYXNlU2Vzc2lvbk1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBsZXQge1xuICAgICAgc2Vzc2lvblNlcnZlckJhc2VVcmwsXG4gICAgICBzZXNzaW9uTmFtZXNwYWNlLFxuICAgICAgc2Vzc2lvblRpbWUsXG4gICAgICBzZXNzaW9uSWRcbiAgICB9ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBzdXBlcigpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInNlc3Npb25TZXJ2ZXJCYXNlVXJsXCIsIFwiaHR0cHM6Ly9zZXNzaW9uLndlYjNhdXRoLmlvXCIpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInNlc3Npb25OYW1lc3BhY2VcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJzZXNzaW9uVGltZVwiLCBERUZBVUxUX1NFU1NJT05fVElNRU9VVCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwic2Vzc2lvbklkXCIsIFwiXCIpO1xuICAgIGlmIChzZXNzaW9uU2VydmVyQmFzZVVybCkge1xuICAgICAgdGhpcy5zZXNzaW9uU2VydmVyQmFzZVVybCA9IHNlc3Npb25TZXJ2ZXJCYXNlVXJsO1xuICAgIH1cbiAgICBpZiAoc2Vzc2lvbk5hbWVzcGFjZSkgdGhpcy5zZXNzaW9uTmFtZXNwYWNlID0gc2Vzc2lvbk5hbWVzcGFjZTtcbiAgICBpZiAoc2Vzc2lvblRpbWUpIHRoaXMuc2Vzc2lvblRpbWUgPSBzZXNzaW9uVGltZTtcbiAgICBpZiAoc2Vzc2lvbklkKSB0aGlzLnNlc3Npb25JZCA9IHNlc3Npb25JZC5wYWRTdGFydCg2NCwgXCIwXCIpO1xuICB9XG4gIHN0YXRpYyBnZW5lcmF0ZVJhbmRvbVNlc3Npb25LZXkoKSB7XG4gICAgcmV0dXJuIGdlbmVyYXRlUHJpdmF0ZSgpLnRvU3RyaW5nKFwiaGV4XCIpLnBhZFN0YXJ0KDY0LCBcIjBcIik7XG4gIH1cbiAgYXN5bmMgY3JlYXRlU2Vzc2lvbihkYXRhKSB7XG4gICAgc3VwZXIuY2hlY2tTZXNzaW9uUGFyYW1zKCk7XG4gICAgY29uc3QgcHJpdktleSA9IEJ1ZmZlci5mcm9tKHRoaXMuc2Vzc2lvbklkLCBcImhleFwiKTtcbiAgICBjb25zdCBwdWJLZXkgPSBnZXRQdWJsaWMocHJpdktleSkudG9TdHJpbmcoXCJoZXhcIik7XG4gICAgY29uc3QgZW5jRGF0YSA9IGF3YWl0IGVuY3J5cHREYXRhKHRoaXMuc2Vzc2lvbklkLCBkYXRhKTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSAoYXdhaXQgc2lnbihwcml2S2V5LCBrZWNjYWsyNTYoQnVmZmVyLmZyb20oZW5jRGF0YSwgXCJ1dGY4XCIpKSkpLnRvU3RyaW5nKFwiaGV4XCIpO1xuICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICBrZXk6IHB1YktleSxcbiAgICAgIGRhdGE6IGVuY0RhdGEsXG4gICAgICBzaWduYXR1cmUsXG4gICAgICBuYW1lc3BhY2U6IHRoaXMuc2Vzc2lvbk5hbWVzcGFjZSxcbiAgICAgIHRpbWVvdXQ6IHRoaXMuc2Vzc2lvblRpbWVcbiAgICB9O1xuICAgIGF3YWl0IHN1cGVyLnJlcXVlc3Qoe1xuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIHVybDogYCR7dGhpcy5zZXNzaW9uU2VydmVyQmFzZVVybH0vc3RvcmUvc2V0YCxcbiAgICAgIGRhdGE6IGJvZHlcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5zZXNzaW9uSWQ7XG4gIH1cbiAgYXN5bmMgYXV0aG9yaXplU2Vzc2lvbigpIHtcbiAgICBzdXBlci5jaGVja1Nlc3Npb25QYXJhbXMoKTtcbiAgICBjb25zdCBwdWJrZXkgPSBnZXRQdWJsaWMoQnVmZmVyLmZyb20odGhpcy5zZXNzaW9uSWQsIFwiaGV4XCIpKS50b1N0cmluZyhcImhleFwiKTtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGAke3RoaXMuc2Vzc2lvblNlcnZlckJhc2VVcmx9L3N0b3JlL2dldGApO1xuICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwia2V5XCIsIHB1YmtleSk7XG4gICAgaWYgKHRoaXMuc2Vzc2lvbk5hbWVzcGFjZSkgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJuYW1lc3BhY2VcIiwgdGhpcy5zZXNzaW9uTmFtZXNwYWNlKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdXBlci5yZXF1ZXN0KHtcbiAgICAgIHVybDogdXJsLnRvU3RyaW5nKClcbiAgICB9KTtcbiAgICBpZiAoIXJlc3VsdC5tZXNzYWdlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTZXNzaW9uIEV4cGlyZWQgb3IgSW52YWxpZCBwdWJsaWMga2V5XCIpO1xuICAgIH1cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGRlY3J5cHREYXRhKHRoaXMuc2Vzc2lvbklkLCByZXN1bHQubWVzc2FnZSk7XG4gICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGVyZSB3YXMgYW4gZXJyb3IgZGVjcnlwdGluZyBkYXRhLlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9XG4gIGFzeW5jIHVwZGF0ZVNlc3Npb24oZGF0YSkge1xuICAgIHN1cGVyLmNoZWNrU2Vzc2lvblBhcmFtcygpO1xuICAgIGNvbnN0IHByaXZLZXkgPSBCdWZmZXIuZnJvbSh0aGlzLnNlc3Npb25JZCwgXCJoZXhcIik7XG4gICAgY29uc3QgcHViS2V5ID0gZ2V0UHVibGljKHByaXZLZXkpLnRvU3RyaW5nKFwiaGV4XCIpO1xuICAgIGNvbnN0IGVuY0RhdGEgPSBhd2FpdCBlbmNyeXB0RGF0YSh0aGlzLnNlc3Npb25JZCwgZGF0YSk7XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gKGF3YWl0IHNpZ24ocHJpdktleSwga2VjY2FrMjU2KEJ1ZmZlci5mcm9tKGVuY0RhdGEsIFwidXRmOFwiKSkpKS50b1N0cmluZyhcImhleFwiKTtcbiAgICBjb25zdCBib2R5ID0ge1xuICAgICAga2V5OiBwdWJLZXksXG4gICAgICBkYXRhOiBlbmNEYXRhLFxuICAgICAgc2lnbmF0dXJlLFxuICAgICAgbmFtZXNwYWNlOiB0aGlzLnNlc3Npb25OYW1lc3BhY2VcbiAgICB9O1xuICAgIGF3YWl0IHN1cGVyLnJlcXVlc3Qoe1xuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgdXJsOiBgJHt0aGlzLnNlc3Npb25TZXJ2ZXJCYXNlVXJsfS9zdG9yZS91cGRhdGVgLFxuICAgICAgZGF0YTogYm9keVxuICAgIH0pO1xuICB9XG4gIGFzeW5jIGludmFsaWRhdGVTZXNzaW9uKCkge1xuICAgIHN1cGVyLmNoZWNrU2Vzc2lvblBhcmFtcygpO1xuICAgIGNvbnN0IHByaXZLZXkgPSBCdWZmZXIuZnJvbSh0aGlzLnNlc3Npb25JZCwgXCJoZXhcIik7XG4gICAgY29uc3QgcHViS2V5ID0gZ2V0UHVibGljKHByaXZLZXkpLnRvU3RyaW5nKFwiaGV4XCIpO1xuICAgIGNvbnN0IGVuY0RhdGEgPSBhd2FpdCBlbmNyeXB0RGF0YSh0aGlzLnNlc3Npb25JZCwge30pO1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IChhd2FpdCBzaWduKHByaXZLZXksIGtlY2NhazI1NihCdWZmZXIuZnJvbShlbmNEYXRhLCBcInV0ZjhcIikpKSkudG9TdHJpbmcoXCJoZXhcIik7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIGtleTogcHViS2V5LFxuICAgICAgZGF0YTogZW5jRGF0YSxcbiAgICAgIHNpZ25hdHVyZSxcbiAgICAgIG5hbWVzcGFjZTogdGhpcy5zZXNzaW9uTmFtZXNwYWNlLFxuICAgICAgdGltZW91dDogMVxuICAgIH07XG4gICAgYXdhaXQgc3VwZXIucmVxdWVzdCh7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgdXJsOiBgJHt0aGlzLnNlc3Npb25TZXJ2ZXJCYXNlVXJsfS9zdG9yZS9zZXRgLFxuICAgICAgZGF0YVxuICAgIH0pO1xuICAgIHRoaXMuc2Vzc2lvbklkID0gXCJcIjtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgeyBPcGVubG9naW5TZXNzaW9uTWFuYWdlciB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/openlogin-session-manager/dist/openloginSessionManager.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/openlogin-subkey/dist/openloginSubkey.esm.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@toruslabs/openlogin-subkey/dist/openloginSubkey.esm.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SECP256K1_CURVE_N: () => (/* binding */ SECP256K1_CURVE_N),\n/* harmony export */   mimcGetConstants: () => (/* binding */ mimcGetConstants),\n/* harmony export */   mimcHash: () => (/* binding */ mimcHash),\n/* harmony export */   mimcMultiHash: () => (/* binding */ mimcMultiHash),\n/* harmony export */   mimgGetIV: () => (/* binding */ mimgGetIV),\n/* harmony export */   subkey: () => (/* binding */ subkey)\n/* harmony export */ });\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _toruslabs_ffjavascript__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @toruslabs/ffjavascript */ \"(ssr)/./node_modules/@toruslabs/ffjavascript/build/main.esm.js\");\n/* harmony import */ var _toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/metadata-helpers */ \"(ssr)/./node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js\");\n\n\n\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable camelcase */\nconst F = new _toruslabs_ffjavascript__WEBPACK_IMPORTED_MODULE_1__.ZqField(_toruslabs_ffjavascript__WEBPACK_IMPORTED_MODULE_1__.Scalar.fromString(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\"));\nconst SEED = \"mimcsponge\";\nconst NROUNDS = 220;\nfunction keccak256Padded(str) {\n  let finalInput = Buffer.from(str, \"utf8\");\n  if (typeof str === \"string\" && str.slice(0, 2) === \"0x\" && str.length === 66) {\n    finalInput = Buffer.from(str.slice(2), \"hex\");\n  }\n  return `0x${(0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_2__.keccak256)(finalInput).toString(\"hex\").padStart(64, \"0\")}`;\n}\nfunction mimgGetIV(seed) {\n  let _seed = seed;\n  if (typeof _seed === \"undefined\") _seed = SEED;\n  const c = keccak256Padded(`${_seed}_iv`);\n  const cn = _toruslabs_ffjavascript__WEBPACK_IMPORTED_MODULE_1__.Scalar.fromString(new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(c, 16).toString());\n  const iv = cn.mod(F.p);\n  return iv;\n}\nfunction mimcGetConstants(seed, nRounds) {\n  let _nRounds = nRounds;\n  if (typeof nRounds === \"undefined\") _nRounds = NROUNDS;\n  const cts = new Array(_nRounds);\n  let c = keccak256Padded(SEED);\n  for (let i = 1; i < _nRounds; i += 1) {\n    c = keccak256Padded(c);\n    const n1 = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(c.slice(2), 16).mod(new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(F.p.toString()));\n    const c2 = n1.toString(16, 64);\n    cts[i] = F.e(new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(c2, 16).toString());\n  }\n  cts[0] = F.e(0);\n  cts[cts.length - 1] = F.e(0);\n  return cts;\n}\nconst cts = mimcGetConstants(SEED, NROUNDS);\nfunction mimcHash(_xL_in, _xR_in, _k) {\n  let xL = F.e(_xL_in);\n  let xR = F.e(_xR_in);\n  const k = F.e(_k);\n  for (let i = 0; i < NROUNDS; i += 1) {\n    const c = cts[i];\n    const t = i === 0 ? F.add(xL, k) : F.add(F.add(xL, k), c);\n    const xR_tmp = F.e(xR);\n    if (i < NROUNDS - 1) {\n      xR = xL;\n      xL = F.add(xR_tmp, F.pow(t, 5));\n    } else {\n      xR = F.add(xR_tmp, F.pow(t, 5));\n    }\n  }\n  return {\n    xL: F.normalize(xL),\n    xR: F.normalize(xR)\n  };\n}\nfunction mimcMultiHash(arr, key, numOutputs) {\n  let _key = key;\n  let _numOutputs = numOutputs;\n  if (typeof _numOutputs === \"undefined\") {\n    _numOutputs = 1;\n  }\n  if (typeof _key === \"undefined\") {\n    _key = F.zero;\n  }\n  let R = F.zero;\n  let C = F.zero;\n  for (let i = 0; i < arr.length; i += 1) {\n    R = F.add(R, F.e(arr[i]));\n    const S = mimcHash(R, C, _key);\n    R = S.xL;\n    C = S.xR;\n  }\n  const outputs = [R];\n  for (let i = 1; i < _numOutputs; i += 1) {\n    const S = mimcHash(R, C, _key);\n    R = S.xL;\n    C = S.xR;\n    outputs.push(R);\n  }\n  if (_numOutputs === 1) {\n    return F.normalize(outputs[0]);\n  }\n  return outputs.map(x => F.normalize(x));\n}\n\nconst SECP256K1_CURVE_N = \"fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\";\n\n// creates sub-keys via MiMC hash, output keys are not padded\nfunction subkey(keyHex, input) {\n  const privKeyBuf = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(keyHex, \"hex\").toString(10);\n  // TODO: check against existing usage of mimc\n  // TODO: check that MPC is possible with mimc, with tests\n  const inputPath = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(input).umod(new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(SECP256K1_CURVE_N, \"hex\")).toString(10);\n  const output = mimcHash(1, privKeyBuf, inputPath);\n  return output.xL.toString(16);\n}\n\n\n//# sourceMappingURL=openloginSubkey.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9vcGVubG9naW4tc3Via2V5L2Rpc3Qvb3BlbmxvZ2luU3Via2V5LmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQXVCO0FBQ21DO0FBQ0Y7O0FBRXhEO0FBQ0E7QUFDQSxjQUFjLDREQUFPLENBQUMsMkRBQU07QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHNFQUFTLCtDQUErQztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixNQUFNO0FBQ3JDLGFBQWEsMkRBQU0sZ0JBQWdCLDhDQUFFO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsY0FBYztBQUNoQztBQUNBLG1CQUFtQiw4Q0FBRSx5QkFBeUIsOENBQUU7QUFDaEQ7QUFDQSxxQkFBcUIsOENBQUU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsYUFBYTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLHlCQUF5Qiw4Q0FBRTtBQUMzQjtBQUNBO0FBQ0Esd0JBQXdCLDhDQUFFLGlCQUFpQiw4Q0FBRTtBQUM3QztBQUNBO0FBQ0E7O0FBRTJGO0FBQzNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0Ly4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvb3BlbmxvZ2luLXN1YmtleS9kaXN0L29wZW5sb2dpblN1YmtleS5lc20uanM/MzY5YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQk4gZnJvbSAnYm4uanMnO1xuaW1wb3J0IHsgWnFGaWVsZCwgU2NhbGFyIH0gZnJvbSAnQHRvcnVzbGFicy9mZmphdmFzY3JpcHQnO1xuaW1wb3J0IHsga2VjY2FrMjU2IH0gZnJvbSAnQHRvcnVzbGFicy9tZXRhZGF0YS1oZWxwZXJzJztcblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXG5jb25zdCBGID0gbmV3IFpxRmllbGQoU2NhbGFyLmZyb21TdHJpbmcoXCIyMTg4ODI0Mjg3MTgzOTI3NTIyMjI0NjQwNTc0NTI1NzI3NTA4ODU0ODM2NDQwMDQxNjAzNDM0MzY5ODIwNDE4NjU3NTgwODQ5NTYxN1wiKSk7XG5jb25zdCBTRUVEID0gXCJtaW1jc3BvbmdlXCI7XG5jb25zdCBOUk9VTkRTID0gMjIwO1xuZnVuY3Rpb24ga2VjY2FrMjU2UGFkZGVkKHN0cikge1xuICBsZXQgZmluYWxJbnB1dCA9IEJ1ZmZlci5mcm9tKHN0ciwgXCJ1dGY4XCIpO1xuICBpZiAodHlwZW9mIHN0ciA9PT0gXCJzdHJpbmdcIiAmJiBzdHIuc2xpY2UoMCwgMikgPT09IFwiMHhcIiAmJiBzdHIubGVuZ3RoID09PSA2Nikge1xuICAgIGZpbmFsSW5wdXQgPSBCdWZmZXIuZnJvbShzdHIuc2xpY2UoMiksIFwiaGV4XCIpO1xuICB9XG4gIHJldHVybiBgMHgke2tlY2NhazI1NihmaW5hbElucHV0KS50b1N0cmluZyhcImhleFwiKS5wYWRTdGFydCg2NCwgXCIwXCIpfWA7XG59XG5mdW5jdGlvbiBtaW1nR2V0SVYoc2VlZCkge1xuICBsZXQgX3NlZWQgPSBzZWVkO1xuICBpZiAodHlwZW9mIF9zZWVkID09PSBcInVuZGVmaW5lZFwiKSBfc2VlZCA9IFNFRUQ7XG4gIGNvbnN0IGMgPSBrZWNjYWsyNTZQYWRkZWQoYCR7X3NlZWR9X2l2YCk7XG4gIGNvbnN0IGNuID0gU2NhbGFyLmZyb21TdHJpbmcobmV3IEJOKGMsIDE2KS50b1N0cmluZygpKTtcbiAgY29uc3QgaXYgPSBjbi5tb2QoRi5wKTtcbiAgcmV0dXJuIGl2O1xufVxuZnVuY3Rpb24gbWltY0dldENvbnN0YW50cyhzZWVkLCBuUm91bmRzKSB7XG4gIGxldCBfblJvdW5kcyA9IG5Sb3VuZHM7XG4gIGlmICh0eXBlb2YgblJvdW5kcyA9PT0gXCJ1bmRlZmluZWRcIikgX25Sb3VuZHMgPSBOUk9VTkRTO1xuICBjb25zdCBjdHMgPSBuZXcgQXJyYXkoX25Sb3VuZHMpO1xuICBsZXQgYyA9IGtlY2NhazI1NlBhZGRlZChTRUVEKTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBfblJvdW5kczsgaSArPSAxKSB7XG4gICAgYyA9IGtlY2NhazI1NlBhZGRlZChjKTtcbiAgICBjb25zdCBuMSA9IG5ldyBCTihjLnNsaWNlKDIpLCAxNikubW9kKG5ldyBCTihGLnAudG9TdHJpbmcoKSkpO1xuICAgIGNvbnN0IGMyID0gbjEudG9TdHJpbmcoMTYsIDY0KTtcbiAgICBjdHNbaV0gPSBGLmUobmV3IEJOKGMyLCAxNikudG9TdHJpbmcoKSk7XG4gIH1cbiAgY3RzWzBdID0gRi5lKDApO1xuICBjdHNbY3RzLmxlbmd0aCAtIDFdID0gRi5lKDApO1xuICByZXR1cm4gY3RzO1xufVxuY29uc3QgY3RzID0gbWltY0dldENvbnN0YW50cyhTRUVELCBOUk9VTkRTKTtcbmZ1bmN0aW9uIG1pbWNIYXNoKF94TF9pbiwgX3hSX2luLCBfaykge1xuICBsZXQgeEwgPSBGLmUoX3hMX2luKTtcbiAgbGV0IHhSID0gRi5lKF94Ul9pbik7XG4gIGNvbnN0IGsgPSBGLmUoX2spO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IE5ST1VORFM7IGkgKz0gMSkge1xuICAgIGNvbnN0IGMgPSBjdHNbaV07XG4gICAgY29uc3QgdCA9IGkgPT09IDAgPyBGLmFkZCh4TCwgaykgOiBGLmFkZChGLmFkZCh4TCwgayksIGMpO1xuICAgIGNvbnN0IHhSX3RtcCA9IEYuZSh4Uik7XG4gICAgaWYgKGkgPCBOUk9VTkRTIC0gMSkge1xuICAgICAgeFIgPSB4TDtcbiAgICAgIHhMID0gRi5hZGQoeFJfdG1wLCBGLnBvdyh0LCA1KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHhSID0gRi5hZGQoeFJfdG1wLCBGLnBvdyh0LCA1KSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgeEw6IEYubm9ybWFsaXplKHhMKSxcbiAgICB4UjogRi5ub3JtYWxpemUoeFIpXG4gIH07XG59XG5mdW5jdGlvbiBtaW1jTXVsdGlIYXNoKGFyciwga2V5LCBudW1PdXRwdXRzKSB7XG4gIGxldCBfa2V5ID0ga2V5O1xuICBsZXQgX251bU91dHB1dHMgPSBudW1PdXRwdXRzO1xuICBpZiAodHlwZW9mIF9udW1PdXRwdXRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgX251bU91dHB1dHMgPSAxO1xuICB9XG4gIGlmICh0eXBlb2YgX2tleSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIF9rZXkgPSBGLnplcm87XG4gIH1cbiAgbGV0IFIgPSBGLnplcm87XG4gIGxldCBDID0gRi56ZXJvO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkgKz0gMSkge1xuICAgIFIgPSBGLmFkZChSLCBGLmUoYXJyW2ldKSk7XG4gICAgY29uc3QgUyA9IG1pbWNIYXNoKFIsIEMsIF9rZXkpO1xuICAgIFIgPSBTLnhMO1xuICAgIEMgPSBTLnhSO1xuICB9XG4gIGNvbnN0IG91dHB1dHMgPSBbUl07XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgX251bU91dHB1dHM7IGkgKz0gMSkge1xuICAgIGNvbnN0IFMgPSBtaW1jSGFzaChSLCBDLCBfa2V5KTtcbiAgICBSID0gUy54TDtcbiAgICBDID0gUy54UjtcbiAgICBvdXRwdXRzLnB1c2goUik7XG4gIH1cbiAgaWYgKF9udW1PdXRwdXRzID09PSAxKSB7XG4gICAgcmV0dXJuIEYubm9ybWFsaXplKG91dHB1dHNbMF0pO1xuICB9XG4gIHJldHVybiBvdXRwdXRzLm1hcCh4ID0+IEYubm9ybWFsaXplKHgpKTtcbn1cblxuY29uc3QgU0VDUDI1NksxX0NVUlZFX04gPSBcImZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlYmFhZWRjZTZhZjQ4YTAzYmJmZDI1ZThjZDAzNjQxNDFcIjtcblxuLy8gY3JlYXRlcyBzdWIta2V5cyB2aWEgTWlNQyBoYXNoLCBvdXRwdXQga2V5cyBhcmUgbm90IHBhZGRlZFxuZnVuY3Rpb24gc3Via2V5KGtleUhleCwgaW5wdXQpIHtcbiAgY29uc3QgcHJpdktleUJ1ZiA9IG5ldyBCTihrZXlIZXgsIFwiaGV4XCIpLnRvU3RyaW5nKDEwKTtcbiAgLy8gVE9ETzogY2hlY2sgYWdhaW5zdCBleGlzdGluZyB1c2FnZSBvZiBtaW1jXG4gIC8vIFRPRE86IGNoZWNrIHRoYXQgTVBDIGlzIHBvc3NpYmxlIHdpdGggbWltYywgd2l0aCB0ZXN0c1xuICBjb25zdCBpbnB1dFBhdGggPSBuZXcgQk4oaW5wdXQpLnVtb2QobmV3IEJOKFNFQ1AyNTZLMV9DVVJWRV9OLCBcImhleFwiKSkudG9TdHJpbmcoMTApO1xuICBjb25zdCBvdXRwdXQgPSBtaW1jSGFzaCgxLCBwcml2S2V5QnVmLCBpbnB1dFBhdGgpO1xuICByZXR1cm4gb3V0cHV0LnhMLnRvU3RyaW5nKDE2KTtcbn1cblxuZXhwb3J0IHsgU0VDUDI1NksxX0NVUlZFX04sIG1pbWNHZXRDb25zdGFudHMsIG1pbWNIYXNoLCBtaW1jTXVsdGlIYXNoLCBtaW1nR2V0SVYsIHN1YmtleSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3BlbmxvZ2luU3Via2V5LmVzbS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/openlogin-subkey/dist/openloginSubkey.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUILD_ENV: () => (/* binding */ BUILD_ENV),\n/* harmony export */   BrowserStorage: () => (/* binding */ BrowserStorage),\n/* harmony export */   LANGUAGES: () => (/* binding */ LANGUAGES),\n/* harmony export */   LOGIN_PROVIDER: () => (/* binding */ LOGIN_PROVIDER),\n/* harmony export */   MFA_FACTOR: () => (/* binding */ MFA_FACTOR),\n/* harmony export */   MFA_LEVELS: () => (/* binding */ MFA_LEVELS),\n/* harmony export */   MemoryStore: () => (/* binding */ MemoryStore),\n/* harmony export */   OPENLOGIN_ACTIONS: () => (/* binding */ OPENLOGIN_ACTIONS),\n/* harmony export */   OPENLOGIN_NETWORK: () => (/* binding */ OPENLOGIN_NETWORK),\n/* harmony export */   SUPPORTED_KEY_CURVES: () => (/* binding */ SUPPORTED_KEY_CURVES),\n/* harmony export */   THEME_MODES: () => (/* binding */ THEME_MODES),\n/* harmony export */   TORUS_LEGACY_NETWORK: () => (/* reexport safe */ _toruslabs_constants__WEBPACK_IMPORTED_MODULE_3__.TORUS_LEGACY_NETWORK),\n/* harmony export */   TORUS_SAPPHIRE_NETWORK: () => (/* reexport safe */ _toruslabs_constants__WEBPACK_IMPORTED_MODULE_3__.TORUS_SAPPHIRE_NETWORK),\n/* harmony export */   UX_MODE: () => (/* binding */ UX_MODE),\n/* harmony export */   base64toJSON: () => (/* binding */ base64toJSON),\n/* harmony export */   base64url: () => (/* binding */ base64url),\n/* harmony export */   jsonToBase64: () => (/* binding */ jsonToBase64),\n/* harmony export */   safeatob: () => (/* binding */ safeatob),\n/* harmony export */   safebtoa: () => (/* binding */ safebtoa),\n/* harmony export */   storageAvailable: () => (/* binding */ storageAvailable),\n/* harmony export */   storeKey: () => (/* binding */ storeKey)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var base64url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! base64url */ \"(ssr)/./node_modules/base64url/index.js\");\n/* harmony import */ var base64url__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(base64url__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _toruslabs_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/constants */ \"(ssr)/./node_modules/@toruslabs/constants/dist/constants.esm.js\");\n\n\n\n\n\n\nconst base64url = (base64url__WEBPACK_IMPORTED_MODULE_1___default());\nfunction safebtoa(str) {\n  return base64url.encode(str);\n}\nfunction safeatob(str) {\n  // Going backwards: from bytestream, to percent-encoding, to original string.\n  return base64url.decode(str);\n}\nfunction base64toJSON(b64str) {\n  return JSON.parse(base64url.decode(b64str));\n}\nfunction jsonToBase64(json) {\n  return base64url.encode(JSON.stringify(json));\n}\nfunction storageAvailable(type) {\n  let storageExists = false;\n  let storageLength = 0;\n  let storage;\n  try {\n    storage = window[type];\n    storageExists = true;\n    storageLength = storage.length;\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (err) {\n    const error = err;\n    return error && (\n    // everything except Firefox\n    error.code === 22 ||\n    // Firefox\n    error.code === 1014 ||\n    // test name field too, because code might not be present\n    // everything except Firefox\n    error.name === \"QuotaExceededError\" ||\n    // Firefox\n    error.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n    // acknowledge QuotaExceededError only if there's something already stored\n    storageExists && storageLength !== 0;\n  }\n}\n\nclass MemoryStore {\n  constructor() {\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"store\", new Map());\n  }\n  getItem(key) {\n    return this.store.get(key) || null;\n  }\n  setItem(key, value) {\n    this.store.set(key, value);\n  }\n  removeItem(key) {\n    this.store.delete(key);\n  }\n}\nclass BrowserStorage {\n  constructor(storeKey, storage) {\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"storage\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_storeKey\", void 0);\n    this.storage = storage;\n    this._storeKey = storeKey;\n    try {\n      if (!storage.getItem(storeKey)) {\n        this.resetStore();\n      }\n    } catch (error) {\n      // Storage is not available\n    }\n  }\n  static getInstance(key) {\n    let storageKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"local\";\n    if (!this.instanceMap.has(key)) {\n      let storage;\n      if (storageKey === \"local\" && storageAvailable(\"localStorage\")) {\n        storage = window.localStorage;\n      } else if (storageKey === \"session\" && storageAvailable(\"sessionStorage\")) {\n        storage = window.sessionStorage;\n      } else {\n        storage = new MemoryStore();\n      }\n      this.instanceMap.set(key, new this(key, storage));\n    }\n    return this.instanceMap.get(key);\n  }\n  toJSON() {\n    return this.storage.getItem(this._storeKey);\n  }\n  resetStore() {\n    const currStore = this.getStore();\n    this.storage.removeItem(this._storeKey);\n    return currStore;\n  }\n  getStore() {\n    return JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n  }\n  get(key) {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    return store[key];\n  }\n  set(key, value) {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    store[key] = value;\n    this.storage.setItem(this._storeKey, JSON.stringify(store));\n  }\n}\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(BrowserStorage, \"instanceMap\", new Map());\n\nconst storeKey = \"openlogin_store\";\nconst UX_MODE = {\n  POPUP: \"popup\",\n  REDIRECT: \"redirect\"\n};\nconst OPENLOGIN_NETWORK = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2___default()({}, _toruslabs_constants__WEBPACK_IMPORTED_MODULE_3__.TORUS_SAPPHIRE_NETWORK), _toruslabs_constants__WEBPACK_IMPORTED_MODULE_3__.TORUS_LEGACY_NETWORK);\nconst SUPPORTED_KEY_CURVES = {\n  SECP256K1: \"secp256k1\",\n  ED25519: \"ed25519\"\n};\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\",\n  SMS_PASSWORDLESS: \"sms_passwordless\",\n  WEBAUTHN: \"webauthn\",\n  JWT: \"jwt\"\n};\nconst MFA_LEVELS = {\n  DEFAULT: \"default\",\n  OPTIONAL: \"optional\",\n  MANDATORY: \"mandatory\",\n  NONE: \"none\"\n};\nconst OPENLOGIN_ACTIONS = {\n  LOGIN: \"login\",\n  ENABLE_MFA: \"enable_mfa\",\n  MANAGE_MFA: \"manage_mfa\",\n  MODIFY_SOCIAL_FACTOR: \"modify_social_factor\"\n};\nconst BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  STAGING: \"staging\",\n  TESTING: \"testing\"\n};\n\n/**\n * {@label loginProviderType}\n */\n\n// autocomplete workaround https://github.com/microsoft/TypeScript/issues/29729\n\nconst LANGUAGES = {\n  en: \"en\",\n  ja: \"ja\",\n  ko: \"ko\",\n  de: \"de\",\n  zh: \"zh\",\n  es: \"es\",\n  fr: \"fr\",\n  pt: \"pt\",\n  nl: \"nl\",\n  tr: \"tr\"\n};\nconst THEME_MODES = {\n  light: \"light\",\n  dark: \"dark\",\n  auto: \"auto\"\n};\nconst MFA_FACTOR = {\n  DEVICE: \"deviceShareFactor\",\n  BACKUP_SHARE: \"backUpShareFactor\",\n  SOCIAL_BACKUP: \"socialBackupFactor\",\n  PASSWORD: \"passwordFactor\",\n  AUTHENTICATOR: \"authenticatorFactor\"\n};\n\n\n//# sourceMappingURL=openloginUtils.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/torus.js/dist/torusUtils.esm.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@toruslabs/torus.js/dist/torusUtils.esm.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GetOrSetNonceError: () => (/* binding */ GetOrSetNonceError),\n/* harmony export */   GetPubKeyOrKeyAssign: () => (/* binding */ GetPubKeyOrKeyAssign),\n/* harmony export */   JRPC_METHODS: () => (/* binding */ JRPC_METHODS),\n/* harmony export */   Point: () => (/* binding */ Point),\n/* harmony export */   Polynomial: () => (/* binding */ Polynomial),\n/* harmony export */   Share: () => (/* binding */ Share),\n/* harmony export */   calculateMedian: () => (/* binding */ calculateMedian),\n/* harmony export */   convertMetadataToNonce: () => (/* binding */ convertMetadataToNonce),\n/* harmony export */   decryptNodeData: () => (/* binding */ decryptNodeData),\n/* harmony export */   \"default\": () => (/* binding */ Torus),\n/* harmony export */   encParamsBufToHex: () => (/* binding */ encParamsBufToHex),\n/* harmony export */   encParamsHexToBuf: () => (/* binding */ encParamsHexToBuf),\n/* harmony export */   generateAddressFromPrivKey: () => (/* binding */ generateAddressFromPrivKey),\n/* harmony export */   generateAddressFromPubKey: () => (/* binding */ generateAddressFromPubKey),\n/* harmony export */   generateMetadataParams: () => (/* binding */ generateMetadataParams),\n/* harmony export */   generateRandomPolynomial: () => (/* binding */ generateRandomPolynomial),\n/* harmony export */   getMetadata: () => (/* binding */ getMetadata),\n/* harmony export */   getNonce: () => (/* binding */ getNonce),\n/* harmony export */   getOrSetNonce: () => (/* binding */ getOrSetNonce),\n/* harmony export */   getPostboxKeyFrom1OutOf1: () => (/* binding */ getPostboxKeyFrom1OutOf1),\n/* harmony export */   kCombinations: () => (/* binding */ kCombinations),\n/* harmony export */   keccak256: () => (/* binding */ keccak256),\n/* harmony export */   lagrangeInterpolatePolynomial: () => (/* binding */ lagrangeInterpolatePolynomial),\n/* harmony export */   lagrangeInterpolation: () => (/* binding */ lagrangeInterpolation),\n/* harmony export */   legacyKeyAssign: () => (/* binding */ legacyKeyAssign),\n/* harmony export */   legacyKeyLookup: () => (/* binding */ legacyKeyLookup),\n/* harmony export */   legacyWaitKeyLookup: () => (/* binding */ legacyWaitKeyLookup),\n/* harmony export */   normalizeKeysResult: () => (/* binding */ normalizeKeysResult),\n/* harmony export */   normalizeLegacyKeysResult: () => (/* binding */ normalizeLegacyKeysResult),\n/* harmony export */   retrieveOrImportShare: () => (/* binding */ retrieveOrImportShare),\n/* harmony export */   stripHexPrefix: () => (/* binding */ stripHexPrefix),\n/* harmony export */   thresholdSame: () => (/* binding */ thresholdSame),\n/* harmony export */   toChecksumAddress: () => (/* binding */ toChecksumAddress)\n/* harmony export */ });\n/* harmony import */ var json_stable_stringify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! json-stable-stringify */ \"(ssr)/./node_modules/json-stable-stringify/index.js\");\n/* harmony import */ var json_stable_stringify__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(json_stable_stringify__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var ethereum_cryptography_keccak__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethereum-cryptography/keccak */ \"(ssr)/./node_modules/@toruslabs/torus.js/node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var _toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/eccrypto */ \"(ssr)/./node_modules/@toruslabs/eccrypto/dist/eccrypto.esm.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _toruslabs_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @toruslabs/constants */ \"(ssr)/./node_modules/@toruslabs/constants/dist/constants.esm.js\");\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\");\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(elliptic__WEBPACK_IMPORTED_MODULE_9__);\n\n\n\n\n\n\n\n\n\n\n\nconst JRPC_METHODS = {\n  GET_OR_SET_KEY: \"GetPubKeyOrKeyAssign\",\n  COMMITMENT_REQUEST: \"CommitmentRequest\",\n  IMPORT_SHARE: \"ImportShare\",\n  GET_SHARE_OR_KEY_ASSIGN: \"GetShareOrKeyAssign\"\n};\n\n// this function normalizes the result from nodes before passing the result to threshold check function\n// For ex: some fields returns by nodes might be different from each other\n// like created_at field might vary and nonce_data might not be returned by all nodes because\n// of the metadata implementation in sapphire.\nconst normalizeKeysResult = result => {\n  const finalResult = {\n    keys: [],\n    is_new_key: result.is_new_key\n  };\n  if (result && result.keys && result.keys.length > 0) {\n    const finalKey = result.keys[0];\n    finalResult.keys = [{\n      pub_key_X: finalKey.pub_key_X,\n      pub_key_Y: finalKey.pub_key_Y,\n      address: finalKey.address\n    }];\n  }\n  return finalResult;\n};\n\n// this function normalizes the result from nodes before passing the result to threshold check function\n// For ex: some fields returns by nodes might be different from each other\n// like key_index which may differ on sapphire_network for each queried node\nconst normalizeLegacyKeysResult = result => {\n  const finalResult = {\n    keys: []\n  };\n  if (result && result.keys && result.keys.length > 0) {\n    const finalKey = result.keys[0];\n    finalResult.keys = [{\n      pub_key_X: finalKey.pub_key_X,\n      pub_key_Y: finalKey.pub_key_Y,\n      address: finalKey.address\n    }];\n  }\n  return finalResult;\n};\nconst kCombinations = (s, k) => {\n  let set = s;\n  if (typeof set === \"number\") {\n    set = Array.from({\n      length: set\n    }, (_, i) => i);\n  }\n  if (k > set.length || k <= 0) {\n    return [];\n  }\n  if (k === set.length) {\n    return [set];\n  }\n  if (k === 1) {\n    return set.reduce((acc, cur) => [...acc, [cur]], []);\n  }\n  const combs = [];\n  let tailCombs = [];\n  for (let i = 0; i <= set.length - k + 1; i += 1) {\n    tailCombs = kCombinations(set.slice(i + 1), k - 1);\n    for (let j = 0; j < tailCombs.length; j += 1) {\n      combs.push([set[i], ...tailCombs[j]]);\n    }\n  }\n  return combs;\n};\nconst thresholdSame = (arr, t) => {\n  const hashMap = {};\n  for (let i = 0; i < arr.length; i += 1) {\n    const str = json_stable_stringify__WEBPACK_IMPORTED_MODULE_0___default()(arr[i]);\n    hashMap[str] = hashMap[str] ? hashMap[str] + 1 : 1;\n    if (hashMap[str] === t) {\n      return arr[i];\n    }\n  }\n  return undefined;\n};\nfunction encParamsBufToHex(encParams) {\n  return {\n    iv: Buffer.from(encParams.iv).toString(\"hex\"),\n    ephemPublicKey: Buffer.from(encParams.ephemPublicKey).toString(\"hex\"),\n    ciphertext: Buffer.from(encParams.ciphertext).toString(\"hex\"),\n    mac: Buffer.from(encParams.mac).toString(\"hex\"),\n    mode: \"AES256\"\n  };\n}\nfunction encParamsHexToBuf(eciesData) {\n  return {\n    ephemPublicKey: Buffer.from(eciesData.ephemPublicKey, \"hex\"),\n    iv: Buffer.from(eciesData.iv, \"hex\"),\n    mac: Buffer.from(eciesData.mac, \"hex\")\n  };\n}\nfunction calculateMedian(arr) {\n  const arrSize = arr.length;\n  if (arrSize === 0) return 0;\n  const sortedArr = arr.sort(function (a, b) {\n    return a - b;\n  });\n\n  // odd length\n  if (arrSize % 2 !== 0) {\n    return sortedArr[Math.floor(arrSize / 2)];\n  }\n\n  // return average of two mid values in case of even arrSize\n  const mid1 = sortedArr[arrSize / 2 - 1];\n  const mid2 = sortedArr[arrSize / 2];\n  return (mid1 + mid2) / 2;\n}\n\nclass GetOrSetNonceError extends Error {}\n\nfunction keccak256(a) {\n  const hash = Buffer.from((0,ethereum_cryptography_keccak__WEBPACK_IMPORTED_MODULE_2__.keccak256)(a)).toString(\"hex\");\n  return `0x${hash}`;\n}\nfunction stripHexPrefix(str) {\n  return str.startsWith(\"0x\") ? str.slice(2) : str;\n}\nfunction toChecksumAddress(hexAddress) {\n  const address = stripHexPrefix(hexAddress).toLowerCase();\n  const buf = Buffer.from(address, \"utf8\");\n  const hash = Buffer.from((0,ethereum_cryptography_keccak__WEBPACK_IMPORTED_MODULE_2__.keccak256)(buf)).toString(\"hex\");\n  let ret = \"0x\";\n  for (let i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase();\n    } else {\n      ret += address[i];\n    }\n  }\n  return ret;\n}\nfunction generateAddressFromPrivKey(ecCurve, privateKey) {\n  const key = ecCurve.keyFromPrivate(privateKey.toString(\"hex\", 64), \"hex\");\n  const publicKey = key.getPublic().encode(\"hex\", false).slice(2);\n  const evmAddressLower = `0x${keccak256(Buffer.from(publicKey, \"hex\")).slice(64 - 38)}`;\n  return toChecksumAddress(evmAddressLower);\n}\nfunction generateAddressFromPubKey(ecCurve, publicKeyX, publicKeyY) {\n  const key = ecCurve.keyFromPublic({\n    x: publicKeyX.toString(\"hex\", 64),\n    y: publicKeyY.toString(\"hex\", 64)\n  });\n  const publicKey = key.getPublic().encode(\"hex\", false).slice(2);\n  const evmAddressLower = `0x${keccak256(Buffer.from(publicKey, \"hex\")).slice(64 - 38)}`;\n  return toChecksumAddress(evmAddressLower);\n}\nfunction getPostboxKeyFrom1OutOf1(ecCurve, privKey, nonce) {\n  const privKeyBN = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(privKey, 16);\n  const nonceBN = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(nonce, 16);\n  return privKeyBN.sub(nonceBN).umod(ecCurve.curve.n).toString(\"hex\");\n}\n\nclass Point {\n  constructor(x, y, ecCurve) {\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4___default()(this, \"x\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4___default()(this, \"y\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4___default()(this, \"ecCurve\", void 0);\n    this.x = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(x, \"hex\");\n    this.y = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(y, \"hex\");\n    this.ecCurve = ecCurve;\n  }\n  encode(enc) {\n    switch (enc) {\n      case \"arr\":\n        return Buffer.concat([Buffer.from(\"04\", \"hex\"), Buffer.from(this.x.toString(\"hex\"), \"hex\"), Buffer.from(this.y.toString(\"hex\"), \"hex\")]);\n      case \"elliptic-compressed\":\n        {\n          const key = this.ecCurve.keyFromPublic({\n            x: this.x.toString(\"hex\", 64),\n            y: this.y.toString(\"hex\", 64)\n          }, \"hex\");\n          return Buffer.from(key.getPublic(true, \"hex\"));\n        }\n      default:\n        throw new Error(\"encoding doesn't exist in Point\");\n    }\n  }\n}\n\nclass Share {\n  constructor(shareIndex, share) {\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4___default()(this, \"share\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4___default()(this, \"shareIndex\", void 0);\n    this.share = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(share, \"hex\");\n    this.shareIndex = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(shareIndex, \"hex\");\n  }\n  static fromJSON(value) {\n    const {\n      share,\n      shareIndex\n    } = value;\n    return new Share(shareIndex, share);\n  }\n  toJSON() {\n    return {\n      share: this.share.toString(\"hex\"),\n      shareIndex: this.shareIndex.toString(\"hex\")\n    };\n  }\n}\n\nclass Polynomial {\n  constructor(polynomial, ecCurve) {\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4___default()(this, \"polynomial\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4___default()(this, \"ecCurve\", void 0);\n    this.polynomial = polynomial;\n    this.ecCurve = ecCurve;\n  }\n  getThreshold() {\n    return this.polynomial.length;\n  }\n  polyEval(x) {\n    const tmpX = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(x, \"hex\");\n    let xi = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(tmpX);\n    let sum = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(0);\n    sum = sum.add(this.polynomial[0]);\n    for (let i = 1; i < this.polynomial.length; i += 1) {\n      const tmp = xi.mul(this.polynomial[i]);\n      sum = sum.add(tmp);\n      sum = sum.umod(this.ecCurve.curve.n);\n      xi = xi.mul(new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(tmpX));\n      xi = xi.umod(this.ecCurve.curve.n);\n    }\n    return sum;\n  }\n  generateShares(shareIndexes) {\n    const newShareIndexes = shareIndexes.map(index => {\n      if (typeof index === \"number\") {\n        return new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(index);\n      }\n      if (index instanceof (bn_js__WEBPACK_IMPORTED_MODULE_1___default())) {\n        return index;\n      }\n      if (typeof index === \"string\") {\n        return new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(index, \"hex\");\n      }\n      return index;\n    });\n    const shares = {};\n    for (let x = 0; x < newShareIndexes.length; x += 1) {\n      shares[newShareIndexes[x].toString(\"hex\", 64)] = new Share(newShareIndexes[x], this.polyEval(newShareIndexes[x]));\n    }\n    return shares;\n  }\n}\n\nfunction generatePrivateExcludingIndexes(shareIndexes) {\n  const key = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())((0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.generatePrivate)());\n  if (shareIndexes.find(el => el.eq(key))) {\n    return generatePrivateExcludingIndexes(shareIndexes);\n  }\n  return key;\n}\nconst generateEmptyBNArray = length => Array.from({\n  length\n}, () => new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(0));\nconst denominator = (ecCurve, i, innerPoints) => {\n  let result = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(1);\n  const xi = innerPoints[i].x;\n  for (let j = innerPoints.length - 1; j >= 0; j -= 1) {\n    if (i !== j) {\n      let tmp = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(xi);\n      tmp = tmp.sub(innerPoints[j].x);\n      tmp = tmp.umod(ecCurve.curve.n);\n      result = result.mul(tmp);\n      result = result.umod(ecCurve.curve.n);\n    }\n  }\n  return result;\n};\nconst interpolationPoly = (ecCurve, i, innerPoints) => {\n  let coefficients = generateEmptyBNArray(innerPoints.length);\n  const d = denominator(ecCurve, i, innerPoints);\n  if (d.cmp(new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(0)) === 0) {\n    throw new Error(\"Denominator for interpolationPoly is 0\");\n  }\n  coefficients[0] = d.invm(ecCurve.curve.n);\n  for (let k = 0; k < innerPoints.length; k += 1) {\n    const newCoefficients = generateEmptyBNArray(innerPoints.length);\n    if (k !== i) {\n      let j;\n      if (k < i) {\n        j = k + 1;\n      } else {\n        j = k;\n      }\n      j -= 1;\n      for (; j >= 0; j -= 1) {\n        newCoefficients[j + 1] = newCoefficients[j + 1].add(coefficients[j]).umod(ecCurve.curve.n);\n        let tmp = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(innerPoints[k].x);\n        tmp = tmp.mul(coefficients[j]).umod(ecCurve.curve.n);\n        newCoefficients[j] = newCoefficients[j].sub(tmp).umod(ecCurve.curve.n);\n      }\n      coefficients = newCoefficients;\n    }\n  }\n  return coefficients;\n};\nconst pointSort = innerPoints => {\n  const pointArrClone = [...innerPoints];\n  pointArrClone.sort((a, b) => a.x.cmp(b.x));\n  return pointArrClone;\n};\nconst lagrange = (ecCurve, unsortedPoints) => {\n  const sortedPoints = pointSort(unsortedPoints);\n  const polynomial = generateEmptyBNArray(sortedPoints.length);\n  for (let i = 0; i < sortedPoints.length; i += 1) {\n    const coefficients = interpolationPoly(ecCurve, i, sortedPoints);\n    for (let k = 0; k < sortedPoints.length; k += 1) {\n      let tmp = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(sortedPoints[i].y);\n      tmp = tmp.mul(coefficients[k]);\n      polynomial[k] = polynomial[k].add(tmp).umod(ecCurve.curve.n);\n    }\n  }\n  return new Polynomial(polynomial, ecCurve);\n};\nfunction lagrangeInterpolatePolynomial(ecCurve, points) {\n  return lagrange(ecCurve, points);\n}\nfunction lagrangeInterpolation(ecCurve, shares, nodeIndex) {\n  if (shares.length !== nodeIndex.length) {\n    throw new Error(\"shares not equal to nodeIndex length in lagrangeInterpolation\");\n  }\n  let secret = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(0);\n  for (let i = 0; i < shares.length; i += 1) {\n    let upper = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(1);\n    let lower = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(1);\n    for (let j = 0; j < shares.length; j += 1) {\n      if (i !== j) {\n        upper = upper.mul(nodeIndex[j].neg());\n        upper = upper.umod(ecCurve.curve.n);\n        let temp = nodeIndex[i].sub(nodeIndex[j]);\n        temp = temp.umod(ecCurve.curve.n);\n        lower = lower.mul(temp).umod(ecCurve.curve.n);\n      }\n    }\n    let delta = upper.mul(lower.invm(ecCurve.curve.n)).umod(ecCurve.curve.n);\n    delta = delta.mul(shares[i]).umod(ecCurve.curve.n);\n    secret = secret.add(delta);\n  }\n  return secret.umod(ecCurve.curve.n);\n}\n\n// generateRandomPolynomial - determinisiticShares are assumed random\nfunction generateRandomPolynomial(ecCurve, degree, secret, deterministicShares) {\n  let actualS = secret;\n  if (!secret) {\n    actualS = generatePrivateExcludingIndexes([new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(0)]);\n  }\n  if (!deterministicShares) {\n    const poly = [actualS];\n    for (let i = 0; i < degree; i += 1) {\n      const share = generatePrivateExcludingIndexes(poly);\n      poly.push(share);\n    }\n    return new Polynomial(poly, ecCurve);\n  }\n  if (!Array.isArray(deterministicShares)) {\n    throw new Error(\"deterministic shares in generateRandomPolynomial should be an array\");\n  }\n  if (deterministicShares.length > degree) {\n    throw new Error(\"deterministicShares in generateRandomPolynomial should be less or equal than degree to ensure an element of randomness\");\n  }\n  const points = {};\n  deterministicShares.forEach(share => {\n    points[share.shareIndex.toString(\"hex\", 64)] = new Point(share.shareIndex, share.share, ecCurve);\n  });\n  for (let i = 0; i < degree - deterministicShares.length; i += 1) {\n    let shareIndex = generatePrivateExcludingIndexes([new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(0)]);\n    while (points[shareIndex.toString(\"hex\", 64)] !== undefined) {\n      shareIndex = generatePrivateExcludingIndexes([new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(0)]);\n    }\n    points[shareIndex.toString(\"hex\", 64)] = new Point(shareIndex, new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())((0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.generatePrivate)()), ecCurve);\n  }\n  points[\"0\"] = new Point(new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(0), actualS, ecCurve);\n  return lagrangeInterpolatePolynomial(ecCurve, Object.values(points));\n}\n\nfunction convertMetadataToNonce(params) {\n  if (!params || !params.message) {\n    return new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(0);\n  }\n  return new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(params.message, 16);\n}\nasync function decryptNodeData(eciesData, ciphertextHex, privKey) {\n  const metadata = encParamsHexToBuf(eciesData);\n  const decryptedSigBuffer = await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.decrypt)(privKey, _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()({}, metadata), {}, {\n    ciphertext: Buffer.from(ciphertextHex, \"hex\")\n  }));\n  return decryptedSigBuffer;\n}\nfunction generateMetadataParams(ecCurve, serverTimeOffset, message, privateKey) {\n  const key = ecCurve.keyFromPrivate(privateKey.toString(\"hex\", 64));\n  const setData = {\n    data: message,\n    timestamp: new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(~~(serverTimeOffset + Date.now() / 1000)).toString(16)\n  };\n  const sig = key.sign(keccak256(Buffer.from(json_stable_stringify__WEBPACK_IMPORTED_MODULE_0___default()(setData), \"utf8\")).slice(2));\n  return {\n    pub_key_X: key.getPublic().getX().toString(\"hex\"),\n    // DO NOT PAD THIS. BACKEND DOESN'T\n    pub_key_Y: key.getPublic().getY().toString(\"hex\"),\n    // DO NOT PAD THIS. BACKEND DOESN'T\n    set_data: setData,\n    signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(\"\").toString(16, 2), \"hex\").toString(\"base64\")\n  };\n}\nasync function getMetadata(legacyMetadataHost, data) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  try {\n    const metadataResponse = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.post)(`${legacyMetadataHost}/get`, data, options, {\n      useAPIKey: true\n    });\n    if (!metadataResponse || !metadataResponse.message) {\n      return new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(0);\n    }\n    return new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(metadataResponse.message, 16); // nonce\n  } catch (error) {\n    loglevel__WEBPACK_IMPORTED_MODULE_7___default().error(\"get metadata error\", error);\n    return new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(0);\n  }\n}\nasync function getOrSetNonce(legacyMetadataHost, ecCurve, serverTimeOffset, X, Y, privKey) {\n  let getOnly = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n  let data;\n  const msg = getOnly ? \"getNonce\" : \"getOrSetNonce\";\n  if (privKey) {\n    data = generateMetadataParams(ecCurve, serverTimeOffset, msg, privKey);\n  } else {\n    data = {\n      pub_key_X: X,\n      pub_key_Y: Y,\n      set_data: {\n        data: msg\n      }\n    };\n  }\n  return (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.post)(`${legacyMetadataHost}/get_or_set_nonce`, data, undefined, {\n    useAPIKey: true\n  });\n}\nasync function getNonce(legacyMetadataHost, ecCurve, serverTimeOffset, X, Y, privKey) {\n  return getOrSetNonce(legacyMetadataHost, ecCurve, serverTimeOffset, X, Y, privKey, true);\n}\n\nconst config = {\n  logRequestTracing: false\n};\n\nconst log = loglevel__WEBPACK_IMPORTED_MODULE_7___default().getLogger(\"torus.js\");\nlog.disableAll();\n\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nclass SomeError extends Error {\n  constructor(_ref) {\n    let {\n      errors,\n      responses,\n      predicate\n    } = _ref;\n    super(\"Unable to resolve enough promises.\");\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4___default()(this, \"errors\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4___default()(this, \"responses\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4___default()(this, \"predicate\", void 0);\n    this.errors = errors;\n    this.responses = responses;\n    this.predicate = predicate;\n  }\n  get message() {\n    return `${super.message}. ${this.errors.length} errors: ${this.errors.map(x => x.message || x).join(\", \")} and ${this.responses.length} responses: ${JSON.stringify(this.responses)}`;\n  }\n  toString() {\n    return this.message;\n  }\n}\nconst Some = (promises, predicate) => new Promise((resolve, reject) => {\n  let finishedCount = 0;\n  const sharedState = {\n    resolved: false\n  };\n  const errorArr = new Array(promises.length).fill(undefined);\n  const resultArr = new Array(promises.length).fill(undefined);\n  let predicateError;\n  // eslint-disable-next-line no-promise-executor-return\n  return promises.forEach((x, index) => {\n    return x.then(resp => {\n      resultArr[index] = resp;\n      return undefined;\n    }).catch(error => {\n      errorArr[index] = error;\n    })\n    // eslint-disable-next-line promise/no-return-in-finally\n    .finally(() => {\n      if (sharedState.resolved) return;\n      return predicate(resultArr.slice(0), sharedState).then(data => {\n        sharedState.resolved = true;\n        resolve(data);\n        return undefined;\n      }).catch(error => {\n        // log only the last predicate error\n        predicateError = error;\n      }).finally(() => {\n        finishedCount += 1;\n        if (finishedCount === promises.length) {\n          const errors = Object.values(resultArr.reduce((acc, z) => {\n            if (z) {\n              var _error$data;\n              const {\n                id,\n                error\n              } = z;\n              if ((error === null || error === void 0 || (_error$data = error.data) === null || _error$data === void 0 ? void 0 : _error$data.length) > 0) {\n                if (error.data.startsWith(\"Error occurred while verifying params\")) acc[id] = capitalizeFirstLetter(error.data);else acc[id] = error.data;\n              }\n            }\n            return acc;\n          }, {}));\n          if (errors.length > 0) {\n            // Format-able errors\n            const msg = errors.length > 1 ? `\\n${errors.map(it => `• ${it}`).join(\"\\n\")}` : errors[0];\n            reject(new Error(msg));\n          } else {\n            var _predicateError;\n            reject(new SomeError({\n              errors: errorArr,\n              responses: resultArr,\n              predicate: ((_predicateError = predicateError) === null || _predicateError === void 0 ? void 0 : _predicateError.message) || predicateError\n            }));\n          }\n        }\n      });\n    });\n  });\n});\n\nconst GetPubKeyOrKeyAssign = async params => {\n  const {\n    endpoints,\n    network,\n    verifier,\n    verifierId,\n    extendedVerifierId\n  } = params;\n  const lookupPromises = endpoints.map(x => (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.post)(x, (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.generateJsonRPCObject)(JRPC_METHODS.GET_OR_SET_KEY, {\n    distributed_metadata: true,\n    verifier,\n    verifier_id: verifierId.toString(),\n    extended_verifier_id: extendedVerifierId,\n    one_key_flow: true,\n    fetch_node_index: true,\n    client_time: Math.floor(Date.now() / 1000).toString()\n  }), null, {\n    logTracingHeader: config.logRequestTracing\n  }).catch(err => log.error(`${JRPC_METHODS.GET_OR_SET_KEY} request failed`, err)));\n  let nonceResult;\n  const nodeIndexes = [];\n  const result = await Some(lookupPromises, lookupResults => {\n    const lookupPubKeys = lookupResults.filter(x1 => {\n      if (x1 && !x1.error) {\n        return x1;\n      }\n      return false;\n    });\n    const errorResult = thresholdSame(lookupPubKeys.map(x2 => x2 && x2.error), ~~(endpoints.length / 2) + 1);\n    const keyResult = thresholdSame(lookupPubKeys.map(x3 => x3 && normalizeKeysResult(x3.result)), ~~(endpoints.length / 2) + 1);\n\n    // check for nonce result in response if not a extendedVerifierId and not a legacy network\n    if (keyResult && !nonceResult && !extendedVerifierId && !_toruslabs_constants__WEBPACK_IMPORTED_MODULE_8__.LEGACY_NETWORKS_ROUTE_MAP[network]) {\n      for (let i = 0; i < lookupResults.length; i++) {\n        const x1 = lookupResults[i];\n        if (x1 && !x1.error) {\n          var _x1$result;\n          const currentNodePubKey = x1.result.keys[0].pub_key_X.toLowerCase();\n          const thresholdPubKey = keyResult.keys[0].pub_key_X.toLowerCase();\n          const pubNonceX = (_x1$result = x1.result) === null || _x1$result === void 0 || (_x1$result = _x1$result.keys[0].nonce_data) === null || _x1$result === void 0 || (_x1$result = _x1$result.pubNonce) === null || _x1$result === void 0 ? void 0 : _x1$result.x;\n          if (pubNonceX && currentNodePubKey === thresholdPubKey) {\n            nonceResult = x1.result.keys[0].nonce_data;\n            break;\n          }\n        }\n      }\n    }\n    const serverTimeOffsets = [];\n    // nonceResult must exist except for extendedVerifierId and legacy networks along with keyResult\n    if (keyResult && (nonceResult || extendedVerifierId || _toruslabs_constants__WEBPACK_IMPORTED_MODULE_8__.LEGACY_NETWORKS_ROUTE_MAP[network]) || errorResult) {\n      if (keyResult) {\n        lookupResults.forEach(x1 => {\n          if (x1 && x1.result) {\n            const currentNodePubKey = x1.result.keys[0].pub_key_X.toLowerCase();\n            const thresholdPubKey = keyResult.keys[0].pub_key_X.toLowerCase();\n            // push only those indexes for nodes who are returning pub key matching with threshold pub key.\n            // this check is important when different nodes have different keys assigned to a user.\n            if (currentNodePubKey === thresholdPubKey) {\n              const nodeIndex = Number.parseInt(x1.result.node_index);\n              if (nodeIndex) nodeIndexes.push(nodeIndex);\n            }\n            const serverTimeOffset = x1.result.server_time_offset ? Number.parseInt(x1.result.server_time_offset, 10) : 0;\n            serverTimeOffsets.push(serverTimeOffset);\n          }\n        });\n      }\n      const serverTimeOffset = keyResult ? calculateMedian(serverTimeOffsets) : 0;\n      return Promise.resolve({\n        keyResult,\n        serverTimeOffset,\n        nodeIndexes,\n        errorResult,\n        nonceResult\n      });\n    }\n    return Promise.reject(new Error(`invalid public key result: ${JSON.stringify(lookupResults)} and nonce result:${JSON.stringify(nonceResult || {})} for verifier: ${verifier}, verifierId: ${verifierId} and extendedVerifierId: ${extendedVerifierId} `));\n  });\n  return result;\n};\nasync function retrieveOrImportShare(params) {\n  const {\n    legacyMetadataHost,\n    enableOneKey,\n    ecCurve,\n    allowHost,\n    network,\n    clientId,\n    endpoints,\n    verifier,\n    verifierParams,\n    idToken,\n    importedShares,\n    extraParams,\n    serverTimeOffset\n  } = params;\n  await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.get)(allowHost, {\n    headers: {\n      verifier,\n      verifierid: verifierParams.verifier_id,\n      network,\n      clientid: clientId,\n      enablegating: \"true\"\n    }\n  }, {\n    useAPIKey: true\n  });\n  const promiseArr = [];\n\n  // generate temporary private and public key that is used to secure receive shares\n  const sessionAuthKey = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.generatePrivate)();\n  const pubKey = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.getPublic)(sessionAuthKey).toString(\"hex\");\n  const pubKeyX = pubKey.slice(2, 66);\n  const pubKeyY = pubKey.slice(66);\n  const tokenCommitment = keccak256(Buffer.from(idToken, \"utf8\"));\n  let isImportShareReq = false;\n  if (importedShares && importedShares.length > 0) {\n    if (importedShares.length !== endpoints.length) {\n      throw new Error(\"Invalid imported shares length\");\n    }\n    isImportShareReq = true;\n  }\n\n  // make commitment requests to endpoints\n  for (let i = 0; i < endpoints.length; i += 1) {\n    /*\n      CommitmentRequestParams struct {\n        MessagePrefix      string `json:\"messageprefix\"`\n        TokenCommitment    string `json:\"tokencommitment\"`\n        TempPubX           string `json:\"temppubx\"`\n        TempPubY           string `json:\"temppuby\"`\n        VerifierIdentifier string `json:\"verifieridentifier\"`\n      } \n      */\n    const p = (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.post)(endpoints[i], (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.generateJsonRPCObject)(JRPC_METHODS.COMMITMENT_REQUEST, {\n      messageprefix: \"mug00\",\n      tokencommitment: tokenCommitment.slice(2),\n      temppubx: pubKeyX,\n      temppuby: pubKeyY,\n      verifieridentifier: verifier\n    }), null, {\n      logTracingHeader: config.logRequestTracing\n    }).catch(err => {\n      log.error(\"commitment error\", err);\n    });\n    promiseArr.push(p);\n  }\n  // send share request once k + t number of commitment requests have completed\n  return Some(promiseArr, resultArr => {\n    const completedRequests = resultArr.filter(x => {\n      if (!x || typeof x !== \"object\") {\n        return false;\n      }\n      if (x.error) {\n        return false;\n      }\n      return true;\n    });\n\n    // we need to get commitments from all endpoints for importing share\n    if (importedShares.length > 0 && completedRequests.length === endpoints.length) {\n      return Promise.resolve(resultArr);\n    } else if (importedShares.length === 0 && completedRequests.length >= ~~(endpoints.length * 3 / 4) + 1) {\n      const requiredNodeResult = completedRequests.find(resp => {\n        var _resp$result;\n        if (resp && ((_resp$result = resp.result) === null || _resp$result === void 0 ? void 0 : _resp$result.nodeindex) === \"1\") {\n          return true;\n        }\n        return false;\n      });\n      if (requiredNodeResult) {\n        return Promise.resolve(resultArr);\n      }\n    }\n    return Promise.reject(new Error(`invalid ${JSON.stringify(resultArr)}`));\n  }).then(responses => {\n    const promiseArrRequest = [];\n    const nodeSigs = [];\n    for (let i = 0; i < responses.length; i += 1) {\n      const x = responses[i];\n      if (!x || typeof x !== \"object\") {\n        continue;\n      }\n      if (x.error) {\n        continue;\n      }\n      if (x) nodeSigs.push(x.result);\n    }\n    for (let i = 0; i < endpoints.length; i += 1) {\n      const x = responses[i];\n      if (!x || typeof x !== \"object\") {\n        continue;\n      }\n      if (x.error) {\n        continue;\n      }\n      if (isImportShareReq) {\n        const importedShare = importedShares[i];\n        const p = (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.post)(endpoints[i], (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.generateJsonRPCObject)(JRPC_METHODS.IMPORT_SHARE, {\n          encrypted: \"yes\",\n          use_temp: true,\n          distributed_metadata: true,\n          item: [_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()({}, verifierParams), {}, {\n            idtoken: idToken,\n            nodesignatures: nodeSigs,\n            verifieridentifier: verifier,\n            pub_key_x: importedShare.pub_key_x,\n            pub_key_y: importedShare.pub_key_y,\n            encrypted_share: importedShare.encrypted_share,\n            encrypted_share_metadata: importedShare.encrypted_share_metadata,\n            node_index: importedShare.node_index,\n            key_type: importedShare.key_type,\n            nonce_data: importedShare.nonce_data,\n            nonce_signature: importedShare.nonce_signature\n          }, extraParams)],\n          one_key_flow: true,\n          client_time: Math.floor(Date.now() / 1000).toString()\n        }), null, {\n          logTracingHeader: config.logRequestTracing\n        }).catch(err => log.error(\"share req\", err));\n        promiseArrRequest.push(p);\n      } else {\n        const p = (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.post)(endpoints[i], (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.generateJsonRPCObject)(JRPC_METHODS.GET_SHARE_OR_KEY_ASSIGN, {\n          encrypted: \"yes\",\n          use_temp: true,\n          distributed_metadata: true,\n          item: [_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()({}, verifierParams), {}, {\n            idtoken: idToken,\n            nodesignatures: nodeSigs,\n            verifieridentifier: verifier\n          }, extraParams)],\n          client_time: Math.floor(Date.now() / 1000).toString(),\n          one_key_flow: true\n        }), null, {\n          logTracingHeader: config.logRequestTracing\n        }).catch(err => log.error(\"share req\", err));\n        promiseArrRequest.push(p);\n      }\n    }\n    let thresholdNonceData;\n    return Some(promiseArrRequest, async (shareResponses, sharedState) => {\n      // check if threshold number of nodes have returned the same user public key\n      const completedRequests = shareResponses.filter(x => {\n        if (!x || typeof x !== \"object\") {\n          return false;\n        }\n        if (x.error) {\n          return false;\n        }\n        return true;\n      });\n      const pubkeys = shareResponses.map(x => {\n        if (x && x.result && x.result.keys[0].public_key) {\n          return x.result.keys[0].public_key;\n        }\n        return undefined;\n      });\n      const thresholdPublicKey = thresholdSame(pubkeys, ~~(endpoints.length / 2) + 1);\n      if (!thresholdPublicKey) {\n        throw new Error(\"invalid result from nodes, threshold number of public key results are not matching\");\n      }\n      shareResponses.forEach(x => {\n        const requiredShareResponse = x && x.result && x.result.keys[0].public_key && x.result.keys[0];\n        if (requiredShareResponse && !thresholdNonceData && !verifierParams.extended_verifier_id) {\n          var _requiredShareRespons;\n          const currentPubKey = requiredShareResponse.public_key;\n          const pubNonce = (_requiredShareRespons = requiredShareResponse.nonce_data) === null || _requiredShareRespons === void 0 || (_requiredShareRespons = _requiredShareRespons.pubNonce) === null || _requiredShareRespons === void 0 ? void 0 : _requiredShareRespons.x;\n          if (pubNonce && currentPubKey.X === thresholdPublicKey.X) {\n            thresholdNonceData = requiredShareResponse.nonce_data;\n          }\n        }\n      });\n\n      // if both thresholdNonceData and extended_verifier_id are not available\n      // then we need to throw other wise address would be incorrect.\n      if (!thresholdNonceData && !verifierParams.extended_verifier_id && !_toruslabs_constants__WEBPACK_IMPORTED_MODULE_8__.LEGACY_NETWORKS_ROUTE_MAP[network]) {\n        throw new Error(`invalid metadata result from nodes, nonce metadata is empty for verifier: ${verifier} and verifierId: ${verifierParams.verifier_id}`);\n      }\n      const thresholdReqCount = importedShares.length > 0 ? endpoints.length : ~~(endpoints.length / 2) + 1;\n      // optimistically run lagrange interpolation once threshold number of shares have been received\n      // this is matched against the user public key to ensure that shares are consistent\n      // Note: no need of thresholdMetadataNonce for extended_verifier_id key\n      if (completedRequests.length >= thresholdReqCount && thresholdPublicKey && (thresholdNonceData || verifierParams.extended_verifier_id || _toruslabs_constants__WEBPACK_IMPORTED_MODULE_8__.LEGACY_NETWORKS_ROUTE_MAP[network])) {\n        const sharePromises = [];\n        const sessionTokenSigPromises = [];\n        const sessionTokenPromises = [];\n        const nodeIndexes = [];\n        const sessionTokenData = [];\n        const isNewKeyResponses = [];\n        const serverTimeOffsetResponses = [];\n        for (let i = 0; i < completedRequests.length; i += 1) {\n          const currentShareResponse = completedRequests[i];\n          const {\n            session_tokens: sessionTokens,\n            session_token_metadata: sessionTokenMetadata,\n            session_token_sigs: sessionTokenSigs,\n            session_token_sig_metadata: sessionTokenSigMetadata,\n            keys,\n            is_new_key: isNewKey,\n            server_time_offset: serverTimeOffsetResponse\n          } = currentShareResponse.result;\n          isNewKeyResponses.push(isNewKey);\n          serverTimeOffsetResponses.push(serverTimeOffsetResponse || \"0\");\n          if ((sessionTokenSigs === null || sessionTokenSigs === void 0 ? void 0 : sessionTokenSigs.length) > 0) {\n            var _sessionTokenSigMetad;\n            // decrypt sessionSig if enc metadata is sent\n            if (sessionTokenSigMetadata && (_sessionTokenSigMetad = sessionTokenSigMetadata[0]) !== null && _sessionTokenSigMetad !== void 0 && _sessionTokenSigMetad.ephemPublicKey) {\n              sessionTokenSigPromises.push(decryptNodeData(sessionTokenSigMetadata[0], sessionTokenSigs[0], sessionAuthKey).catch(err => log.error(\"session sig decryption\", err)));\n            } else {\n              sessionTokenSigPromises.push(Promise.resolve(Buffer.from(sessionTokenSigs[0], \"hex\")));\n            }\n          } else {\n            sessionTokenSigPromises.push(Promise.resolve(undefined));\n          }\n          if ((sessionTokens === null || sessionTokens === void 0 ? void 0 : sessionTokens.length) > 0) {\n            var _sessionTokenMetadata;\n            // decrypt session token if enc metadata is sent\n            if (sessionTokenMetadata && (_sessionTokenMetadata = sessionTokenMetadata[0]) !== null && _sessionTokenMetadata !== void 0 && _sessionTokenMetadata.ephemPublicKey) {\n              sessionTokenPromises.push(decryptNodeData(sessionTokenMetadata[0], sessionTokens[0], sessionAuthKey).catch(err => log.error(\"session token sig decryption\", err)));\n            } else {\n              sessionTokenPromises.push(Promise.resolve(Buffer.from(sessionTokens[0], \"base64\")));\n            }\n          } else {\n            sessionTokenPromises.push(Promise.resolve(undefined));\n          }\n          if ((keys === null || keys === void 0 ? void 0 : keys.length) > 0) {\n            const latestKey = currentShareResponse.result.keys[0];\n            nodeIndexes.push(new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(latestKey.node_index));\n            if (latestKey.share_metadata) {\n              sharePromises.push(decryptNodeData(latestKey.share_metadata, Buffer.from(latestKey.share, \"base64\").toString(\"binary\").padStart(64, \"0\"), sessionAuthKey).catch(err => log.error(\"share decryption\", err)));\n            }\n          } else {\n            nodeIndexes.push(undefined);\n            sharePromises.push(Promise.resolve(undefined));\n          }\n        }\n        const allPromises = await Promise.all(sharePromises.concat(sessionTokenSigPromises).concat(sessionTokenPromises));\n        const sharesResolved = allPromises.slice(0, sharePromises.length);\n        const sessionSigsResolved = allPromises.slice(sharePromises.length, sharePromises.length + sessionTokenSigPromises.length);\n        const sessionTokensResolved = allPromises.slice(sharePromises.length + sessionTokenSigPromises.length, allPromises.length);\n        const validSigs = sessionSigsResolved.filter(sig => {\n          if (sig) {\n            return true;\n          }\n          return false;\n        });\n        const minThresholdRequired = ~~(endpoints.length / 2) + 1;\n        if (!verifierParams.extended_verifier_id && validSigs.length < minThresholdRequired) {\n          throw new Error(`Insufficient number of signatures from nodes, required: ${minThresholdRequired}, found: ${validSigs.length}`);\n        }\n        const validTokens = sessionTokensResolved.filter(token => {\n          if (token) {\n            return true;\n          }\n          return false;\n        });\n        if (!verifierParams.extended_verifier_id && validTokens.length < minThresholdRequired) {\n          throw new Error(`Insufficient number of session tokens from nodes, required: ${minThresholdRequired}, found: ${validTokens.length}`);\n        }\n        sessionTokensResolved.forEach((x, index) => {\n          if (!x) sessionTokenData.push(undefined);else sessionTokenData.push({\n            token: x.toString(\"base64\"),\n            signature: sessionSigsResolved[index].toString(\"hex\"),\n            node_pubx: completedRequests[index].result.node_pubx,\n            node_puby: completedRequests[index].result.node_puby\n          });\n        });\n        if (sharedState.resolved) return undefined;\n        const decryptedShares = sharesResolved.reduce((acc, curr, index) => {\n          if (curr) acc.push({\n            index: nodeIndexes[index],\n            value: new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(curr)\n          });\n          return acc;\n        }, []);\n        // run lagrange interpolation on all subsets, faster in the optimistic scenario than berlekamp-welch due to early exit\n        const allCombis = kCombinations(decryptedShares.length, ~~(endpoints.length / 2) + 1);\n        let privateKey = null;\n        for (let j = 0; j < allCombis.length; j += 1) {\n          const currentCombi = allCombis[j];\n          const currentCombiShares = decryptedShares.filter((_, index) => currentCombi.includes(index));\n          const shares = currentCombiShares.map(x => x.value);\n          const indices = currentCombiShares.map(x => x.index);\n          const derivedPrivateKey = lagrangeInterpolation(ecCurve, shares, indices);\n          if (!derivedPrivateKey) continue;\n          const decryptedPubKey = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.getPublic)(Buffer.from(derivedPrivateKey.toString(16, 64), \"hex\")).toString(\"hex\");\n          const decryptedPubKeyX = decryptedPubKey.slice(2, 66);\n          const decryptedPubKeyY = decryptedPubKey.slice(66);\n          if (new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(decryptedPubKeyX, 16).cmp(new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(thresholdPublicKey.X, 16)) === 0 && new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(decryptedPubKeyY, 16).cmp(new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(thresholdPublicKey.Y, 16)) === 0) {\n            privateKey = derivedPrivateKey;\n            break;\n          }\n        }\n        if (privateKey === undefined || privateKey === null) {\n          throw new Error(\"could not derive private key\");\n        }\n        const thresholdIsNewKey = thresholdSame(isNewKeyResponses, ~~(endpoints.length / 2) + 1);\n\n        // Convert each string timestamp to a number\n        const serverOffsetTimes = serverTimeOffsetResponses.map(timestamp => Number.parseInt(timestamp, 10));\n        return {\n          privateKey,\n          sessionTokenData,\n          thresholdNonceData,\n          nodeIndexes,\n          isNewKey: thresholdIsNewKey === \"true\",\n          serverTimeOffsetResponse: serverTimeOffset || calculateMedian(serverOffsetTimes)\n        };\n      }\n      throw new Error(\"Invalid\");\n    });\n  }).then(async res => {\n    var _nonceResult;\n    const {\n      privateKey,\n      sessionTokenData,\n      thresholdNonceData,\n      nodeIndexes,\n      isNewKey,\n      serverTimeOffsetResponse\n    } = res;\n    let nonceResult = thresholdNonceData;\n    if (!privateKey) throw new Error(\"Invalid private key returned\");\n    const oAuthKey = privateKey;\n    const oAuthPubKey = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.getPublic)(Buffer.from(oAuthKey.toString(16, 64), \"hex\")).toString(\"hex\");\n    const oAuthPubkeyX = oAuthPubKey.slice(2, 66);\n    const oAuthPubkeyY = oAuthPubKey.slice(66);\n    let metadataNonce = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())((_nonceResult = nonceResult) !== null && _nonceResult !== void 0 && _nonceResult.nonce ? nonceResult.nonce.padStart(64, \"0\") : \"0\", \"hex\");\n    let finalPubKey;\n    let pubNonce;\n    let typeOfUser = \"v1\";\n    // extended_verifier_id is only exception for torus-test-health verifier\n    // otherwise extended verifier id should not even return shares.\n    if (verifierParams.extended_verifier_id) {\n      typeOfUser = \"v2\";\n      // for tss key no need to add pub nonce\n      finalPubKey = ecCurve.keyFromPublic({\n        x: oAuthPubkeyX,\n        y: oAuthPubkeyY\n      }).getPublic();\n    } else if (_toruslabs_constants__WEBPACK_IMPORTED_MODULE_8__.LEGACY_NETWORKS_ROUTE_MAP[network]) {\n      if (enableOneKey) {\n        nonceResult = await getOrSetNonce(legacyMetadataHost, ecCurve, serverTimeOffsetResponse, oAuthPubkeyX, oAuthPubkeyY, oAuthKey, !isNewKey);\n        metadataNonce = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(nonceResult.nonce || \"0\", 16);\n        typeOfUser = nonceResult.typeOfUser;\n        if (typeOfUser === \"v2\") {\n          pubNonce = {\n            X: nonceResult.pubNonce.x,\n            Y: nonceResult.pubNonce.y\n          };\n          finalPubKey = ecCurve.keyFromPublic({\n            x: oAuthPubkeyX,\n            y: oAuthPubkeyY\n          }).getPublic().add(ecCurve.keyFromPublic({\n            x: nonceResult.pubNonce.x,\n            y: nonceResult.pubNonce.y\n          }).getPublic());\n        } else {\n          typeOfUser = \"v1\";\n          // for imported keys in legacy networks\n          metadataNonce = await getMetadata(legacyMetadataHost, {\n            pub_key_X: oAuthPubkeyX,\n            pub_key_Y: oAuthPubkeyY\n          });\n          const privateKeyWithNonce = oAuthKey.add(metadataNonce).umod(ecCurve.curve.n);\n          finalPubKey = ecCurve.keyFromPrivate(privateKeyWithNonce.toString(16, 64), \"hex\").getPublic();\n        }\n      } else {\n        typeOfUser = \"v1\";\n        // for imported keys in legacy networks\n        metadataNonce = await getMetadata(legacyMetadataHost, {\n          pub_key_X: oAuthPubkeyX,\n          pub_key_Y: oAuthPubkeyY\n        });\n        const privateKeyWithNonce = oAuthKey.add(metadataNonce).umod(ecCurve.curve.n);\n        finalPubKey = ecCurve.keyFromPrivate(privateKeyWithNonce.toString(16, 64), \"hex\").getPublic();\n      }\n    } else {\n      typeOfUser = \"v2\";\n      finalPubKey = ecCurve.keyFromPublic({\n        x: oAuthPubkeyX,\n        y: oAuthPubkeyY\n      }).getPublic().add(ecCurve.keyFromPublic({\n        x: nonceResult.pubNonce.x,\n        y: nonceResult.pubNonce.y\n      }).getPublic());\n      pubNonce = {\n        X: nonceResult.pubNonce.x,\n        Y: nonceResult.pubNonce.y\n      };\n    }\n    if (!finalPubKey) {\n      throw new Error(\"Invalid public key, this might be a bug, please report this to web3auth team\");\n    }\n    const oAuthKeyAddress = generateAddressFromPrivKey(ecCurve, oAuthKey);\n\n    // deriving address from pub key coz pubkey is always available\n    // but finalPrivKey won't be available for  v2 user upgraded to 2/n\n    const finalEvmAddress = generateAddressFromPubKey(ecCurve, finalPubKey.getX(), finalPubKey.getY());\n    let finalPrivKey = \"\"; // it is empty for v2 user upgraded to 2/n\n    if (typeOfUser === \"v1\" || typeOfUser === \"v2\" && metadataNonce.gt(new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(0))) {\n      const privateKeyWithNonce = oAuthKey.add(metadataNonce).umod(ecCurve.curve.n);\n      finalPrivKey = privateKeyWithNonce.toString(\"hex\", 64);\n    }\n    let isUpgraded = false;\n    if (typeOfUser === \"v1\") {\n      isUpgraded = null;\n    } else if (typeOfUser === \"v2\") {\n      isUpgraded = metadataNonce.eq(new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(\"0\"));\n    }\n    // return reconstructed private key and ethereum address\n    return {\n      finalKeyData: {\n        evmAddress: finalEvmAddress,\n        X: finalPubKey.getX().toString(16, 64),\n        // this is final pub x user before and after updating to 2/n\n        Y: finalPubKey.getY().toString(16, 64),\n        // this is final pub y user before and after updating to 2/n\n        privKey: finalPrivKey\n      },\n      oAuthKeyData: {\n        evmAddress: oAuthKeyAddress,\n        X: oAuthPubkeyX,\n        Y: oAuthPubkeyY,\n        privKey: oAuthKey.toString(\"hex\", 64).padStart(64, \"0\")\n      },\n      sessionData: {\n        sessionTokenData,\n        sessionAuthKey: sessionAuthKey.toString(\"hex\").padStart(64, \"0\")\n      },\n      metadata: {\n        pubNonce,\n        nonce: metadataNonce,\n        typeOfUser,\n        upgraded: isUpgraded,\n        serverTimeOffset: serverTimeOffsetResponse\n      },\n      nodesData: {\n        nodeIndexes: nodeIndexes.map(x => x.toNumber())\n      }\n    };\n  });\n}\nconst legacyKeyLookup = async (endpoints, verifier, verifierId) => {\n  const lookupPromises = endpoints.map(x => (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.post)(x, (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.generateJsonRPCObject)(\"VerifierLookupRequest\", {\n    verifier,\n    verifier_id: verifierId.toString(),\n    client_time: Math.floor(Date.now() / 1000).toString()\n  })).catch(err => log.error(\"lookup request failed\", err)));\n  return Some(lookupPromises, lookupResults => {\n    const lookupShares = lookupResults.filter(x1 => x1);\n    const errorResult = thresholdSame(lookupShares.map(x2 => x2 && x2.error), ~~(endpoints.length / 2) + 1);\n    const keyResult = thresholdSame(lookupShares.map(x3 => x3 && normalizeLegacyKeysResult(x3.result)), ~~(endpoints.length / 2) + 1);\n    const serverTimeOffsets = [];\n    // nonceResult must exist except for extendedVerifierId and legacy networks along with keyResult\n    if (keyResult) {\n      lookupResults.forEach(x1 => {\n        if (x1 && x1.result) {\n          const timeOffSet = x1.result.server_time_offset;\n          const serverTimeOffset = timeOffSet ? Number.parseInt(timeOffSet, 10) : 0;\n          serverTimeOffsets.push(serverTimeOffset);\n        }\n      });\n    }\n    if (keyResult || errorResult) {\n      const serverTimeOffset = keyResult ? calculateMedian(serverTimeOffsets) : 0;\n      return Promise.resolve({\n        keyResult,\n        errorResult,\n        serverTimeOffset\n      });\n    }\n    return Promise.reject(new Error(`invalid results ${JSON.stringify(lookupResults)}`));\n  });\n};\nconst legacyKeyAssign = async _ref => {\n  let {\n    endpoints,\n    torusNodePubs,\n    lastPoint,\n    firstPoint,\n    verifier,\n    verifierId,\n    signerHost,\n    network,\n    clientId\n  } = _ref;\n  let nodeNum;\n  let initialPoint;\n  if (lastPoint === undefined) {\n    nodeNum = Math.floor(Math.random() * endpoints.length);\n    // nodeNum = endpoints.indexOf(\"https://torus-node.binancex.dev/jrpc\");\n    initialPoint = nodeNum;\n  } else {\n    nodeNum = lastPoint % endpoints.length;\n  }\n  if (nodeNum === firstPoint) throw new Error(\"Looped through all\");\n  if (firstPoint !== undefined) initialPoint = firstPoint;\n  const data = (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.generateJsonRPCObject)(\"KeyAssign\", {\n    verifier,\n    verifier_id: verifierId.toString()\n  });\n  try {\n    const signedData = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.post)(signerHost, data, {\n      headers: {\n        pubkeyx: torusNodePubs[nodeNum].X,\n        pubkeyy: torusNodePubs[nodeNum].Y,\n        network,\n        clientid: clientId\n      }\n    }, {\n      useAPIKey: true\n    });\n    return await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.post)(endpoints[nodeNum], _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()({}, data), signedData), {\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      }\n    });\n  } catch (error2) {\n    const error = error2;\n    log.error(error.status, error.message, error, \"key assign error\");\n    const acceptedErrorMsgs = [\n    // Slow node\n    \"Timed out\", \"Failed to fetch\", \"cancelled\", \"NetworkError when attempting to fetch resource.\",\n    // Happens when the node is not reachable (dns issue etc)\n    \"TypeError: Failed to fetch\",\n    // All except iOS and Firefox\n    \"TypeError: cancelled\",\n    // iOS\n    \"TypeError: NetworkError when attempting to fetch resource.\" // Firefox\n    ];\n    if ((error === null || error === void 0 ? void 0 : error.status) === 502 || (error === null || error === void 0 ? void 0 : error.status) === 504 || (error === null || error === void 0 ? void 0 : error.status) === 401 || acceptedErrorMsgs.includes(error.message) || acceptedErrorMsgs.some(x => {\n      var _error$message;\n      return (_error$message = error.message) === null || _error$message === void 0 ? void 0 : _error$message.includes(x);\n    }) || error.message && error.message.includes(\"reason: getaddrinfo EAI_AGAIN\")) return legacyKeyAssign({\n      endpoints,\n      torusNodePubs,\n      lastPoint: nodeNum + 1,\n      firstPoint: initialPoint,\n      verifier,\n      verifierId,\n      signerHost,\n      network,\n      clientId\n    });\n    throw new Error(`Sorry, the Torus Network that powers Web3Auth is currently very busy.\n    We will generate your key in time. Pls try again later. \\n\n    ${error.message || \"\"}`);\n  }\n};\nconst legacyWaitKeyLookup = (endpoints, verifier, verifierId, timeout) => new Promise((resolve, reject) => {\n  setTimeout(() => {\n    legacyKeyLookup(endpoints, verifier, verifierId).then(resolve).catch(reject);\n  }, timeout);\n});\n\n// Implement threshold logic wrappers around public APIs\n// of Torus nodes to handle malicious node responses\nclass Torus {\n  constructor(_ref) {\n    let {\n      enableOneKey = false,\n      clientId,\n      network,\n      serverTimeOffset = 0,\n      allowHost,\n      legacyMetadataHost\n    } = _ref;\n    // 86400 = 24 hour\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4___default()(this, \"allowHost\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4___default()(this, \"serverTimeOffset\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4___default()(this, \"network\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4___default()(this, \"clientId\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4___default()(this, \"ec\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4___default()(this, \"enableOneKey\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4___default()(this, \"signerHost\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4___default()(this, \"legacyMetadataHost\", void 0);\n    if (!clientId) throw Error(\"Please provide a valid clientId in constructor\");\n    if (!network) throw Error(\"Please provide a valid network in constructor\");\n    this.ec = new elliptic__WEBPACK_IMPORTED_MODULE_9__.ec(\"secp256k1\");\n    this.serverTimeOffset = serverTimeOffset || 0; // ms\n    this.network = network;\n    this.clientId = clientId;\n    this.allowHost = allowHost || `${_toruslabs_constants__WEBPACK_IMPORTED_MODULE_8__.SIGNER_MAP[network]}/api/allow`;\n    this.enableOneKey = enableOneKey;\n    this.legacyMetadataHost = legacyMetadataHost || _toruslabs_constants__WEBPACK_IMPORTED_MODULE_8__.METADATA_MAP[network];\n    this.signerHost = `${_toruslabs_constants__WEBPACK_IMPORTED_MODULE_8__.SIGNER_MAP[network]}/api/sign`;\n  }\n  get isLegacyNetwork() {\n    const legacyNetwork = _toruslabs_constants__WEBPACK_IMPORTED_MODULE_8__.LEGACY_NETWORKS_ROUTE_MAP[this.network];\n    if (legacyNetwork && !legacyNetwork.migrationCompleted) return true;\n    return false;\n  }\n  static enableLogging() {\n    let v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (v) {\n      log.enableAll();\n      config.logRequestTracing = true;\n    } else log.disableAll();\n  }\n  static setAPIKey(apiKey) {\n    (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.setAPIKey)(apiKey);\n  }\n  static setEmbedHost(embedHost) {\n    (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.setEmbedHost)(embedHost);\n  }\n  static setSessionTime(sessionTime) {\n    Torus.sessionTime = sessionTime;\n  }\n  static isGetOrSetNonceError(err) {\n    return err instanceof GetOrSetNonceError;\n  }\n  static getPostboxKey(torusKey) {\n    if (torusKey.metadata.typeOfUser === \"v1\") {\n      return torusKey.finalKeyData.privKey || torusKey.oAuthKeyData.privKey;\n    }\n    return torusKey.oAuthKeyData.privKey;\n  }\n  async retrieveShares(endpoints, indexes, verifier, verifierParams, idToken) {\n    let extraParams = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    if (this.isLegacyNetwork) return this.legacyRetrieveShares(endpoints, indexes, verifier, verifierParams, idToken, extraParams);\n    return retrieveOrImportShare({\n      legacyMetadataHost: this.legacyMetadataHost,\n      serverTimeOffset: this.serverTimeOffset,\n      enableOneKey: this.enableOneKey,\n      ecCurve: this.ec,\n      allowHost: this.allowHost,\n      network: this.network,\n      clientId: this.clientId,\n      endpoints,\n      verifier,\n      verifierParams,\n      idToken,\n      importedShares: [],\n      extraParams: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()({}, extraParams), {}, {\n        session_token_exp_second: Torus.sessionTime\n      })\n    });\n  }\n  async getPublicAddress(endpoints, torusNodePubs, _ref2) {\n    let {\n      verifier,\n      verifierId,\n      extendedVerifierId\n    } = _ref2;\n    if (this.isLegacyNetwork) return this.getLegacyPublicAddress(endpoints, torusNodePubs, {\n      verifier,\n      verifierId\n    }, this.enableOneKey);\n    return this.getNewPublicAddress(endpoints, {\n      verifier,\n      verifierId,\n      extendedVerifierId\n    }, this.enableOneKey);\n  }\n  async importPrivateKey(endpoints, nodeIndexes, nodePubkeys, verifier, verifierParams, idToken, newPrivateKey) {\n    let extraParams = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : {};\n    if (this.isLegacyNetwork) throw new Error(\"This function is not supported on legacy networks\");\n    if (endpoints.length !== nodeIndexes.length) {\n      throw new Error(`length of endpoints array must be same as length of nodeIndexes array`);\n    }\n    const threshold = ~~(endpoints.length / 2) + 1;\n    const degree = threshold - 1;\n    const nodeIndexesBn = [];\n    const key = this.ec.keyFromPrivate(newPrivateKey.padStart(64, \"0\"), \"hex\");\n    for (const nodeIndex of nodeIndexes) {\n      nodeIndexesBn.push(new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(nodeIndex));\n    }\n    const privKeyBn = key.getPrivate();\n    const randomNonce = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())((0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.generatePrivate)());\n    const oAuthKey = privKeyBn.sub(randomNonce).umod(this.ec.curve.n);\n    const oAuthPubKey = this.ec.keyFromPrivate(oAuthKey.toString(\"hex\").padStart(64, \"0\")).getPublic();\n    const poly = generateRandomPolynomial(this.ec, degree, oAuthKey);\n    const shares = poly.generateShares(nodeIndexesBn);\n    const nonceParams = this.generateNonceMetadataParams(\"getOrSetNonce\", oAuthKey, randomNonce);\n    const nonceData = Buffer.from(json_stable_stringify__WEBPACK_IMPORTED_MODULE_0___default()(nonceParams.set_data), \"utf8\").toString(\"base64\");\n    const sharesData = [];\n    const encPromises = [];\n    for (let i = 0; i < nodeIndexesBn.length; i++) {\n      const shareJson = shares[nodeIndexesBn[i].toString(\"hex\", 64)].toJSON();\n      if (!nodePubkeys[i]) {\n        throw new Error(`Missing node pub key for node index: ${nodeIndexesBn[i].toString(\"hex\", 64)}`);\n      }\n      const nodePubKey = this.ec.keyFromPublic({\n        x: nodePubkeys[i].X,\n        y: nodePubkeys[i].Y\n      });\n      encPromises.push((0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.encrypt)(Buffer.from(nodePubKey.getPublic().encodeCompressed(\"hex\"), \"hex\"), Buffer.from(shareJson.share, \"hex\")));\n    }\n    const encShares = await Promise.all(encPromises);\n    for (let i = 0; i < nodeIndexesBn.length; i++) {\n      const shareJson = shares[nodeIndexesBn[i].toString(\"hex\", 64)].toJSON();\n      const encParams = encShares[i];\n      const encParamsMetadata = encParamsBufToHex(encParams);\n      const shareData = {\n        pub_key_x: oAuthPubKey.getX().toString(\"hex\", 64),\n        pub_key_y: oAuthPubKey.getY().toString(\"hex\", 64),\n        encrypted_share: encParamsMetadata.ciphertext,\n        encrypted_share_metadata: encParamsMetadata,\n        node_index: Number.parseInt(shareJson.shareIndex, 16),\n        key_type: \"secp256k1\",\n        nonce_data: nonceData,\n        nonce_signature: nonceParams.signature\n      };\n      sharesData.push(shareData);\n    }\n    return retrieveOrImportShare({\n      legacyMetadataHost: this.legacyMetadataHost,\n      serverTimeOffset: this.serverTimeOffset,\n      enableOneKey: this.enableOneKey,\n      ecCurve: this.ec,\n      allowHost: this.allowHost,\n      network: this.network,\n      clientId: this.clientId,\n      endpoints,\n      verifier,\n      verifierParams,\n      idToken,\n      importedShares: sharesData,\n      extraParams: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()({}, extraParams), {}, {\n        session_token_exp_second: Torus.sessionTime\n      })\n    });\n  }\n\n  /**\n   * Note: use this function only for openlogin tkey account lookups.\n   * this is a legacy function, use getPublicAddress instead for new networks\n   */\n  async getUserTypeAndAddress(endpoints, torusNodePubs, _ref3) {\n    let {\n      verifier,\n      verifierId,\n      extendedVerifierId\n    } = _ref3;\n    if (!this.isLegacyNetwork) return this.getNewPublicAddress(endpoints, {\n      verifier,\n      verifierId,\n      extendedVerifierId\n    }, true);\n    return this.getLegacyPublicAddress(endpoints, torusNodePubs, {\n      verifier,\n      verifierId\n    }, true);\n  }\n\n  // this function is soon going to be deprecated\n  // this is only supported in celeste network currently.\n  async legacyRetrieveShares(endpoints, indexes, verifier, verifierParams, idToken) {\n    let extraParams = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    const promiseArr = [];\n    await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.get)(this.allowHost, {\n      headers: {\n        verifier,\n        verifierid: verifierParams.verifier_id,\n        network: this.network,\n        clientid: this.clientId,\n        enablegating: \"true\"\n      }\n    }, {\n      useAPIKey: true\n    });\n    /*\n      CommitmentRequestParams struct {\n        MessagePrefix      string `json:\"messageprefix\"`\n        TokenCommitment    string `json:\"tokencommitment\"`\n        TempPubX           string `json:\"temppubx\"`\n        TempPubY           string `json:\"temppuby\"`\n        VerifierIdentifier string `json:\"verifieridentifier\"`\n      } \n      */\n\n    // generate temporary private and public key that is used to secure receive shares\n    const tmpKey = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.generatePrivate)();\n    const pubKey = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.getPublic)(tmpKey).toString(\"hex\");\n    const pubKeyX = pubKey.slice(2, 66);\n    const pubKeyY = pubKey.slice(66);\n    const tokenCommitment = keccak256(Buffer.from(idToken, \"utf8\"));\n\n    // make commitment requests to endpoints\n    for (let i = 0; i < endpoints.length; i += 1) {\n      const p = (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.post)(endpoints[i], (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.generateJsonRPCObject)(\"CommitmentRequest\", {\n        messageprefix: \"mug00\",\n        tokencommitment: tokenCommitment.slice(2),\n        temppubx: pubKeyX,\n        temppuby: pubKeyY,\n        verifieridentifier: verifier\n      })).catch(err => {\n        log.error(\"commitment\", err);\n      });\n      promiseArr.push(p);\n    }\n    /*\n      ShareRequestParams struct {\n        Item []bijson.RawMessage `json:\"item\"`\n      }\n      ShareRequestItem struct {\n        IDToken            string          `json:\"idtoken\"`\n        NodeSignatures     []NodeSignature `json:\"nodesignatures\"`\n        VerifierIdentifier string          `json:\"verifieridentifier\"`\n      }\n      NodeSignature struct {\n        Signature   string\n        Data        string\n        NodePubKeyX string\n        NodePubKeyY string\n      }\n      CommitmentRequestResult struct {\n        Signature string `json:\"signature\"`\n        Data      string `json:\"data\"`\n        NodePubX  string `json:\"nodepubx\"`\n        NodePubY  string `json:\"nodepuby\"`\n      }\n      */\n    // send share request once k + t number of commitment requests have completed\n    return Some(promiseArr, resultArr => {\n      const completedRequests = resultArr.filter(x => {\n        if (!x || typeof x !== \"object\") {\n          return false;\n        }\n        if (x.error) {\n          return false;\n        }\n        return true;\n      });\n      if (completedRequests.length >= ~~(endpoints.length / 4) * 3 + 1) {\n        return Promise.resolve(resultArr);\n      }\n      return Promise.reject(new Error(`invalid ${JSON.stringify(resultArr)}`));\n    }).then(responses => {\n      const promiseArrRequest = [];\n      const nodeSigs = [];\n      for (let i = 0; i < responses.length; i += 1) {\n        if (responses[i]) nodeSigs.push(responses[i].result);\n      }\n      for (let i = 0; i < endpoints.length; i += 1) {\n        const p = (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.post)(endpoints[i], (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_6__.generateJsonRPCObject)(\"ShareRequest\", {\n          encrypted: \"yes\",\n          client_time: Math.floor(Date.now() / 1000).toString(),\n          item: [_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()({}, verifierParams), {}, {\n            idtoken: idToken,\n            nodesignatures: nodeSigs,\n            verifieridentifier: verifier\n          }, extraParams)]\n        })).catch(err => log.error(\"share req\", err));\n        promiseArrRequest.push(p);\n      }\n      return Some(promiseArrRequest, async (shareResponses, sharedState) => {\n        /*\n            ShareRequestResult struct {\n              Keys []KeyAssignment\n            }\n                    / KeyAssignmentPublic -\n            type KeyAssignmentPublic struct {\n              Index     big.Int\n              PublicKey common.Point\n              Threshold int\n              Verifiers map[string][]string // Verifier => VerifierID\n            }\n             // KeyAssignment -\n            type KeyAssignment struct {\n              KeyAssignmentPublic\n              Share big.Int // Or Si\n            }\n          */\n        // check if threshold number of nodes have returned the same user public key\n        const completedRequests = shareResponses.filter(x => x);\n        const thresholdPublicKey = thresholdSame(shareResponses.map(x => x && x.result && x.result.keys[0].PublicKey), ~~(endpoints.length / 2) + 1);\n        // optimistically run lagrange interpolation once threshold number of shares have been received\n        // this is matched against the user public key to ensure that shares are consistent\n        if (completedRequests.length >= ~~(endpoints.length / 2) + 1 && thresholdPublicKey) {\n          const sharePromises = [];\n          const nodeIndexes = [];\n          const serverTimeOffsets = [];\n          for (let i = 0; i < shareResponses.length; i += 1) {\n            var _currentShareResponse, _currentShareResponse2;\n            const currentShareResponse = shareResponses[i];\n            const timeOffSet = currentShareResponse === null || currentShareResponse === void 0 || (_currentShareResponse = currentShareResponse.result) === null || _currentShareResponse === void 0 ? void 0 : _currentShareResponse.server_time_offset;\n            const parsedTimeOffset = timeOffSet ? Number.parseInt(timeOffSet, 10) : 0;\n            serverTimeOffsets.push(parsedTimeOffset);\n            if ((currentShareResponse === null || currentShareResponse === void 0 || (_currentShareResponse2 = currentShareResponse.result) === null || _currentShareResponse2 === void 0 || (_currentShareResponse2 = _currentShareResponse2.keys) === null || _currentShareResponse2 === void 0 ? void 0 : _currentShareResponse2.length) > 0) {\n              currentShareResponse.result.keys.sort((a, b) => new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(a.Index, 16).cmp(new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(b.Index, 16)));\n              const firstKey = currentShareResponse.result.keys[0];\n              if (firstKey.Metadata) {\n                const metadata = {\n                  ephemPublicKey: Buffer.from(firstKey.Metadata.ephemPublicKey, \"hex\"),\n                  iv: Buffer.from(firstKey.Metadata.iv, \"hex\"),\n                  mac: Buffer.from(firstKey.Metadata.mac, \"hex\")\n                  // mode: Buffer.from(firstKey.Metadata.mode, \"hex\"),\n                };\n                sharePromises.push((0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.decrypt)(tmpKey, _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()({}, metadata), {}, {\n                  ciphertext: Buffer.from(Buffer.from(firstKey.Share, \"base64\").toString(\"binary\").padStart(64, \"0\"), \"hex\")\n                })).catch(err => log.error(\"share decryption\", err)));\n              } else {\n                sharePromises.push(Promise.resolve(Buffer.from(firstKey.Share.padStart(64, \"0\"), \"hex\")));\n              }\n            } else {\n              sharePromises.push(Promise.resolve(undefined));\n            }\n            nodeIndexes.push(new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(indexes[i], 16));\n          }\n          const sharesResolved = await Promise.all(sharePromises);\n          if (sharedState.resolved) return undefined;\n          const decryptedShares = sharesResolved.reduce((acc, curr, index) => {\n            if (curr) acc.push({\n              index: nodeIndexes[index],\n              value: new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(curr)\n            });\n            return acc;\n          }, []);\n          // run lagrange interpolation on all subsets, faster in the optimistic scenario than berlekamp-welch due to early exit\n          const allCombis = kCombinations(decryptedShares.length, ~~(endpoints.length / 2) + 1);\n          let privateKey = null;\n          for (let j = 0; j < allCombis.length; j += 1) {\n            const currentCombi = allCombis[j];\n            const currentCombiShares = decryptedShares.filter((_, index) => currentCombi.includes(index));\n            const shares = currentCombiShares.map(x => x.value);\n            const indices = currentCombiShares.map(x => x.index);\n            const derivedPrivateKey = lagrangeInterpolation(this.ec, shares, indices);\n            if (!derivedPrivateKey) continue;\n            const decryptedPubKey = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.getPublic)(Buffer.from(derivedPrivateKey.toString(16, 64), \"hex\")).toString(\"hex\");\n            const decryptedPubKeyX = decryptedPubKey.slice(2, 66);\n            const decryptedPubKeyY = decryptedPubKey.slice(66);\n            if (new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(decryptedPubKeyX, 16).cmp(new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(thresholdPublicKey.X, 16)) === 0 && new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(decryptedPubKeyY, 16).cmp(new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(thresholdPublicKey.Y, 16)) === 0) {\n              privateKey = derivedPrivateKey;\n              break;\n            }\n          }\n          if (privateKey === undefined || privateKey === null) {\n            throw new Error(\"could not derive private key\");\n          }\n          return {\n            privateKey,\n            serverTimeOffset: this.serverTimeOffset || calculateMedian(serverTimeOffsets)\n          };\n        }\n        throw new Error(\"invalid\");\n      });\n    }).then(async keyData => {\n      const {\n        serverTimeOffset,\n        privateKey: returnedOauthKey\n      } = keyData;\n      const oAuthKey = returnedOauthKey;\n      if (!oAuthKey) throw new Error(\"Invalid private key returned\");\n      const oAuthPubKey = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.getPublic)(Buffer.from(oAuthKey.toString(16, 64), \"hex\")).toString(\"hex\");\n      const oAuthKeyX = oAuthPubKey.slice(2, 66);\n      const oAuthKeyY = oAuthPubKey.slice(66);\n      let metadataNonce;\n      let finalPubKey;\n      let typeOfUser = \"v1\";\n      let pubKeyNonceResult;\n      if (this.enableOneKey) {\n        const nonceResult = await getNonce(this.legacyMetadataHost, this.ec, serverTimeOffset, oAuthKeyX, oAuthKeyY, oAuthKey);\n        metadataNonce = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(nonceResult.nonce || \"0\", 16);\n        typeOfUser = nonceResult.typeOfUser;\n        if (typeOfUser === \"v2\") {\n          finalPubKey = this.ec.keyFromPublic({\n            x: oAuthKeyX,\n            y: oAuthKeyY\n          }).getPublic().add(this.ec.keyFromPublic({\n            x: nonceResult.pubNonce.x,\n            y: nonceResult.pubNonce.y\n          }).getPublic());\n          pubKeyNonceResult = {\n            X: nonceResult.pubNonce.x,\n            Y: nonceResult.pubNonce.y\n          };\n        } else {\n          // for imported keys in legacy networks\n          metadataNonce = await getMetadata(this.legacyMetadataHost, {\n            pub_key_X: oAuthKeyX,\n            pub_key_Y: oAuthKeyY\n          });\n          const privateKeyWithNonce = oAuthKey.add(metadataNonce).umod(this.ec.curve.n);\n          finalPubKey = this.ec.keyFromPrivate(privateKeyWithNonce.toString(\"hex\"), \"hex\").getPublic();\n        }\n      } else {\n        // for imported keys in legacy networks\n        metadataNonce = await getMetadata(this.legacyMetadataHost, {\n          pub_key_X: oAuthKeyX,\n          pub_key_Y: oAuthKeyY\n        });\n        const privateKeyWithNonce = oAuthKey.add(metadataNonce).umod(this.ec.curve.n);\n        finalPubKey = this.ec.keyFromPrivate(privateKeyWithNonce.toString(\"hex\"), \"hex\").getPublic();\n      }\n      const oAuthKeyAddress = generateAddressFromPrivKey(this.ec, oAuthKey);\n      let finalPrivKey = \"\"; // it is empty for v2 user upgraded to 2/n\n      if (typeOfUser === \"v1\" || typeOfUser === \"v2\" && metadataNonce.gt(new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(0))) {\n        const privateKeyWithNonce = oAuthKey.add(metadataNonce).umod(this.ec.curve.n);\n        finalPrivKey = privateKeyWithNonce.toString(\"hex\", 64).padStart(64, \"0\");\n      }\n      let isUpgraded = false;\n      if (typeOfUser === \"v1\") {\n        isUpgraded = null;\n      } else if (typeOfUser === \"v2\") {\n        isUpgraded = metadataNonce.eq(new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(\"0\"));\n      }\n\n      // deriving address from pub key coz pubkey is always available\n      // but finalPrivKey won't be available for  v2 user upgraded to 2/n\n      let finalEvmAddress = \"\";\n      if (finalPubKey) {\n        finalEvmAddress = generateAddressFromPubKey(this.ec, finalPubKey.getX(), finalPubKey.getY());\n      } else {\n        throw new Error(\"Invalid public key, this might be a bug, please report this to web3auth team\");\n      }\n      return {\n        finalKeyData: {\n          evmAddress: finalEvmAddress,\n          X: finalPubKey ? finalPubKey.getX().toString(16, 64) : \"\",\n          // this is final pub x user before and after updating to 2/n\n          Y: finalPubKey ? finalPubKey.getY().toString(16, 64) : \"\",\n          // this is final pub y user before and after updating to 2/n\n          privKey: finalPrivKey\n        },\n        oAuthKeyData: {\n          evmAddress: oAuthKeyAddress,\n          X: oAuthKeyX,\n          Y: oAuthKeyY,\n          privKey: oAuthKey.toString(\"hex\", 64).padStart(64, \"0\")\n        },\n        sessionData: {\n          sessionTokenData: [],\n          sessionAuthKey: \"\"\n        },\n        metadata: {\n          pubNonce: pubKeyNonceResult,\n          nonce: metadataNonce,\n          typeOfUser: typeOfUser,\n          upgraded: isUpgraded,\n          serverTimeOffset\n        },\n        nodesData: {\n          nodeIndexes: []\n        }\n      };\n    });\n  }\n  async getLegacyPublicAddress(endpoints, torusNodePubs, _ref4, enableOneKey) {\n    let {\n      verifier,\n      verifierId\n    } = _ref4;\n    let finalKeyResult;\n    let isNewKey = false;\n    const {\n      keyResult,\n      errorResult,\n      serverTimeOffset\n    } = (await legacyKeyLookup(endpoints, verifier, verifierId)) || {};\n    if (errorResult && JSON.stringify(errorResult).includes(\"Verifier not supported\")) {\n      // change error msg\n      throw new Error(`Verifier not supported. Check if you: \\n\n      1. Are on the right network (Torus testnet/mainnet) \\n\n      2. Have setup a verifier on dashboard.web3auth.io?`);\n    } else if (errorResult && JSON.stringify(errorResult).includes(\"Verifier + VerifierID has not yet been assigned\")) {\n      await legacyKeyAssign({\n        endpoints,\n        torusNodePubs,\n        lastPoint: undefined,\n        firstPoint: undefined,\n        verifier,\n        verifierId,\n        signerHost: this.signerHost,\n        network: this.network,\n        clientId: this.clientId\n      });\n      const assignResult = await legacyWaitKeyLookup(endpoints, verifier, verifierId, 1000);\n      finalKeyResult = assignResult === null || assignResult === void 0 ? void 0 : assignResult.keyResult;\n      isNewKey = true;\n    } else if (keyResult) {\n      finalKeyResult = keyResult;\n    } else {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n    }\n    if (finalKeyResult) {\n      const finalServerTimeOffset = this.serverTimeOffset || serverTimeOffset;\n      return this.formatLegacyPublicKeyData({\n        finalKeyResult,\n        isNewKey,\n        enableOneKey,\n        serverTimeOffset: finalServerTimeOffset\n      });\n    }\n    throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n  }\n  generateNonceMetadataParams(operation, privateKey, nonce) {\n    const key = this.ec.keyFromPrivate(privateKey.toString(\"hex\", 64));\n    const setData = {\n      operation,\n      timestamp: new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(~~(this.serverTimeOffset + Date.now() / 1000)).toString(16)\n    };\n    if (nonce) {\n      setData.data = nonce.toString(\"hex\", 64);\n    }\n    const sig = key.sign(keccak256(Buffer.from(json_stable_stringify__WEBPACK_IMPORTED_MODULE_0___default()(setData), \"utf8\")).slice(2));\n    return {\n      pub_key_X: key.getPublic().getX().toString(\"hex\", 64),\n      pub_key_Y: key.getPublic().getY().toString(\"hex\", 64),\n      set_data: setData,\n      signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(\"\").toString(16, 2), \"hex\").toString(\"base64\")\n    };\n  }\n  async getNewPublicAddress(endpoints, _ref5, enableOneKey) {\n    let {\n      verifier,\n      verifierId,\n      extendedVerifierId\n    } = _ref5;\n    const keyAssignResult = await GetPubKeyOrKeyAssign({\n      endpoints,\n      network: this.network,\n      verifier,\n      verifierId,\n      extendedVerifierId\n    });\n    const {\n      errorResult,\n      keyResult,\n      nodeIndexes = [],\n      serverTimeOffset\n    } = keyAssignResult;\n    const finalServerTimeOffset = this.serverTimeOffset || serverTimeOffset;\n    const {\n      nonceResult\n    } = keyAssignResult;\n    if (errorResult && JSON.stringify(errorResult).toLowerCase().includes(\"verifier not supported\")) {\n      // change error msg\n      throw new Error(`Verifier not supported. Check if you: \\n\n      1. Are on the right network (Torus testnet/mainnet) \\n\n      2. Have setup a verifier on dashboard.web3auth.io?`);\n    }\n    if (errorResult) {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n    }\n    if (!(keyResult !== null && keyResult !== void 0 && keyResult.keys)) {\n      throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n    }\n\n    // no need of nonce for extendedVerifierId (tss verifier id)\n    if (!nonceResult && !extendedVerifierId && !_toruslabs_constants__WEBPACK_IMPORTED_MODULE_8__.LEGACY_NETWORKS_ROUTE_MAP[this.network]) {\n      throw new GetOrSetNonceError(\"metadata nonce is missing in share response\");\n    }\n    const {\n      pub_key_X: X,\n      pub_key_Y: Y\n    } = keyResult.keys[0];\n    let pubNonce;\n    const nonce = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())((nonceResult === null || nonceResult === void 0 ? void 0 : nonceResult.nonce) || \"0\", 16);\n    let oAuthPubKey;\n    let finalPubKey;\n    if (extendedVerifierId) {\n      // for tss key no need to add pub nonce\n      finalPubKey = this.ec.keyFromPublic({\n        x: X,\n        y: Y\n      }).getPublic();\n      oAuthPubKey = finalPubKey;\n    } else if (_toruslabs_constants__WEBPACK_IMPORTED_MODULE_8__.LEGACY_NETWORKS_ROUTE_MAP[this.network]) {\n      return this.formatLegacyPublicKeyData({\n        isNewKey: keyResult.is_new_key,\n        enableOneKey,\n        finalKeyResult: {\n          keys: keyResult.keys\n        },\n        serverTimeOffset: finalServerTimeOffset\n      });\n    } else {\n      const v2NonceResult = nonceResult;\n      oAuthPubKey = this.ec.keyFromPublic({\n        x: X,\n        y: Y\n      }).getPublic();\n      finalPubKey = this.ec.keyFromPublic({\n        x: X,\n        y: Y\n      }).getPublic().add(this.ec.keyFromPublic({\n        x: v2NonceResult.pubNonce.x,\n        y: v2NonceResult.pubNonce.y\n      }).getPublic());\n      pubNonce = {\n        X: v2NonceResult.pubNonce.x,\n        Y: v2NonceResult.pubNonce.y\n      };\n    }\n    if (!oAuthPubKey) {\n      throw new Error(\"Unable to derive oAuthPubKey\");\n    }\n    const oAuthX = oAuthPubKey.getX().toString(16, 64);\n    const oAuthY = oAuthPubKey.getY().toString(16, 64);\n    const oAuthAddress = generateAddressFromPubKey(this.ec, oAuthPubKey.getX(), oAuthPubKey.getY());\n    if (!finalPubKey) {\n      throw new Error(\"Unable to derive finalPubKey\");\n    }\n    const finalX = finalPubKey ? finalPubKey.getX().toString(16, 64) : \"\";\n    const finalY = finalPubKey ? finalPubKey.getY().toString(16, 64) : \"\";\n    const finalAddress = finalPubKey ? generateAddressFromPubKey(this.ec, finalPubKey.getX(), finalPubKey.getY()) : \"\";\n    return {\n      oAuthKeyData: {\n        evmAddress: oAuthAddress,\n        X: oAuthX,\n        Y: oAuthY\n      },\n      finalKeyData: {\n        evmAddress: finalAddress,\n        X: finalX,\n        Y: finalY\n      },\n      metadata: {\n        pubNonce,\n        nonce,\n        upgraded: (nonceResult === null || nonceResult === void 0 ? void 0 : nonceResult.upgraded) || false,\n        typeOfUser: \"v2\",\n        serverTimeOffset: finalServerTimeOffset\n      },\n      nodesData: {\n        nodeIndexes\n      }\n    };\n  }\n  async formatLegacyPublicKeyData(params) {\n    var _nonceResult;\n    const {\n      finalKeyResult,\n      enableOneKey,\n      isNewKey,\n      serverTimeOffset\n    } = params;\n    const {\n      pub_key_X: X,\n      pub_key_Y: Y\n    } = finalKeyResult.keys[0];\n    let nonceResult;\n    let nonce;\n    let finalPubKey;\n    let typeOfUser;\n    let pubNonce;\n    const oAuthPubKey = this.ec.keyFromPublic({\n      x: X,\n      y: Y\n    }).getPublic();\n    const finalServerTimeOffset = this.serverTimeOffset || serverTimeOffset;\n    if (enableOneKey) {\n      try {\n        nonceResult = await getOrSetNonce(this.legacyMetadataHost, this.ec, finalServerTimeOffset, X, Y, undefined, !isNewKey);\n        nonce = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(nonceResult.nonce || \"0\", 16);\n        typeOfUser = nonceResult.typeOfUser;\n      } catch {\n        throw new GetOrSetNonceError();\n      }\n      if (nonceResult.typeOfUser === \"v1\") {\n        nonce = await getMetadata(this.legacyMetadataHost, {\n          pub_key_X: X,\n          pub_key_Y: Y\n        });\n        finalPubKey = this.ec.keyFromPublic({\n          x: X,\n          y: Y\n        }).getPublic().add(this.ec.keyFromPrivate(nonce.toString(16, 64), \"hex\").getPublic());\n      } else if (nonceResult.typeOfUser === \"v2\") {\n        finalPubKey = this.ec.keyFromPublic({\n          x: X,\n          y: Y\n        }).getPublic().add(this.ec.keyFromPublic({\n          x: nonceResult.pubNonce.x,\n          y: nonceResult.pubNonce.y\n        }).getPublic());\n        pubNonce = {\n          X: nonceResult.pubNonce.x,\n          Y: nonceResult.pubNonce.y\n        };\n      } else {\n        throw new Error(\"getOrSetNonce should always return typeOfUser.\");\n      }\n    } else {\n      typeOfUser = \"v1\";\n      nonce = await getMetadata(this.legacyMetadataHost, {\n        pub_key_X: X,\n        pub_key_Y: Y\n      });\n      finalPubKey = this.ec.keyFromPublic({\n        x: X,\n        y: Y\n      }).getPublic().add(this.ec.keyFromPrivate(nonce.toString(16, 64), \"hex\").getPublic());\n    }\n    if (!oAuthPubKey) {\n      throw new Error(\"Unable to derive oAuthPubKey\");\n    }\n    const oAuthX = oAuthPubKey.getX().toString(16, 64);\n    const oAuthY = oAuthPubKey.getY().toString(16, 64);\n    const oAuthAddress = generateAddressFromPubKey(this.ec, oAuthPubKey.getX(), oAuthPubKey.getY());\n    if (typeOfUser === \"v2\" && !finalPubKey) {\n      throw new Error(\"Unable to derive finalPubKey\");\n    }\n    const finalX = finalPubKey ? finalPubKey.getX().toString(16, 64) : \"\";\n    const finalY = finalPubKey ? finalPubKey.getY().toString(16, 64) : \"\";\n    const finalAddress = finalPubKey ? generateAddressFromPubKey(this.ec, finalPubKey.getX(), finalPubKey.getY()) : \"\";\n    return {\n      oAuthKeyData: {\n        evmAddress: oAuthAddress,\n        X: oAuthX,\n        Y: oAuthY\n      },\n      finalKeyData: {\n        evmAddress: finalAddress,\n        X: finalX,\n        Y: finalY\n      },\n      metadata: {\n        pubNonce,\n        nonce,\n        upgraded: ((_nonceResult = nonceResult) === null || _nonceResult === void 0 ? void 0 : _nonceResult.upgraded) || false,\n        typeOfUser,\n        serverTimeOffset: finalServerTimeOffset\n      },\n      nodesData: {\n        nodeIndexes: []\n      }\n    };\n  }\n}\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_4___default()(Torus, \"sessionTime\", 86400);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/torus.js/dist/torusUtils.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/rlp/dist/esm/index.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/rlp/dist/esm/index.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RLP: () => (/* binding */ RLP),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   utils: () => (/* binding */ utils)\n/* harmony export */ });\n/**\n * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/\nfunction encode(input) {\n    if (Array.isArray(input)) {\n        const output = [];\n        let outputLength = 0;\n        for (let i = 0; i < input.length; i++) {\n            const encoded = encode(input[i]);\n            output.push(encoded);\n            outputLength += encoded.length;\n        }\n        return concatBytes(encodeLength(outputLength, 192), ...output);\n    }\n    const inputBuf = toBytes(input);\n    if (inputBuf.length === 1 && inputBuf[0] < 128) {\n        return inputBuf;\n    }\n    return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);\n}\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */\nfunction safeSlice(input, start, end) {\n    if (end > input.length) {\n        throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds');\n    }\n    return input.slice(start, end);\n}\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */\nfunction decodeLength(v) {\n    if (v[0] === 0) {\n        throw new Error('invalid RLP: extra zeros');\n    }\n    return parseHexByte(bytesToHex(v));\n}\nfunction encodeLength(len, offset) {\n    if (len < 56) {\n        return Uint8Array.from([len + offset]);\n    }\n    const hexLength = numberToHex(len);\n    const lLength = hexLength.length / 2;\n    const firstByte = numberToHex(offset + 55 + lLength);\n    return Uint8Array.from(hexToBytes(firstByte + hexLength));\n}\nfunction decode(input, stream = false) {\n    if (typeof input === 'undefined' || input === null || input.length === 0) {\n        return Uint8Array.from([]);\n    }\n    const inputBytes = toBytes(input);\n    const decoded = _decode(inputBytes);\n    if (stream) {\n        return {\n            data: decoded.data,\n            remainder: decoded.remainder.slice(),\n        };\n    }\n    if (decoded.remainder.length !== 0) {\n        throw new Error('invalid RLP: remainder must be zero');\n    }\n    return decoded.data;\n}\n/** Decode an input with RLP */\nfunction _decode(input) {\n    let length, llength, data, innerRemainder, d;\n    const decoded = [];\n    const firstByte = input[0];\n    if (firstByte <= 0x7f) {\n        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n        return {\n            data: input.slice(0, 1),\n            remainder: input.subarray(1),\n        };\n    }\n    else if (firstByte <= 0xb7) {\n        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n        // The range of the first byte is [0x80, 0xb7]\n        length = firstByte - 0x7f;\n        // set 0x80 null to 0\n        if (firstByte === 0x80) {\n            data = Uint8Array.from([]);\n        }\n        else {\n            data = safeSlice(input, 1, length);\n        }\n        if (length === 2 && data[0] < 0x80) {\n            throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed');\n        }\n        return {\n            data,\n            remainder: input.subarray(length),\n        };\n    }\n    else if (firstByte <= 0xbf) {\n        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n        // followed by the length, followed by the string\n        llength = firstByte - 0xb6;\n        if (input.length - 1 < llength) {\n            throw new Error('invalid RLP: not enough bytes for string length');\n        }\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length <= 55) {\n            throw new Error('invalid RLP: expected string length to be greater than 55');\n        }\n        data = safeSlice(input, llength, length + llength);\n        return {\n            data,\n            remainder: input.subarray(length + llength),\n        };\n    }\n    else if (firstByte <= 0xf7) {\n        // a list between 0-55 bytes long\n        length = firstByte - 0xbf;\n        innerRemainder = safeSlice(input, 1, length);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.subarray(length),\n        };\n    }\n    else {\n        // a list over 55 bytes long\n        llength = firstByte - 0xf6;\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length < 56) {\n            throw new Error('invalid RLP: encoded list too short');\n        }\n        const totalLength = llength + length;\n        if (totalLength > input.length) {\n            throw new Error('invalid RLP: total length is larger than the data');\n        }\n        innerRemainder = safeSlice(input, llength, totalLength);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.subarray(totalLength),\n        };\n    }\n}\nconst cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    // Pre-caching chars with `cachedHexes` speeds this up 6x\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += cachedHexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction parseHexByte(hexByte) {\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte))\n        throw new Error('Invalid byte sequence');\n    return byte;\n}\n// Caching slows it down 2-3x\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        array[i] = parseHexByte(hex.slice(j, j + 2));\n    }\n    return array;\n}\n/** Concatenates two Uint8Arrays into one. */\nfunction concatBytes(...arrays) {\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nfunction utf8ToBytes(utf) {\n    return new TextEncoder().encode(utf);\n}\n/** Transform an integer into its hexadecimal value */\nfunction numberToHex(integer) {\n    if (integer < 0) {\n        throw new Error('Invalid integer as argument, must be unsigned!');\n    }\n    const hex = integer.toString(16);\n    return hex.length % 2 ? `0${hex}` : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n    return a.length % 2 ? `0${a}` : a;\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n    return str.length >= 2 && str[0] === '0' && str[1] === 'x';\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform anything into a Uint8Array */\nfunction toBytes(v) {\n    if (v instanceof Uint8Array) {\n        return v;\n    }\n    if (typeof v === 'string') {\n        if (isHexPrefixed(v)) {\n            return hexToBytes(padToEven(stripHexPrefix(v)));\n        }\n        return utf8ToBytes(v);\n    }\n    if (typeof v === 'number' || typeof v === 'bigint') {\n        if (!v) {\n            return Uint8Array.from([]);\n        }\n        return hexToBytes(numberToHex(v));\n    }\n    if (v === null || v === undefined) {\n        return Uint8Array.from([]);\n    }\n    throw new Error('toBytes: received unsupported type ' + typeof v);\n}\nconst utils = {\n    bytesToHex,\n    concatBytes,\n    hexToBytes,\n    utf8ToBytes,\n};\nconst RLP = { encode, decode };\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9ybHAvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsYUFBYTtBQUM5QztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsbUJBQW1CO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixtQkFBbUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLElBQUk7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLEVBQUU7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxjQUFjO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0Ly4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvYmFzZS1jb250cm9sbGVycy9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvcmxwL2Rpc3QvZXNtL2luZGV4LmpzPzJlYjEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSTFAgRW5jb2RpbmcgYmFzZWQgb24gaHR0cHM6Ly9ldGhlcmV1bS5vcmcvZW4vZGV2ZWxvcGVycy9kb2NzL2RhdGEtc3RydWN0dXJlcy1hbmQtZW5jb2RpbmcvcmxwL1xuICogVGhpcyBmdW5jdGlvbiB0YWtlcyBpbiBkYXRhLCBjb252ZXJ0cyBpdCB0byBVaW50OEFycmF5IGlmIG5vdCxcbiAqIGFuZCBhZGRzIGEgbGVuZ3RoIGZvciByZWN1cnNpb24uXG4gKiBAcGFyYW0gaW5wdXQgV2lsbCBiZSBjb252ZXJ0ZWQgdG8gVWludDhBcnJheVxuICogQHJldHVybnMgVWludDhBcnJheSBvZiBlbmNvZGVkIGRhdGFcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGUoaW5wdXQpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gW107XG4gICAgICAgIGxldCBvdXRwdXRMZW5ndGggPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBlbmNvZGVkID0gZW5jb2RlKGlucHV0W2ldKTtcbiAgICAgICAgICAgIG91dHB1dC5wdXNoKGVuY29kZWQpO1xuICAgICAgICAgICAgb3V0cHV0TGVuZ3RoICs9IGVuY29kZWQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25jYXRCeXRlcyhlbmNvZGVMZW5ndGgob3V0cHV0TGVuZ3RoLCAxOTIpLCAuLi5vdXRwdXQpO1xuICAgIH1cbiAgICBjb25zdCBpbnB1dEJ1ZiA9IHRvQnl0ZXMoaW5wdXQpO1xuICAgIGlmIChpbnB1dEJ1Zi5sZW5ndGggPT09IDEgJiYgaW5wdXRCdWZbMF0gPCAxMjgpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0QnVmO1xuICAgIH1cbiAgICByZXR1cm4gY29uY2F0Qnl0ZXMoZW5jb2RlTGVuZ3RoKGlucHV0QnVmLmxlbmd0aCwgMTI4KSwgaW5wdXRCdWYpO1xufVxuLyoqXG4gKiBTbGljZXMgYSBVaW50OEFycmF5LCB0aHJvd3MgaWYgdGhlIHNsaWNlIGdvZXMgb3V0LW9mLWJvdW5kcyBvZiB0aGUgVWludDhBcnJheS5cbiAqIEUuZy4gYHNhZmVTbGljZShoZXhUb0J5dGVzKCdhYScpLCAxLCAyKWAgd2lsbCB0aHJvdy5cbiAqIEBwYXJhbSBpbnB1dFxuICogQHBhcmFtIHN0YXJ0XG4gKiBAcGFyYW0gZW5kXG4gKi9cbmZ1bmN0aW9uIHNhZmVTbGljZShpbnB1dCwgc3RhcnQsIGVuZCkge1xuICAgIGlmIChlbmQgPiBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIFJMUCAoc2FmZVNsaWNlKTogZW5kIHNsaWNlIG9mIFVpbnQ4QXJyYXkgb3V0LW9mLWJvdW5kcycpO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXQuc2xpY2Uoc3RhcnQsIGVuZCk7XG59XG4vKipcbiAqIFBhcnNlIGludGVnZXJzLiBDaGVjayBpZiB0aGVyZSBpcyBubyBsZWFkaW5nIHplcm9zXG4gKiBAcGFyYW0gdiBUaGUgdmFsdWUgdG8gcGFyc2VcbiAqL1xuZnVuY3Rpb24gZGVjb2RlTGVuZ3RoKHYpIHtcbiAgICBpZiAodlswXSA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgUkxQOiBleHRyYSB6ZXJvcycpO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VIZXhCeXRlKGJ5dGVzVG9IZXgodikpO1xufVxuZnVuY3Rpb24gZW5jb2RlTGVuZ3RoKGxlbiwgb2Zmc2V0KSB7XG4gICAgaWYgKGxlbiA8IDU2KSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oW2xlbiArIG9mZnNldF0pO1xuICAgIH1cbiAgICBjb25zdCBoZXhMZW5ndGggPSBudW1iZXJUb0hleChsZW4pO1xuICAgIGNvbnN0IGxMZW5ndGggPSBoZXhMZW5ndGgubGVuZ3RoIC8gMjtcbiAgICBjb25zdCBmaXJzdEJ5dGUgPSBudW1iZXJUb0hleChvZmZzZXQgKyA1NSArIGxMZW5ndGgpO1xuICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oaGV4VG9CeXRlcyhmaXJzdEJ5dGUgKyBoZXhMZW5ndGgpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIHN0cmVhbSA9IGZhbHNlKSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3VuZGVmaW5lZCcgfHwgaW5wdXQgPT09IG51bGwgfHwgaW5wdXQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oW10pO1xuICAgIH1cbiAgICBjb25zdCBpbnB1dEJ5dGVzID0gdG9CeXRlcyhpbnB1dCk7XG4gICAgY29uc3QgZGVjb2RlZCA9IF9kZWNvZGUoaW5wdXRCeXRlcyk7XG4gICAgaWYgKHN0cmVhbSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YTogZGVjb2RlZC5kYXRhLFxuICAgICAgICAgICAgcmVtYWluZGVyOiBkZWNvZGVkLnJlbWFpbmRlci5zbGljZSgpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoZGVjb2RlZC5yZW1haW5kZXIubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBSTFA6IHJlbWFpbmRlciBtdXN0IGJlIHplcm8nKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlY29kZWQuZGF0YTtcbn1cbi8qKiBEZWNvZGUgYW4gaW5wdXQgd2l0aCBSTFAgKi9cbmZ1bmN0aW9uIF9kZWNvZGUoaW5wdXQpIHtcbiAgICBsZXQgbGVuZ3RoLCBsbGVuZ3RoLCBkYXRhLCBpbm5lclJlbWFpbmRlciwgZDtcbiAgICBjb25zdCBkZWNvZGVkID0gW107XG4gICAgY29uc3QgZmlyc3RCeXRlID0gaW5wdXRbMF07XG4gICAgaWYgKGZpcnN0Qnl0ZSA8PSAweDdmKSB7XG4gICAgICAgIC8vIGEgc2luZ2xlIGJ5dGUgd2hvc2UgdmFsdWUgaXMgaW4gdGhlIFsweDAwLCAweDdmXSByYW5nZSwgdGhhdCBieXRlIGlzIGl0cyBvd24gUkxQIGVuY29kaW5nLlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YTogaW5wdXQuc2xpY2UoMCwgMSksXG4gICAgICAgICAgICByZW1haW5kZXI6IGlucHV0LnN1YmFycmF5KDEpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChmaXJzdEJ5dGUgPD0gMHhiNykge1xuICAgICAgICAvLyBzdHJpbmcgaXMgMC01NSBieXRlcyBsb25nLiBBIHNpbmdsZSBieXRlIHdpdGggdmFsdWUgMHg4MCBwbHVzIHRoZSBsZW5ndGggb2YgdGhlIHN0cmluZyBmb2xsb3dlZCBieSB0aGUgc3RyaW5nXG4gICAgICAgIC8vIFRoZSByYW5nZSBvZiB0aGUgZmlyc3QgYnl0ZSBpcyBbMHg4MCwgMHhiN11cbiAgICAgICAgbGVuZ3RoID0gZmlyc3RCeXRlIC0gMHg3ZjtcbiAgICAgICAgLy8gc2V0IDB4ODAgbnVsbCB0byAwXG4gICAgICAgIGlmIChmaXJzdEJ5dGUgPT09IDB4ODApIHtcbiAgICAgICAgICAgIGRhdGEgPSBVaW50OEFycmF5LmZyb20oW10pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGF0YSA9IHNhZmVTbGljZShpbnB1dCwgMSwgbGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVuZ3RoID09PSAyICYmIGRhdGFbMF0gPCAweDgwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgUkxQIGVuY29kaW5nOiBpbnZhbGlkIHByZWZpeCwgc2luZ2xlIGJ5dGUgPCAweDgwIGFyZSBub3QgcHJlZml4ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIHJlbWFpbmRlcjogaW5wdXQuc3ViYXJyYXkobGVuZ3RoKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZmlyc3RCeXRlIDw9IDB4YmYpIHtcbiAgICAgICAgLy8gc3RyaW5nIGlzIGdyZWF0ZXIgdGhhbiA1NSBieXRlcyBsb25nLiBBIHNpbmdsZSBieXRlIHdpdGggdGhlIHZhbHVlICgweGI3IHBsdXMgdGhlIGxlbmd0aCBvZiB0aGUgbGVuZ3RoKSxcbiAgICAgICAgLy8gZm9sbG93ZWQgYnkgdGhlIGxlbmd0aCwgZm9sbG93ZWQgYnkgdGhlIHN0cmluZ1xuICAgICAgICBsbGVuZ3RoID0gZmlyc3RCeXRlIC0gMHhiNjtcbiAgICAgICAgaWYgKGlucHV0Lmxlbmd0aCAtIDEgPCBsbGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgUkxQOiBub3QgZW5vdWdoIGJ5dGVzIGZvciBzdHJpbmcgbGVuZ3RoJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGVuZ3RoID0gZGVjb2RlTGVuZ3RoKHNhZmVTbGljZShpbnB1dCwgMSwgbGxlbmd0aCkpO1xuICAgICAgICBpZiAobGVuZ3RoIDw9IDU1KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgUkxQOiBleHBlY3RlZCBzdHJpbmcgbGVuZ3RoIHRvIGJlIGdyZWF0ZXIgdGhhbiA1NScpO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEgPSBzYWZlU2xpY2UoaW5wdXQsIGxsZW5ndGgsIGxlbmd0aCArIGxsZW5ndGgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIHJlbWFpbmRlcjogaW5wdXQuc3ViYXJyYXkobGVuZ3RoICsgbGxlbmd0aCksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGZpcnN0Qnl0ZSA8PSAweGY3KSB7XG4gICAgICAgIC8vIGEgbGlzdCBiZXR3ZWVuIDAtNTUgYnl0ZXMgbG9uZ1xuICAgICAgICBsZW5ndGggPSBmaXJzdEJ5dGUgLSAweGJmO1xuICAgICAgICBpbm5lclJlbWFpbmRlciA9IHNhZmVTbGljZShpbnB1dCwgMSwgbGVuZ3RoKTtcbiAgICAgICAgd2hpbGUgKGlubmVyUmVtYWluZGVyLmxlbmd0aCkge1xuICAgICAgICAgICAgZCA9IF9kZWNvZGUoaW5uZXJSZW1haW5kZXIpO1xuICAgICAgICAgICAgZGVjb2RlZC5wdXNoKGQuZGF0YSk7XG4gICAgICAgICAgICBpbm5lclJlbWFpbmRlciA9IGQucmVtYWluZGVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhOiBkZWNvZGVkLFxuICAgICAgICAgICAgcmVtYWluZGVyOiBpbnB1dC5zdWJhcnJheShsZW5ndGgpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gYSBsaXN0IG92ZXIgNTUgYnl0ZXMgbG9uZ1xuICAgICAgICBsbGVuZ3RoID0gZmlyc3RCeXRlIC0gMHhmNjtcbiAgICAgICAgbGVuZ3RoID0gZGVjb2RlTGVuZ3RoKHNhZmVTbGljZShpbnB1dCwgMSwgbGxlbmd0aCkpO1xuICAgICAgICBpZiAobGVuZ3RoIDwgNTYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBSTFA6IGVuY29kZWQgbGlzdCB0b28gc2hvcnQnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b3RhbExlbmd0aCA9IGxsZW5ndGggKyBsZW5ndGg7XG4gICAgICAgIGlmICh0b3RhbExlbmd0aCA+IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIFJMUDogdG90YWwgbGVuZ3RoIGlzIGxhcmdlciB0aGFuIHRoZSBkYXRhJyk7XG4gICAgICAgIH1cbiAgICAgICAgaW5uZXJSZW1haW5kZXIgPSBzYWZlU2xpY2UoaW5wdXQsIGxsZW5ndGgsIHRvdGFsTGVuZ3RoKTtcbiAgICAgICAgd2hpbGUgKGlubmVyUmVtYWluZGVyLmxlbmd0aCkge1xuICAgICAgICAgICAgZCA9IF9kZWNvZGUoaW5uZXJSZW1haW5kZXIpO1xuICAgICAgICAgICAgZGVjb2RlZC5wdXNoKGQuZGF0YSk7XG4gICAgICAgICAgICBpbm5lclJlbWFpbmRlciA9IGQucmVtYWluZGVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhOiBkZWNvZGVkLFxuICAgICAgICAgICAgcmVtYWluZGVyOiBpbnB1dC5zdWJhcnJheSh0b3RhbExlbmd0aCksXG4gICAgICAgIH07XG4gICAgfVxufVxuY29uc3QgY2FjaGVkSGV4ZXMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiAyNTYgfSwgKF92LCBpKSA9PiBpLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpKTtcbmZ1bmN0aW9uIGJ5dGVzVG9IZXgodWludDhhKSB7XG4gICAgLy8gUHJlLWNhY2hpbmcgY2hhcnMgd2l0aCBgY2FjaGVkSGV4ZXNgIHNwZWVkcyB0aGlzIHVwIDZ4XG4gICAgbGV0IGhleCA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdWludDhhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGhleCArPSBjYWNoZWRIZXhlc1t1aW50OGFbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gaGV4O1xufVxuZnVuY3Rpb24gcGFyc2VIZXhCeXRlKGhleEJ5dGUpIHtcbiAgICBjb25zdCBieXRlID0gTnVtYmVyLnBhcnNlSW50KGhleEJ5dGUsIDE2KTtcbiAgICBpZiAoTnVtYmVyLmlzTmFOKGJ5dGUpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYnl0ZSBzZXF1ZW5jZScpO1xuICAgIHJldHVybiBieXRlO1xufVxuLy8gQ2FjaGluZyBzbG93cyBpdCBkb3duIDItM3hcbmZ1bmN0aW9uIGhleFRvQnl0ZXMoaGV4KSB7XG4gICAgaWYgKHR5cGVvZiBoZXggIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2hleFRvQnl0ZXM6IGV4cGVjdGVkIHN0cmluZywgZ290ICcgKyB0eXBlb2YgaGV4KTtcbiAgICB9XG4gICAgaWYgKGhleC5sZW5ndGggJSAyKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hleFRvQnl0ZXM6IHJlY2VpdmVkIGludmFsaWQgdW5wYWRkZWQgaGV4Jyk7XG4gICAgY29uc3QgYXJyYXkgPSBuZXcgVWludDhBcnJheShoZXgubGVuZ3RoIC8gMik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBqID0gaSAqIDI7XG4gICAgICAgIGFycmF5W2ldID0gcGFyc2VIZXhCeXRlKGhleC5zbGljZShqLCBqICsgMikpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG4vKiogQ29uY2F0ZW5hdGVzIHR3byBVaW50OEFycmF5cyBpbnRvIG9uZS4gKi9cbmZ1bmN0aW9uIGNvbmNhdEJ5dGVzKC4uLmFycmF5cykge1xuICAgIGlmIChhcnJheXMubGVuZ3RoID09PSAxKVxuICAgICAgICByZXR1cm4gYXJyYXlzWzBdO1xuICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5cy5yZWR1Y2UoKGEsIGFycikgPT4gYSArIGFyci5sZW5ndGgsIDApO1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDAsIHBhZCA9IDA7IGkgPCBhcnJheXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgYXJyID0gYXJyYXlzW2ldO1xuICAgICAgICByZXN1bHQuc2V0KGFyciwgcGFkKTtcbiAgICAgICAgcGFkICs9IGFyci5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiB1dGY4VG9CeXRlcyh1dGYpIHtcbiAgICByZXR1cm4gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHV0Zik7XG59XG4vKiogVHJhbnNmb3JtIGFuIGludGVnZXIgaW50byBpdHMgaGV4YWRlY2ltYWwgdmFsdWUgKi9cbmZ1bmN0aW9uIG51bWJlclRvSGV4KGludGVnZXIpIHtcbiAgICBpZiAoaW50ZWdlciA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGludGVnZXIgYXMgYXJndW1lbnQsIG11c3QgYmUgdW5zaWduZWQhJyk7XG4gICAgfVxuICAgIGNvbnN0IGhleCA9IGludGVnZXIudG9TdHJpbmcoMTYpO1xuICAgIHJldHVybiBoZXgubGVuZ3RoICUgMiA/IGAwJHtoZXh9YCA6IGhleDtcbn1cbi8qKiBQYWQgYSBzdHJpbmcgdG8gYmUgZXZlbiAqL1xuZnVuY3Rpb24gcGFkVG9FdmVuKGEpIHtcbiAgICByZXR1cm4gYS5sZW5ndGggJSAyID8gYDAke2F9YCA6IGE7XG59XG4vKiogQ2hlY2sgaWYgYSBzdHJpbmcgaXMgcHJlZml4ZWQgYnkgMHggKi9cbmZ1bmN0aW9uIGlzSGV4UHJlZml4ZWQoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5sZW5ndGggPj0gMiAmJiBzdHJbMF0gPT09ICcwJyAmJiBzdHJbMV0gPT09ICd4Jztcbn1cbi8qKiBSZW1vdmVzIDB4IGZyb20gYSBnaXZlbiBTdHJpbmcgKi9cbmZ1bmN0aW9uIHN0cmlwSGV4UHJlZml4KHN0cikge1xuICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICByZXR1cm4gaXNIZXhQcmVmaXhlZChzdHIpID8gc3RyLnNsaWNlKDIpIDogc3RyO1xufVxuLyoqIFRyYW5zZm9ybSBhbnl0aGluZyBpbnRvIGEgVWludDhBcnJheSAqL1xuZnVuY3Rpb24gdG9CeXRlcyh2KSB7XG4gICAgaWYgKHYgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIHJldHVybiB2O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHYgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmIChpc0hleFByZWZpeGVkKHYpKSB7XG4gICAgICAgICAgICByZXR1cm4gaGV4VG9CeXRlcyhwYWRUb0V2ZW4oc3RyaXBIZXhQcmVmaXgodikpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXModik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdiA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHYgPT09ICdiaWdpbnQnKSB7XG4gICAgICAgIGlmICghdikge1xuICAgICAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShbXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhleFRvQnl0ZXMobnVtYmVyVG9IZXgodikpO1xuICAgIH1cbiAgICBpZiAodiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShbXSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcigndG9CeXRlczogcmVjZWl2ZWQgdW5zdXBwb3J0ZWQgdHlwZSAnICsgdHlwZW9mIHYpO1xufVxuZXhwb3J0IGNvbnN0IHV0aWxzID0ge1xuICAgIGJ5dGVzVG9IZXgsXG4gICAgY29uY2F0Qnl0ZXMsXG4gICAgaGV4VG9CeXRlcyxcbiAgICB1dGY4VG9CeXRlcyxcbn07XG5leHBvcnQgY29uc3QgUkxQID0geyBlbmNvZGUsIGRlY29kZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/rlp/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/account.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/account.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: () => (/* binding */ Account),\n/* harmony export */   accountBodyFromSlim: () => (/* binding */ accountBodyFromSlim),\n/* harmony export */   accountBodyToRLP: () => (/* binding */ accountBodyToRLP),\n/* harmony export */   accountBodyToSlim: () => (/* binding */ accountBodyToSlim),\n/* harmony export */   generateAddress: () => (/* binding */ generateAddress),\n/* harmony export */   generateAddress2: () => (/* binding */ generateAddress2),\n/* harmony export */   importPublic: () => (/* binding */ importPublic),\n/* harmony export */   isValidAddress: () => (/* binding */ isValidAddress),\n/* harmony export */   isValidChecksumAddress: () => (/* binding */ isValidChecksumAddress),\n/* harmony export */   isValidPrivate: () => (/* binding */ isValidPrivate),\n/* harmony export */   isValidPublic: () => (/* binding */ isValidPublic),\n/* harmony export */   isZeroAddress: () => (/* binding */ isZeroAddress),\n/* harmony export */   privateToAddress: () => (/* binding */ privateToAddress),\n/* harmony export */   privateToPublic: () => (/* binding */ privateToPublic),\n/* harmony export */   pubToAddress: () => (/* binding */ pubToAddress),\n/* harmony export */   publicToAddress: () => (/* binding */ publicToAddress),\n/* harmony export */   toChecksumAddress: () => (/* binding */ toChecksumAddress),\n/* harmony export */   zeroAddress: () => (/* binding */ zeroAddress)\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/rlp */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/rlp/dist/esm/index.js\");\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethereum-cryptography/secp256k1.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/secp256k1.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/helpers.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n\n\n\n\n\n\nclass Account {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating an Account from varying data types.\n     */\n    constructor(nonce = _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0, balance = _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0, storageRoot = _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_RLP, codeHash = _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL) {\n        this.nonce = nonce;\n        this.balance = balance;\n        this.storageRoot = storageRoot;\n        this.codeHash = codeHash;\n        this._validate();\n    }\n    static fromAccountData(accountData) {\n        const { nonce, balance, storageRoot, codeHash } = accountData;\n        return new Account(nonce !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(nonce)) : undefined, balance !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(balance)) : undefined, storageRoot !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(storageRoot) : undefined, codeHash !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(codeHash) : undefined);\n    }\n    static fromRlpSerializedAccount(serialized) {\n        const values = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized account input. Must be array');\n        }\n        return this.fromValuesArray(values);\n    }\n    static fromValuesArray(values) {\n        const [nonce, balance, storageRoot, codeHash] = values;\n        return new Account((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(nonce), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(balance), storageRoot, codeHash);\n    }\n    _validate() {\n        if (this.nonce < _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) {\n            throw new Error('nonce must be greater than zero');\n        }\n        if (this.balance < _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) {\n            throw new Error('balance must be greater than zero');\n        }\n        if (this.storageRoot.length !== 32) {\n            throw new Error('storageRoot must have a length of 32');\n        }\n        if (this.codeHash.length !== 32) {\n            throw new Error('codeHash must have a length of 32');\n        }\n    }\n    /**\n     * Returns an array of Uint8Arrays of the raw bytes for the account, in order.\n     */\n    raw() {\n        return [\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bigIntToUnpaddedBytes)(this.nonce),\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bigIntToUnpaddedBytes)(this.balance),\n            this.storageRoot,\n            this.codeHash,\n        ];\n    }\n    /**\n     * Returns the RLP serialization of the account as a `Uint8Array`.\n     */\n    serialize() {\n        return _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(this.raw());\n    }\n    /**\n     * Returns a `Boolean` determining if the account is a contract.\n     */\n    isContract() {\n        return !(0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(this.codeHash, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL);\n    }\n    /**\n     * Returns a `Boolean` determining if the account is empty complying to the definition of\n     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n     * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n     */\n    isEmpty() {\n        return (this.balance === _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0 &&\n            this.nonce === _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0 &&\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(this.codeHash, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL));\n    }\n}\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nconst isValidAddress = function (hexAddress) {\n    try {\n        (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsString)(hexAddress);\n    }\n    catch (e) {\n        return false;\n    }\n    return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */\nconst toChecksumAddress = function (hexAddress, eip1191ChainId) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsHexString)(hexAddress);\n    const address = (0,_internal_js__WEBPACK_IMPORTED_MODULE_6__.stripHexPrefix)(hexAddress).toLowerCase();\n    let prefix = '';\n    if (eip1191ChainId !== undefined) {\n        const chainId = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(eip1191ChainId));\n        prefix = chainId.toString() + '0x';\n    }\n    const bytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.utf8ToBytes)(prefix + address);\n    const hash = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)((0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(bytes)).slice(2);\n    let ret = '0x';\n    for (let i = 0; i < address.length; i++) {\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += address[i].toUpperCase();\n        }\n        else {\n            ret += address[i];\n        }\n    }\n    return ret;\n};\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nconst isValidChecksumAddress = function (hexAddress, eip1191ChainId) {\n    return isValidAddress(hexAddress) && toChecksumAddress(hexAddress, eip1191ChainId) === hexAddress;\n};\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nconst generateAddress = function (from, nonce) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(from);\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(nonce);\n    if ((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(nonce) === _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) {\n        // in RLP we want to encode null in the case of zero nonce\n        // read the RLP documentation for an answer if you dare\n        return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(_ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode([from, Uint8Array.from([])])).subarray(-20);\n    }\n    // Only take the lower 160bits of the hash\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(_ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode([from, nonce])).subarray(-20);\n};\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nconst generateAddress2 = function (from, salt, initCode) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(from);\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(salt);\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(initCode);\n    if (from.length !== 20) {\n        throw new Error('Expected from to be of length 20');\n    }\n    if (salt.length !== 32) {\n        throw new Error('Expected salt to be of length 32');\n    }\n    const address = (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)('0xff'), from, salt, (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(initCode)));\n    return address.subarray(-20);\n};\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nconst isValidPrivate = function (privateKey) {\n    return ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.utils.isValidPrivateKey(privateKey);\n};\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nconst isValidPublic = function (publicKey, sanitize = false) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(publicKey);\n    if (publicKey.length === 64) {\n        // Convert to SEC1 for secp256k1\n        // Automatically checks whether point is on curve\n        try {\n            ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(Uint8Array.from([4]), publicKey));\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    if (!sanitize) {\n        return false;\n    }\n    try {\n        ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex(publicKey);\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n};\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nconst pubToAddress = function (pubKey, sanitize = false) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n        pubKey = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1);\n    }\n    if (pubKey.length !== 64) {\n        throw new Error('Expected pubKey to be of length 64');\n    }\n    // Only take the lower 160bits of the hash\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(pubKey).subarray(-20);\n};\nconst publicToAddress = pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nconst privateToPublic = function (privateKey) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(privateKey);\n    // skip the type flag and use the X, Y points\n    return ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(false).slice(1);\n};\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nconst privateToAddress = function (privateKey) {\n    return publicToAddress(privateToPublic(privateKey));\n};\n/**\n * Converts a public key to the Ethereum format.\n */\nconst importPublic = function (publicKey) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(publicKey);\n    if (publicKey.length !== 64) {\n        publicKey = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex(publicKey).toRawBytes(false).slice(1);\n    }\n    return publicKey;\n};\n/**\n * Returns the zero address.\n */\nconst zeroAddress = function () {\n    const addressLength = 20;\n    const addr = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.zeros)(addressLength);\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)(addr);\n};\n/**\n * Checks if a given address is the zero address.\n */\nconst isZeroAddress = function (hexAddress) {\n    try {\n        (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsString)(hexAddress);\n    }\n    catch (e) {\n        return false;\n    }\n    const zeroAddr = zeroAddress();\n    return zeroAddr === hexAddress;\n};\nfunction accountBodyFromSlim(body) {\n    const [nonce, balance, storageRoot, codeHash] = body;\n    return [\n        nonce,\n        balance,\n        storageRoot.length === 0 ? _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_RLP : storageRoot,\n        codeHash.length === 0 ? _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL : codeHash,\n    ];\n}\nconst emptyUint8Arr = new Uint8Array(0);\nfunction accountBodyToSlim(body) {\n    const [nonce, balance, storageRoot, codeHash] = body;\n    return [\n        nonce,\n        balance,\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(storageRoot, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_RLP) ? emptyUint8Arr : storageRoot,\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(codeHash, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL) ? emptyUint8Arr : codeHash,\n    ];\n}\n/**\n * Converts a slim account (per snap protocol spec) to the RLP encoded version of the account\n * @param body Array of 4 Uint8Array-like items to represent the account\n * @returns RLP encoded version of the account\n */\nfunction accountBodyToRLP(body, couldBeSlim = true) {\n    const accountBody = couldBeSlim ? accountBodyFromSlim(body) : body;\n    return _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(accountBody);\n}\n//# sourceMappingURL=account.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/address.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/address.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Address: () => (/* binding */ Address)\n/* harmony export */ });\n/* harmony import */ var _account_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./account.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/account.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n\n\n\n/**\n * Handling and generating Ethereum addresses\n */\nclass Address {\n    constructor(bytes) {\n        if (bytes.length !== 20) {\n            throw new Error('Invalid address length');\n        }\n        this.bytes = bytes;\n    }\n    /**\n     * Returns the zero address.\n     */\n    static zero() {\n        return new Address((0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.zeros)(20));\n    }\n    /**\n     * Returns an Address object from a hex-encoded string.\n     * @param str - Hex-encoded address\n     */\n    static fromString(str) {\n        if (!(0,_account_js__WEBPACK_IMPORTED_MODULE_0__.isValidAddress)(str)) {\n            throw new Error('Invalid address');\n        }\n        return new Address((0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(str));\n    }\n    /**\n     * Returns an address for a given public key.\n     * @param pubKey The two points of an uncompressed key\n     */\n    static fromPublicKey(pubKey) {\n        if (!(pubKey instanceof Uint8Array)) {\n            throw new Error('Public key should be Uint8Array');\n        }\n        const bytes = (0,_account_js__WEBPACK_IMPORTED_MODULE_0__.pubToAddress)(pubKey);\n        return new Address(bytes);\n    }\n    /**\n     * Returns an address for a given private key.\n     * @param privateKey A private key must be 256 bits wide\n     */\n    static fromPrivateKey(privateKey) {\n        if (!(privateKey instanceof Uint8Array)) {\n            throw new Error('Private key should be Uint8Array');\n        }\n        const bytes = (0,_account_js__WEBPACK_IMPORTED_MODULE_0__.privateToAddress)(privateKey);\n        return new Address(bytes);\n    }\n    /**\n     * Generates an address for a newly created contract.\n     * @param from The address which is creating this new address\n     * @param nonce The nonce of the from account\n     */\n    static generate(from, nonce) {\n        if (typeof nonce !== 'bigint') {\n            throw new Error('Expected nonce to be a bigint');\n        }\n        return new Address((0,_account_js__WEBPACK_IMPORTED_MODULE_0__.generateAddress)(from.bytes, (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToBytes)(nonce)));\n    }\n    /**\n     * Generates an address for a contract created using CREATE2.\n     * @param from The address which is creating this new address\n     * @param salt A salt\n     * @param initCode The init code of the contract being created\n     */\n    static generate2(from, salt, initCode) {\n        if (!(salt instanceof Uint8Array)) {\n            throw new Error('Expected salt to be a Uint8Array');\n        }\n        if (!(initCode instanceof Uint8Array)) {\n            throw new Error('Expected initCode to be a Uint8Array');\n        }\n        return new Address((0,_account_js__WEBPACK_IMPORTED_MODULE_0__.generateAddress2)(from.bytes, salt, initCode));\n    }\n    /**\n     * Is address equal to another.\n     */\n    equals(address) {\n        return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.equalsBytes)(this.bytes, address.bytes);\n    }\n    /**\n     * Is address zero.\n     */\n    isZero() {\n        return this.equals(Address.zero());\n    }\n    /**\n     * True if address is in the address range defined\n     * by EIP-1352\n     */\n    isPrecompileOrSystemAddress() {\n        const address = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(this.bytes);\n        const rangeMin = _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0;\n        const rangeMax = BigInt('0xffff');\n        return address >= rangeMin && address <= rangeMax;\n    }\n    /**\n     * Returns hex encoding of address.\n     */\n    toString() {\n        return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(this.bytes);\n    }\n    /**\n     * Returns a new Uint8Array representation of address.\n     */\n    toBytes() {\n        return new Uint8Array(this.bytes);\n    }\n}\n//# sourceMappingURL=address.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2FkZHJlc3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFrSDtBQUNmO0FBQ3pEO0FBQzFDO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsZ0RBQUs7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSwyREFBYztBQUMzQjtBQUNBO0FBQ0EsMkJBQTJCLGtEQUFPO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix5REFBWTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw2REFBZ0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiw0REFBZSxhQUFhLHdEQUFhO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsNkRBQWdCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHNEQUFXO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3REFBYTtBQUNyQyx5QkFBeUIsbURBQVE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHFEQUFVO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXdhbGxldC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jhc2UtY29udHJvbGxlcnMvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vYWRkcmVzcy5qcz85MGE4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdlbmVyYXRlQWRkcmVzcywgZ2VuZXJhdGVBZGRyZXNzMiwgaXNWYWxpZEFkZHJlc3MsIHByaXZhdGVUb0FkZHJlc3MsIHB1YlRvQWRkcmVzcywgfSBmcm9tICcuL2FjY291bnQuanMnO1xuaW1wb3J0IHsgYmlnSW50VG9CeXRlcywgYnl0ZXNUb0JpZ0ludCwgYnl0ZXNUb0hleCwgZXF1YWxzQnl0ZXMsIHRvQnl0ZXMsIHplcm9zIH0gZnJvbSAnLi9ieXRlcy5qcyc7XG5pbXBvcnQgeyBCSUdJTlRfMCB9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbi8qKlxuICogSGFuZGxpbmcgYW5kIGdlbmVyYXRpbmcgRXRoZXJldW0gYWRkcmVzc2VzXG4gKi9cbmV4cG9ydCBjbGFzcyBBZGRyZXNzIHtcbiAgICBjb25zdHJ1Y3RvcihieXRlcykge1xuICAgICAgICBpZiAoYnl0ZXMubGVuZ3RoICE9PSAyMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGFkZHJlc3MgbGVuZ3RoJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ieXRlcyA9IGJ5dGVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB6ZXJvIGFkZHJlc3MuXG4gICAgICovXG4gICAgc3RhdGljIHplcm8oKSB7XG4gICAgICAgIHJldHVybiBuZXcgQWRkcmVzcyh6ZXJvcygyMCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIEFkZHJlc3Mgb2JqZWN0IGZyb20gYSBoZXgtZW5jb2RlZCBzdHJpbmcuXG4gICAgICogQHBhcmFtIHN0ciAtIEhleC1lbmNvZGVkIGFkZHJlc3NcbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVN0cmluZyhzdHIpIHtcbiAgICAgICAgaWYgKCFpc1ZhbGlkQWRkcmVzcyhzdHIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYWRkcmVzcycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQWRkcmVzcyh0b0J5dGVzKHN0cikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFkZHJlc3MgZm9yIGEgZ2l2ZW4gcHVibGljIGtleS5cbiAgICAgKiBAcGFyYW0gcHViS2V5IFRoZSB0d28gcG9pbnRzIG9mIGFuIHVuY29tcHJlc3NlZCBrZXlcbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVB1YmxpY0tleShwdWJLZXkpIHtcbiAgICAgICAgaWYgKCEocHViS2V5IGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUHVibGljIGtleSBzaG91bGQgYmUgVWludDhBcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gcHViVG9BZGRyZXNzKHB1YktleSk7XG4gICAgICAgIHJldHVybiBuZXcgQWRkcmVzcyhieXRlcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYWRkcmVzcyBmb3IgYSBnaXZlbiBwcml2YXRlIGtleS5cbiAgICAgKiBAcGFyYW0gcHJpdmF0ZUtleSBBIHByaXZhdGUga2V5IG11c3QgYmUgMjU2IGJpdHMgd2lkZVxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tUHJpdmF0ZUtleShwcml2YXRlS2V5KSB7XG4gICAgICAgIGlmICghKHByaXZhdGVLZXkgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQcml2YXRlIGtleSBzaG91bGQgYmUgVWludDhBcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gcHJpdmF0ZVRvQWRkcmVzcyhwcml2YXRlS2V5KTtcbiAgICAgICAgcmV0dXJuIG5ldyBBZGRyZXNzKGJ5dGVzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGFuIGFkZHJlc3MgZm9yIGEgbmV3bHkgY3JlYXRlZCBjb250cmFjdC5cbiAgICAgKiBAcGFyYW0gZnJvbSBUaGUgYWRkcmVzcyB3aGljaCBpcyBjcmVhdGluZyB0aGlzIG5ldyBhZGRyZXNzXG4gICAgICogQHBhcmFtIG5vbmNlIFRoZSBub25jZSBvZiB0aGUgZnJvbSBhY2NvdW50XG4gICAgICovXG4gICAgc3RhdGljIGdlbmVyYXRlKGZyb20sIG5vbmNlKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygbm9uY2UgIT09ICdiaWdpbnQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIG5vbmNlIHRvIGJlIGEgYmlnaW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBBZGRyZXNzKGdlbmVyYXRlQWRkcmVzcyhmcm9tLmJ5dGVzLCBiaWdJbnRUb0J5dGVzKG5vbmNlKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYW4gYWRkcmVzcyBmb3IgYSBjb250cmFjdCBjcmVhdGVkIHVzaW5nIENSRUFURTIuXG4gICAgICogQHBhcmFtIGZyb20gVGhlIGFkZHJlc3Mgd2hpY2ggaXMgY3JlYXRpbmcgdGhpcyBuZXcgYWRkcmVzc1xuICAgICAqIEBwYXJhbSBzYWx0IEEgc2FsdFxuICAgICAqIEBwYXJhbSBpbml0Q29kZSBUaGUgaW5pdCBjb2RlIG9mIHRoZSBjb250cmFjdCBiZWluZyBjcmVhdGVkXG4gICAgICovXG4gICAgc3RhdGljIGdlbmVyYXRlMihmcm9tLCBzYWx0LCBpbml0Q29kZSkge1xuICAgICAgICBpZiAoIShzYWx0IGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgc2FsdCB0byBiZSBhIFVpbnQ4QXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShpbml0Q29kZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGluaXRDb2RlIHRvIGJlIGEgVWludDhBcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQWRkcmVzcyhnZW5lcmF0ZUFkZHJlc3MyKGZyb20uYnl0ZXMsIHNhbHQsIGluaXRDb2RlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElzIGFkZHJlc3MgZXF1YWwgdG8gYW5vdGhlci5cbiAgICAgKi9cbiAgICBlcXVhbHMoYWRkcmVzcykge1xuICAgICAgICByZXR1cm4gZXF1YWxzQnl0ZXModGhpcy5ieXRlcywgYWRkcmVzcy5ieXRlcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElzIGFkZHJlc3MgemVyby5cbiAgICAgKi9cbiAgICBpc1plcm8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVxdWFscyhBZGRyZXNzLnplcm8oKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRydWUgaWYgYWRkcmVzcyBpcyBpbiB0aGUgYWRkcmVzcyByYW5nZSBkZWZpbmVkXG4gICAgICogYnkgRUlQLTEzNTJcbiAgICAgKi9cbiAgICBpc1ByZWNvbXBpbGVPclN5c3RlbUFkZHJlc3MoKSB7XG4gICAgICAgIGNvbnN0IGFkZHJlc3MgPSBieXRlc1RvQmlnSW50KHRoaXMuYnl0ZXMpO1xuICAgICAgICBjb25zdCByYW5nZU1pbiA9IEJJR0lOVF8wO1xuICAgICAgICBjb25zdCByYW5nZU1heCA9IEJpZ0ludCgnMHhmZmZmJyk7XG4gICAgICAgIHJldHVybiBhZGRyZXNzID49IHJhbmdlTWluICYmIGFkZHJlc3MgPD0gcmFuZ2VNYXg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaGV4IGVuY29kaW5nIG9mIGFkZHJlc3MuXG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBieXRlc1RvSGV4KHRoaXMuYnl0ZXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFVpbnQ4QXJyYXkgcmVwcmVzZW50YXRpb24gb2YgYWRkcmVzcy5cbiAgICAgKi9cbiAgICB0b0J5dGVzKCkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkodGhpcy5ieXRlcyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkcmVzcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncEventEmitter: () => (/* binding */ AsyncEventEmitter)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/**\n * Ported to Typescript from original implementation below:\n * https://github.com/ahultgren/async-eventemitter -- MIT licensed\n *\n * Type Definitions based on work by: patarapolw <https://github.com/patarapolw> -- MIT licensed\n * that was contributed to Definitely Typed below:\n * https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/async-eventemitter\n */\n\nasync function runInSeries(context, tasks, data) {\n    let error;\n    for await (const task of tasks) {\n        try {\n            if (task.length < 2) {\n                //sync\n                task.call(context, data);\n            }\n            else {\n                await new Promise((resolve, reject) => {\n                    task.call(context, data, (error) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            resolve();\n                        }\n                    });\n                });\n            }\n        }\n        catch (e) {\n            error = e;\n        }\n    }\n    if (error) {\n        throw error;\n    }\n}\nclass AsyncEventEmitter extends events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n    emit(event, ...args) {\n        let [data, callback] = args;\n        const self = this;\n        let listeners = self._events[event] ?? [];\n        // Optional data argument\n        if (callback === undefined && typeof data === 'function') {\n            callback = data;\n            data = undefined;\n        }\n        // Special treatment of internal newListener and removeListener events\n        if (event === 'newListener' || event === 'removeListener') {\n            data = {\n                event: data,\n                fn: callback,\n            };\n            callback = undefined;\n        }\n        // A single listener is just a function not an array...\n        listeners = Array.isArray(listeners) ? listeners : [listeners];\n        runInSeries(self, listeners.slice(), data).then(callback).catch(callback);\n        return self.listenerCount(event) > 0;\n    }\n    once(event, listener) {\n        const self = this;\n        let g;\n        if (typeof listener !== 'function') {\n            throw new TypeError('listener must be a function');\n        }\n        // Hack to support set arity\n        if (listener.length >= 2) {\n            g = function (e, next) {\n                self.removeListener(event, g);\n                void listener(e, next);\n            };\n        }\n        else {\n            g = function (e) {\n                self.removeListener(event, g);\n                void listener(e, g);\n            };\n        }\n        self.on(event, g);\n        return self;\n    }\n    first(event, listener) {\n        let listeners = this._events[event] ?? [];\n        // Contract\n        if (typeof listener !== 'function') {\n            throw new TypeError('listener must be a function');\n        }\n        // Listeners are not always an array\n        if (!Array.isArray(listeners)) {\n            ;\n            this._events[event] = listeners = [listeners];\n        }\n        listeners.unshift(listener);\n        return this;\n    }\n    before(event, target, listener) {\n        return this.beforeOrAfter(event, target, listener);\n    }\n    after(event, target, listener) {\n        return this.beforeOrAfter(event, target, listener, 'after');\n    }\n    beforeOrAfter(event, target, listener, beforeOrAfter) {\n        let listeners = this._events[event] ?? [];\n        let i;\n        let index;\n        const add = beforeOrAfter === 'after' ? 1 : 0;\n        // Contract\n        if (typeof listener !== 'function') {\n            throw new TypeError('listener must be a function');\n        }\n        if (typeof target !== 'function') {\n            throw new TypeError('target must be a function');\n        }\n        // Listeners are not always an array\n        if (!Array.isArray(listeners)) {\n            ;\n            this._events[event] = listeners = [listeners];\n        }\n        index = listeners.length;\n        for (i = listeners.length; i--;) {\n            if (listeners[i] === target) {\n                index = i + add;\n                break;\n            }\n        }\n        listeners.splice(index, 0, listener);\n        return this;\n    }\n    on(event, listener) {\n        return super.on(event, listener);\n    }\n    addListener(event, listener) {\n        return super.addListener(event, listener);\n    }\n    prependListener(event, listener) {\n        return super.prependListener(event, listener);\n    }\n    prependOnceListener(event, listener) {\n        return super.prependOnceListener(event, listener);\n    }\n    removeAllListeners(event) {\n        return super.removeAllListeners(event);\n    }\n    removeListener(event, listener) {\n        return super.removeListener(event, listener);\n    }\n    eventNames() {\n        return super.eventNames();\n    }\n    listeners(event) {\n        return super.listeners(event);\n    }\n    listenerCount(event) {\n        return super.listenerCount(event);\n    }\n    getMaxListeners() {\n        return super.getMaxListeners();\n    }\n    setMaxListeners(maxListeners) {\n        return super.setMaxListeners(maxListeners);\n    }\n}\n//# sourceMappingURL=asyncEventEmitter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/blobs.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/blobs.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blobsToCommitments: () => (/* binding */ blobsToCommitments),\n/* harmony export */   blobsToProofs: () => (/* binding */ blobsToProofs),\n/* harmony export */   commitmentsToVersionedHashes: () => (/* binding */ commitmentsToVersionedHashes),\n/* harmony export */   computeVersionedHash: () => (/* binding */ computeVersionedHash),\n/* harmony export */   getBlobs: () => (/* binding */ getBlobs)\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_sha256_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/sha256.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/sha256.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n\n\n/**\n * These utilities for constructing blobs are borrowed from https://github.com/Inphi/eip4844-interop.git\n */\nconst BYTES_PER_FIELD_ELEMENT = 32;\nconst FIELD_ELEMENTS_PER_BLOB = 4096;\nconst USEFUL_BYTES_PER_BLOB = 32 * FIELD_ELEMENTS_PER_BLOB;\nconst MAX_BLOBS_PER_TX = 2;\nconst MAX_USEFUL_BYTES_PER_TX = USEFUL_BYTES_PER_BLOB * MAX_BLOBS_PER_TX - 1;\nconst BLOB_SIZE = BYTES_PER_FIELD_ELEMENT * FIELD_ELEMENTS_PER_BLOB;\nfunction get_padded(data, blobs_len) {\n    const pdata = new Uint8Array(blobs_len * USEFUL_BYTES_PER_BLOB).fill(0);\n    pdata.set(data);\n    pdata[data.byteLength] = 0x80;\n    return pdata;\n}\nfunction get_blob(data) {\n    const blob = new Uint8Array(BLOB_SIZE);\n    for (let i = 0; i < FIELD_ELEMENTS_PER_BLOB; i++) {\n        const chunk = new Uint8Array(32);\n        chunk.set(data.subarray(i * 31, (i + 1) * 31), 0);\n        blob.set(chunk, i * 32);\n    }\n    return blob;\n}\nconst getBlobs = (input) => {\n    const data = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes)(input);\n    const len = data.byteLength;\n    if (len === 0) {\n        throw Error('invalid blob data');\n    }\n    if (len > MAX_USEFUL_BYTES_PER_TX) {\n        throw Error('blob data is too large');\n    }\n    const blobs_len = Math.ceil(len / USEFUL_BYTES_PER_BLOB);\n    const pdata = get_padded(data, blobs_len);\n    const blobs = [];\n    for (let i = 0; i < blobs_len; i++) {\n        const chunk = pdata.subarray(i * USEFUL_BYTES_PER_BLOB, (i + 1) * USEFUL_BYTES_PER_BLOB);\n        const blob = get_blob(chunk);\n        blobs.push(blob);\n    }\n    return blobs;\n};\nconst blobsToCommitments = (kzg, blobs) => {\n    const commitments = [];\n    for (const blob of blobs) {\n        commitments.push(kzg.blobToKzgCommitment(blob));\n    }\n    return commitments;\n};\nconst blobsToProofs = (kzg, blobs, commitments) => {\n    const proofs = blobs.map((blob, ctx) => kzg.computeBlobKzgProof(blob, commitments[ctx]));\n    return proofs;\n};\n/**\n * Converts a vector commitment for a given data blob to its versioned hash.  For 4844, this version\n * number will be 0x01 for KZG vector commitments but could be different if future vector commitment\n * types are introduced\n * @param commitment a vector commitment to a blob\n * @param blobCommitmentVersion the version number corresponding to the type of vector commitment\n * @returns a versioned hash corresponding to a given blob vector commitment\n */\nconst computeVersionedHash = (commitment, blobCommitmentVersion) => {\n    const computedVersionedHash = new Uint8Array(32);\n    computedVersionedHash.set([blobCommitmentVersion], 0);\n    computedVersionedHash.set((0,ethereum_cryptography_sha256_js__WEBPACK_IMPORTED_MODULE_0__.sha256)(commitment).subarray(1), 1);\n    return computedVersionedHash;\n};\n/**\n * Generate an array of versioned hashes from corresponding kzg commitments\n * @param commitments array of kzg commitments\n * @returns array of versioned hashes\n * Note: assumes KZG commitments (version 1 version hashes)\n */\nconst commitmentsToVersionedHashes = (commitments) => {\n    const hashes = [];\n    for (const commitment of commitments) {\n        hashes.push(computeVersionedHash(commitment, 0x01));\n    }\n    return hashes;\n};\n//# sourceMappingURL=blobs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2Jsb2JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBeUQ7QUFDaEI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw2QkFBNkI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxpQkFBaUIsc0RBQVc7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZUFBZTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLDhCQUE4Qix1RUFBTTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXdhbGxldC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jhc2UtY29udHJvbGxlcnMvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vYmxvYnMuanM/NTI2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzaGEyNTYgfSBmcm9tICdldGhlcmV1bS1jcnlwdG9ncmFwaHkvc2hhMjU2LmpzJztcbmltcG9ydCB7IHV0ZjhUb0J5dGVzIH0gZnJvbSAnLi9ieXRlcy5qcyc7XG4vKipcbiAqIFRoZXNlIHV0aWxpdGllcyBmb3IgY29uc3RydWN0aW5nIGJsb2JzIGFyZSBib3Jyb3dlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9JbnBoaS9laXA0ODQ0LWludGVyb3AuZ2l0XG4gKi9cbmNvbnN0IEJZVEVTX1BFUl9GSUVMRF9FTEVNRU5UID0gMzI7XG5jb25zdCBGSUVMRF9FTEVNRU5UU19QRVJfQkxPQiA9IDQwOTY7XG5jb25zdCBVU0VGVUxfQllURVNfUEVSX0JMT0IgPSAzMiAqIEZJRUxEX0VMRU1FTlRTX1BFUl9CTE9CO1xuY29uc3QgTUFYX0JMT0JTX1BFUl9UWCA9IDI7XG5jb25zdCBNQVhfVVNFRlVMX0JZVEVTX1BFUl9UWCA9IFVTRUZVTF9CWVRFU19QRVJfQkxPQiAqIE1BWF9CTE9CU19QRVJfVFggLSAxO1xuY29uc3QgQkxPQl9TSVpFID0gQllURVNfUEVSX0ZJRUxEX0VMRU1FTlQgKiBGSUVMRF9FTEVNRU5UU19QRVJfQkxPQjtcbmZ1bmN0aW9uIGdldF9wYWRkZWQoZGF0YSwgYmxvYnNfbGVuKSB7XG4gICAgY29uc3QgcGRhdGEgPSBuZXcgVWludDhBcnJheShibG9ic19sZW4gKiBVU0VGVUxfQllURVNfUEVSX0JMT0IpLmZpbGwoMCk7XG4gICAgcGRhdGEuc2V0KGRhdGEpO1xuICAgIHBkYXRhW2RhdGEuYnl0ZUxlbmd0aF0gPSAweDgwO1xuICAgIHJldHVybiBwZGF0YTtcbn1cbmZ1bmN0aW9uIGdldF9ibG9iKGRhdGEpIHtcbiAgICBjb25zdCBibG9iID0gbmV3IFVpbnQ4QXJyYXkoQkxPQl9TSVpFKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IEZJRUxEX0VMRU1FTlRTX1BFUl9CTE9COyBpKyspIHtcbiAgICAgICAgY29uc3QgY2h1bmsgPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgICAgIGNodW5rLnNldChkYXRhLnN1YmFycmF5KGkgKiAzMSwgKGkgKyAxKSAqIDMxKSwgMCk7XG4gICAgICAgIGJsb2Iuc2V0KGNodW5rLCBpICogMzIpO1xuICAgIH1cbiAgICByZXR1cm4gYmxvYjtcbn1cbmV4cG9ydCBjb25zdCBnZXRCbG9icyA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IGRhdGEgPSB1dGY4VG9CeXRlcyhpbnB1dCk7XG4gICAgY29uc3QgbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ2ludmFsaWQgYmxvYiBkYXRhJyk7XG4gICAgfVxuICAgIGlmIChsZW4gPiBNQVhfVVNFRlVMX0JZVEVTX1BFUl9UWCkge1xuICAgICAgICB0aHJvdyBFcnJvcignYmxvYiBkYXRhIGlzIHRvbyBsYXJnZScpO1xuICAgIH1cbiAgICBjb25zdCBibG9ic19sZW4gPSBNYXRoLmNlaWwobGVuIC8gVVNFRlVMX0JZVEVTX1BFUl9CTE9CKTtcbiAgICBjb25zdCBwZGF0YSA9IGdldF9wYWRkZWQoZGF0YSwgYmxvYnNfbGVuKTtcbiAgICBjb25zdCBibG9icyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmxvYnNfbGVuOyBpKyspIHtcbiAgICAgICAgY29uc3QgY2h1bmsgPSBwZGF0YS5zdWJhcnJheShpICogVVNFRlVMX0JZVEVTX1BFUl9CTE9CLCAoaSArIDEpICogVVNFRlVMX0JZVEVTX1BFUl9CTE9CKTtcbiAgICAgICAgY29uc3QgYmxvYiA9IGdldF9ibG9iKGNodW5rKTtcbiAgICAgICAgYmxvYnMucHVzaChibG9iKTtcbiAgICB9XG4gICAgcmV0dXJuIGJsb2JzO1xufTtcbmV4cG9ydCBjb25zdCBibG9ic1RvQ29tbWl0bWVudHMgPSAoa3pnLCBibG9icykgPT4ge1xuICAgIGNvbnN0IGNvbW1pdG1lbnRzID0gW107XG4gICAgZm9yIChjb25zdCBibG9iIG9mIGJsb2JzKSB7XG4gICAgICAgIGNvbW1pdG1lbnRzLnB1c2goa3pnLmJsb2JUb0t6Z0NvbW1pdG1lbnQoYmxvYikpO1xuICAgIH1cbiAgICByZXR1cm4gY29tbWl0bWVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGJsb2JzVG9Qcm9vZnMgPSAoa3pnLCBibG9icywgY29tbWl0bWVudHMpID0+IHtcbiAgICBjb25zdCBwcm9vZnMgPSBibG9icy5tYXAoKGJsb2IsIGN0eCkgPT4ga3pnLmNvbXB1dGVCbG9iS3pnUHJvb2YoYmxvYiwgY29tbWl0bWVudHNbY3R4XSkpO1xuICAgIHJldHVybiBwcm9vZnM7XG59O1xuLyoqXG4gKiBDb252ZXJ0cyBhIHZlY3RvciBjb21taXRtZW50IGZvciBhIGdpdmVuIGRhdGEgYmxvYiB0byBpdHMgdmVyc2lvbmVkIGhhc2guICBGb3IgNDg0NCwgdGhpcyB2ZXJzaW9uXG4gKiBudW1iZXIgd2lsbCBiZSAweDAxIGZvciBLWkcgdmVjdG9yIGNvbW1pdG1lbnRzIGJ1dCBjb3VsZCBiZSBkaWZmZXJlbnQgaWYgZnV0dXJlIHZlY3RvciBjb21taXRtZW50XG4gKiB0eXBlcyBhcmUgaW50cm9kdWNlZFxuICogQHBhcmFtIGNvbW1pdG1lbnQgYSB2ZWN0b3IgY29tbWl0bWVudCB0byBhIGJsb2JcbiAqIEBwYXJhbSBibG9iQ29tbWl0bWVudFZlcnNpb24gdGhlIHZlcnNpb24gbnVtYmVyIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHR5cGUgb2YgdmVjdG9yIGNvbW1pdG1lbnRcbiAqIEByZXR1cm5zIGEgdmVyc2lvbmVkIGhhc2ggY29ycmVzcG9uZGluZyB0byBhIGdpdmVuIGJsb2IgdmVjdG9yIGNvbW1pdG1lbnRcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbXB1dGVWZXJzaW9uZWRIYXNoID0gKGNvbW1pdG1lbnQsIGJsb2JDb21taXRtZW50VmVyc2lvbikgPT4ge1xuICAgIGNvbnN0IGNvbXB1dGVkVmVyc2lvbmVkSGFzaCA9IG5ldyBVaW50OEFycmF5KDMyKTtcbiAgICBjb21wdXRlZFZlcnNpb25lZEhhc2guc2V0KFtibG9iQ29tbWl0bWVudFZlcnNpb25dLCAwKTtcbiAgICBjb21wdXRlZFZlcnNpb25lZEhhc2guc2V0KHNoYTI1Nihjb21taXRtZW50KS5zdWJhcnJheSgxKSwgMSk7XG4gICAgcmV0dXJuIGNvbXB1dGVkVmVyc2lvbmVkSGFzaDtcbn07XG4vKipcbiAqIEdlbmVyYXRlIGFuIGFycmF5IG9mIHZlcnNpb25lZCBoYXNoZXMgZnJvbSBjb3JyZXNwb25kaW5nIGt6ZyBjb21taXRtZW50c1xuICogQHBhcmFtIGNvbW1pdG1lbnRzIGFycmF5IG9mIGt6ZyBjb21taXRtZW50c1xuICogQHJldHVybnMgYXJyYXkgb2YgdmVyc2lvbmVkIGhhc2hlc1xuICogTm90ZTogYXNzdW1lcyBLWkcgY29tbWl0bWVudHMgKHZlcnNpb24gMSB2ZXJzaW9uIGhhc2hlcylcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbW1pdG1lbnRzVG9WZXJzaW9uZWRIYXNoZXMgPSAoY29tbWl0bWVudHMpID0+IHtcbiAgICBjb25zdCBoYXNoZXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGNvbW1pdG1lbnQgb2YgY29tbWl0bWVudHMpIHtcbiAgICAgICAgaGFzaGVzLnB1c2goY29tcHV0ZVZlcnNpb25lZEhhc2goY29tbWl0bWVudCwgMHgwMSkpO1xuICAgIH1cbiAgICByZXR1cm4gaGFzaGVzO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJsb2JzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/blobs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addHexPrefix: () => (/* binding */ addHexPrefix),\n/* harmony export */   bigInt64ToBytes: () => (/* binding */ bigInt64ToBytes),\n/* harmony export */   bigIntMax: () => (/* binding */ bigIntMax),\n/* harmony export */   bigIntMin: () => (/* binding */ bigIntMin),\n/* harmony export */   bigIntToBytes: () => (/* binding */ bigIntToBytes),\n/* harmony export */   bigIntToHex: () => (/* binding */ bigIntToHex),\n/* harmony export */   bigIntToUnpaddedBytes: () => (/* binding */ bigIntToUnpaddedBytes),\n/* harmony export */   bytesToBigInt: () => (/* binding */ bytesToBigInt),\n/* harmony export */   bytesToBigInt64: () => (/* binding */ bytesToBigInt64),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   bytesToInt: () => (/* binding */ bytesToInt),\n/* harmony export */   bytesToInt32: () => (/* binding */ bytesToInt32),\n/* harmony export */   bytesToUnprefixedHex: () => (/* binding */ bytesToUnprefixedHex),\n/* harmony export */   bytesToUtf8: () => (/* reexport safe */ ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToUtf8),\n/* harmony export */   compareBytes: () => (/* binding */ compareBytes),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   equalsBytes: () => (/* reexport safe */ ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.equalsBytes),\n/* harmony export */   fromSigned: () => (/* binding */ fromSigned),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   int32ToBytes: () => (/* binding */ int32ToBytes),\n/* harmony export */   intToBytes: () => (/* binding */ intToBytes),\n/* harmony export */   intToHex: () => (/* binding */ intToHex),\n/* harmony export */   intToUnpaddedBytes: () => (/* binding */ intToUnpaddedBytes),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   setLengthLeft: () => (/* binding */ setLengthLeft),\n/* harmony export */   setLengthRight: () => (/* binding */ setLengthRight),\n/* harmony export */   short: () => (/* binding */ short),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   toUnsigned: () => (/* binding */ toUnsigned),\n/* harmony export */   unpadArray: () => (/* binding */ unpadArray),\n/* harmony export */   unpadBytes: () => (/* binding */ unpadBytes),\n/* harmony export */   unpadHex: () => (/* binding */ unpadHex),\n/* harmony export */   unprefixedHexToBytes: () => (/* binding */ unprefixedHexToBytes),\n/* harmony export */   utf8ToBytes: () => (/* reexport safe */ ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes),\n/* harmony export */   validateNoLeadingZeroes: () => (/* binding */ validateNoLeadingZeroes),\n/* harmony export */   zeros: () => (/* binding */ zeros)\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_random_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/random.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/random.js\");\n/* harmony import */ var ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/utils.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/utils.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/helpers.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n// eslint-disable-next-line no-restricted-imports\n\n\n\nconst BIGINT_0 = BigInt(0);\n/**\n * @deprecated\n */\nconst bytesToUnprefixedHex = ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex;\n// hexToBytes cache\nconst hexToBytesMapFirstKey = {};\nconst hexToBytesMapSecondKey = {};\nfor (let i = 0; i < 16; i++) {\n    const vSecondKey = i;\n    const vFirstKey = i * 16;\n    const key = i.toString(16).toLowerCase();\n    hexToBytesMapSecondKey[key] = vSecondKey;\n    hexToBytesMapSecondKey[key.toUpperCase()] = vSecondKey;\n    hexToBytesMapFirstKey[key] = vFirstKey;\n    hexToBytesMapFirstKey[key.toUpperCase()] = vFirstKey;\n}\n/**\n * NOTE: only use this function if the string is even, and only consists of hex characters\n * If this is not the case, this function could return weird results\n * @deprecated\n */\nfunction _unprefixedHexToBytes(hex) {\n    const byteLen = hex.length;\n    const bytes = new Uint8Array(byteLen / 2);\n    for (let i = 0; i < byteLen; i += 2) {\n        bytes[i / 2] = hexToBytesMapFirstKey[hex[i]] + hexToBytesMapSecondKey[hex[i + 1]];\n    }\n    return bytes;\n}\n/**\n * @deprecated\n */\nconst unprefixedHexToBytes = (inp) => {\n    if (inp.slice(0, 2) === '0x') {\n        throw new Error('hex string is prefixed with 0x, should be unprefixed');\n    }\n    else {\n        return _unprefixedHexToBytes((0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.padToEven)(inp));\n    }\n};\n/****************  Borrowed from @chainsafe/ssz */\n// Caching this info costs about ~1000 bytes and speeds up toHexString() by x6\nconst hexByByte = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nconst bytesToHex = (bytes) => {\n    let hex = '0x';\n    if (bytes === undefined || bytes.length === 0)\n        return hex;\n    for (const byte of bytes) {\n        hex += hexByByte[byte];\n    }\n    return hex;\n};\n// BigInt cache for the numbers 0 - 256*256-1 (two-byte bytes)\nconst BIGINT_CACHE = [];\nfor (let i = 0; i <= 256 * 256 - 1; i++) {\n    BIGINT_CACHE[i] = BigInt(i);\n}\n/**\n * Converts a {@link Uint8Array} to a {@link bigint}\n * @param {Uint8Array} bytes the bytes to convert\n * @returns {bigint}\n */\nconst bytesToBigInt = (bytes, littleEndian = false) => {\n    if (littleEndian) {\n        bytes.reverse();\n    }\n    const hex = bytesToHex(bytes);\n    if (hex === '0x') {\n        return BIGINT_0;\n    }\n    if (hex.length === 4) {\n        // If the byte length is 1 (this is faster than checking `bytes.length === 1`)\n        return BIGINT_CACHE[bytes[0]];\n    }\n    if (hex.length === 6) {\n        return BIGINT_CACHE[bytes[0] * 256 + bytes[1]];\n    }\n    return BigInt(hex);\n};\n/**\n * Converts a {@link Uint8Array} to a {@link number}.\n * @param {Uint8Array} bytes the bytes to convert\n * @return  {number}\n * @throws If the input number exceeds 53 bits.\n */\nconst bytesToInt = (bytes) => {\n    const res = Number(bytesToBigInt(bytes));\n    if (!Number.isSafeInteger(res))\n        throw new Error('Number exceeds 53 bits');\n    return res;\n};\nconst hexToBytes = (hex) => {\n    if (typeof hex !== 'string') {\n        throw new Error(`hex argument type ${typeof hex} must be of type string`);\n    }\n    if (!/^0x[0-9a-fA-F]*$/.test(hex)) {\n        throw new Error(`Input must be a 0x-prefixed hexadecimal string, got ${hex}`);\n    }\n    hex = hex.slice(2);\n    if (hex.length % 2 !== 0) {\n        hex = (0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.padToEven)(hex);\n    }\n    return _unprefixedHexToBytes(hex);\n};\n/******************************************/\n/**\n * Converts a {@link number} into a {@link PrefixedHexString}\n * @param {number} i\n * @return {PrefixedHexString}\n */\nconst intToHex = (i) => {\n    if (!Number.isSafeInteger(i) || i < 0) {\n        throw new Error(`Received an invalid integer type: ${i}`);\n    }\n    return `0x${i.toString(16)}`;\n};\n/**\n * Converts an {@link number} to a {@link Uint8Array}\n * @param {Number} i\n * @return {Uint8Array}\n */\nconst intToBytes = (i) => {\n    const hex = intToHex(i);\n    return hexToBytes(hex);\n};\n/**\n * Converts a {@link bigint} to a {@link Uint8Array}\n *  * @param {bigint} num the bigint to convert\n * @returns {Uint8Array}\n */\nconst bigIntToBytes = (num, littleEndian = false) => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    const bytes = toBytes('0x' + (0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.padToEven)(num.toString(16)));\n    return littleEndian ? bytes.reverse() : bytes;\n};\n/**\n * Returns a Uint8Array filled with 0s.\n * @param {number} bytes the number of bytes of the Uint8Array\n * @return {Uint8Array}\n */\nconst zeros = (bytes) => {\n    return new Uint8Array(bytes);\n};\n/**\n * Pads a `Uint8Array` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @param {boolean} right whether to start padding form the left or right\n * @return {Uint8Array}\n */\nconst setLength = (msg, length, right) => {\n    if (right) {\n        if (msg.length < length) {\n            return new Uint8Array([...msg, ...zeros(length - msg.length)]);\n        }\n        return msg.subarray(0, length);\n    }\n    else {\n        if (msg.length < length) {\n            return new Uint8Array([...zeros(length - msg.length), ...msg]);\n        }\n        return msg.subarray(-length);\n    }\n};\n/**\n * Left Pads a `Uint8Array` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @return {Uint8Array}\n */\nconst setLengthLeft = (msg, length) => {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsBytes)(msg);\n    return setLength(msg, length, false);\n};\n/**\n * Right Pads a `Uint8Array` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @return {Uint8Array}\n */\nconst setLengthRight = (msg, length) => {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsBytes)(msg);\n    return setLength(msg, length, true);\n};\n/**\n * Trims leading zeros from a `Uint8Array`, `number[]` or PrefixedHexString`.\n * @param {Uint8Array|number[]|PrefixedHexString} a\n * @return {Uint8Array|number[]|PrefixedHexString}\n */\nconst stripZeros = (a) => {\n    let first = a[0];\n    while (a.length > 0 && first.toString() === '0') {\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n};\n/**\n * Trims leading zeros from a `Uint8Array`.\n * @param {Uint8Array} a\n * @return {Uint8Array}\n */\nconst unpadBytes = (a) => {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsBytes)(a);\n    return stripZeros(a);\n};\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param  {number[]} a\n * @return {number[]}\n */\nconst unpadArray = (a) => {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsArray)(a);\n    return stripZeros(a);\n};\n/**\n * Trims leading zeros from a `PrefixedHexString`.\n * @param {PrefixedHexString} a\n * @return {PrefixedHexString}\n */\nconst unpadHex = (a) => {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsHexString)(a);\n    a = (0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.stripHexPrefix)(a);\n    return '0x' + stripZeros(a);\n};\n/**\n * Attempts to turn a value into a `Uint8Array`.\n * Inputs supported: `Buffer`, `Uint8Array`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBytes()` method.\n * @param {ToBytesInputTypes} v the value\n * @return {Uint8Array}\n */\nconst toBytes = (v) => {\n    if (v === null || v === undefined) {\n        return new Uint8Array();\n    }\n    if (Array.isArray(v) || v instanceof Uint8Array) {\n        return Uint8Array.from(v);\n    }\n    if (typeof v === 'string') {\n        if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.isHexString)(v)) {\n            throw new Error(`Cannot convert string to Uint8Array. toBytes only supports 0x-prefixed hex strings and this string was given: ${v}`);\n        }\n        return hexToBytes(v);\n    }\n    if (typeof v === 'number') {\n        return intToBytes(v);\n    }\n    if (typeof v === 'bigint') {\n        if (v < BIGINT_0) {\n            throw new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);\n        }\n        let n = v.toString(16);\n        if (n.length % 2)\n            n = '0' + n;\n        return unprefixedHexToBytes(n);\n    }\n    if (v.toBytes !== undefined) {\n        // converts a `TransformableToBytes` object to a Uint8Array\n        return v.toBytes();\n    }\n    throw new Error('invalid type');\n};\n/**\n * Interprets a `Uint8Array` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param {Uint8Array} num Signed integer value\n * @returns {bigint}\n */\nconst fromSigned = (num) => {\n    return BigInt.asIntN(256, bytesToBigInt(num));\n};\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Uint8Array`. Assumes 256-bit numbers.\n * @param {bigint} num\n * @returns {Uint8Array}\n */\nconst toUnsigned = (num) => {\n    return bigIntToBytes(BigInt.asUintN(256, num));\n};\n/**\n * Adds \"0x\" to a given `string` if it does not already start with \"0x\".\n * @param {string} str\n * @return {PrefixedHexString}\n */\nconst addHexPrefix = (str) => {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.isHexPrefixed)(str) ? str : '0x' + str;\n};\n/**\n * Shortens a string  or Uint8Array's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n * @param {Uint8Array | string} bytes\n * @param {number} maxLength\n * @return {string}\n */\nconst short = (bytes, maxLength = 50) => {\n    const byteStr = bytes instanceof Uint8Array ? bytesToHex(bytes) : bytes;\n    const len = byteStr.slice(0, 2) === '0x' ? maxLength + 2 : maxLength;\n    if (byteStr.length <= len) {\n        return byteStr;\n    }\n    return byteStr.slice(0, len) + '…';\n};\n/**\n * Checks provided Uint8Array for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Uint8Array values\n * @throws if any provided value is found to have leading zero bytes\n */\nconst validateNoLeadingZeroes = (values) => {\n    for (const [k, v] of Object.entries(values)) {\n        if (v !== undefined && v.length > 0 && v[0] === 0) {\n            throw new Error(`${k} cannot have leading zeroes, received: ${bytesToHex(v)}`);\n        }\n    }\n};\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n * @param {bigint} num the bigint to convert\n * @returns {PrefixedHexString}\n */\nconst bigIntToHex = (num) => {\n    return '0x' + num.toString(16);\n};\n/**\n * Calculates max bigint from an array of bigints\n * @param args array of bigints\n */\nconst bigIntMax = (...args) => args.reduce((m, e) => (e > m ? e : m));\n/**\n * Calculates min BigInt from an array of BigInts\n * @param args array of bigints\n */\nconst bigIntMin = (...args) => args.reduce((m, e) => (e < m ? e : m));\n/**\n * Convert value from bigint to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param {bigint} value the bigint to convert\n * @returns {Uint8Array}\n */\nconst bigIntToUnpaddedBytes = (value) => {\n    return unpadBytes(bigIntToBytes(value));\n};\n/**\n * Convert value from number to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param {number} value the bigint to convert\n * @returns {Uint8Array}\n */\nconst intToUnpaddedBytes = (value) => {\n    return unpadBytes(intToBytes(value));\n};\n/**\n * Compares two Uint8Arrays and returns a number indicating their order in a sorted array.\n *\n * @param {Uint8Array} value1 - The first Uint8Array to compare.\n * @param {Uint8Array} value2 - The second Uint8Array to compare.\n * @returns {number} A positive number if value1 is larger than value2,\n *                   A negative number if value1 is smaller than value2,\n *                   or 0 if value1 and value2 are equal.\n */\nconst compareBytes = (value1, value2) => {\n    const bigIntValue1 = bytesToBigInt(value1);\n    const bigIntValue2 = bytesToBigInt(value2);\n    return bigIntValue1 > bigIntValue2 ? 1 : bigIntValue1 < bigIntValue2 ? -1 : 0;\n};\n/**\n * Generates a Uint8Array of random bytes of specified length.\n *\n * @param {number} length - The length of the Uint8Array.\n * @returns {Uint8Array} A Uint8Array of random bytes of specified length.\n */\nconst randomBytes = (length) => {\n    return (0,ethereum_cryptography_random_js__WEBPACK_IMPORTED_MODULE_0__.getRandomBytesSync)(length);\n};\n/**\n * This mirrors the functionality of the `ethereum-cryptography` export except\n * it skips the check to validate that every element of `arrays` is indead a `uint8Array`\n * Can give small performance gains on large arrays\n * @param {Uint8Array[]} arrays an array of Uint8Arrays\n * @returns {Uint8Array} one Uint8Array with all the elements of the original set\n * works like `Buffer.concat`\n */\nconst concatBytes = (...arrays) => {\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n};\n/**\n * @notice Convert a Uint8Array to a 32-bit integer\n * @param {Uint8Array} bytes The input Uint8Array from which to read the 32-bit integer.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {number} The 32-bit integer read from the input Uint8Array.\n */\nfunction bytesToInt32(bytes, littleEndian = false) {\n    if (bytes.length < 4) {\n        bytes = setLength(bytes, 4, littleEndian);\n    }\n    const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    return dataView.getUint32(0, littleEndian);\n}\n/**\n * @notice Convert a Uint8Array to a 64-bit bigint\n * @param {Uint8Array} bytes The input Uint8Array from which to read the 64-bit bigint.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {bigint} The 64-bit bigint read from the input Uint8Array.\n */\nfunction bytesToBigInt64(bytes, littleEndian = false) {\n    if (bytes.length < 8) {\n        bytes = setLength(bytes, 8, littleEndian);\n    }\n    const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    return dataView.getBigUint64(0, littleEndian);\n}\n/**\n * @notice Convert a 32-bit integer to a Uint8Array.\n * @param {number} value The 32-bit integer to convert.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {Uint8Array} A Uint8Array of length 4 containing the integer.\n */\nfunction int32ToBytes(value, littleEndian = false) {\n    const buffer = new ArrayBuffer(4);\n    const dataView = new DataView(buffer);\n    dataView.setUint32(0, value, littleEndian);\n    return new Uint8Array(buffer);\n}\n/**\n * @notice Convert a 64-bit bigint to a Uint8Array.\n * @param {bigint} value The 64-bit bigint to convert.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {Uint8Array} A Uint8Array of length 8 containing the bigint.\n */\nfunction bigInt64ToBytes(value, littleEndian = false) {\n    const buffer = new ArrayBuffer(8);\n    const dataView = new DataView(buffer);\n    dataView.setBigUint64(0, value, littleEndian);\n    return new Uint8Array(buffer);\n}\n// eslint-disable-next-line no-restricted-imports\n\n//# sourceMappingURL=bytes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/constants.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/constants.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BIGINT_0: () => (/* binding */ BIGINT_0),\n/* harmony export */   BIGINT_1: () => (/* binding */ BIGINT_1),\n/* harmony export */   BIGINT_100: () => (/* binding */ BIGINT_100),\n/* harmony export */   BIGINT_128: () => (/* binding */ BIGINT_128),\n/* harmony export */   BIGINT_160: () => (/* binding */ BIGINT_160),\n/* harmony export */   BIGINT_2: () => (/* binding */ BIGINT_2),\n/* harmony export */   BIGINT_224: () => (/* binding */ BIGINT_224),\n/* harmony export */   BIGINT_255: () => (/* binding */ BIGINT_255),\n/* harmony export */   BIGINT_256: () => (/* binding */ BIGINT_256),\n/* harmony export */   BIGINT_27: () => (/* binding */ BIGINT_27),\n/* harmony export */   BIGINT_28: () => (/* binding */ BIGINT_28),\n/* harmony export */   BIGINT_2EXP160: () => (/* binding */ BIGINT_2EXP160),\n/* harmony export */   BIGINT_2EXP224: () => (/* binding */ BIGINT_2EXP224),\n/* harmony export */   BIGINT_2EXP256: () => (/* binding */ BIGINT_2EXP256),\n/* harmony export */   BIGINT_2EXP96: () => (/* binding */ BIGINT_2EXP96),\n/* harmony export */   BIGINT_3: () => (/* binding */ BIGINT_3),\n/* harmony export */   BIGINT_31: () => (/* binding */ BIGINT_31),\n/* harmony export */   BIGINT_32: () => (/* binding */ BIGINT_32),\n/* harmony export */   BIGINT_64: () => (/* binding */ BIGINT_64),\n/* harmony export */   BIGINT_7: () => (/* binding */ BIGINT_7),\n/* harmony export */   BIGINT_8: () => (/* binding */ BIGINT_8),\n/* harmony export */   BIGINT_96: () => (/* binding */ BIGINT_96),\n/* harmony export */   BIGINT_NEG1: () => (/* binding */ BIGINT_NEG1),\n/* harmony export */   KECCAK256_NULL: () => (/* binding */ KECCAK256_NULL),\n/* harmony export */   KECCAK256_NULL_S: () => (/* binding */ KECCAK256_NULL_S),\n/* harmony export */   KECCAK256_RLP: () => (/* binding */ KECCAK256_RLP),\n/* harmony export */   KECCAK256_RLP_ARRAY: () => (/* binding */ KECCAK256_RLP_ARRAY),\n/* harmony export */   KECCAK256_RLP_ARRAY_S: () => (/* binding */ KECCAK256_RLP_ARRAY_S),\n/* harmony export */   KECCAK256_RLP_S: () => (/* binding */ KECCAK256_RLP_S),\n/* harmony export */   MAX_INTEGER: () => (/* binding */ MAX_INTEGER),\n/* harmony export */   MAX_INTEGER_BIGINT: () => (/* binding */ MAX_INTEGER_BIGINT),\n/* harmony export */   MAX_UINT64: () => (/* binding */ MAX_UINT64),\n/* harmony export */   MAX_WITHDRAWALS_PER_PAYLOAD: () => (/* binding */ MAX_WITHDRAWALS_PER_PAYLOAD),\n/* harmony export */   RIPEMD160_ADDRESS_STRING: () => (/* binding */ RIPEMD160_ADDRESS_STRING),\n/* harmony export */   RLP_EMPTY_STRING: () => (/* binding */ RLP_EMPTY_STRING),\n/* harmony export */   SECP256K1_ORDER: () => (/* binding */ SECP256K1_ORDER),\n/* harmony export */   SECP256K1_ORDER_DIV_2: () => (/* binding */ SECP256K1_ORDER_DIV_2),\n/* harmony export */   TWO_POW256: () => (/* binding */ TWO_POW256)\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/secp256k1.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/secp256k1.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n\n\n/**\n * 2^64-1\n */\nconst MAX_UINT64 = BigInt('0xffffffffffffffff');\n/**\n * The max integer that the evm can handle (2^256-1)\n */\nconst MAX_INTEGER = BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n/**\n * The max integer that the evm can handle (2^256-1) as a bigint\n * 2^256-1 equals to 340282366920938463463374607431768211455\n * We use literal value instead of calculated value for compatibility issue.\n */\nconst MAX_INTEGER_BIGINT = BigInt('115792089237316195423570985008687907853269984665640564039457584007913129639935');\nconst SECP256K1_ORDER = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_0__.secp256k1.CURVE.n;\nconst SECP256K1_ORDER_DIV_2 = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_0__.secp256k1.CURVE.n / BigInt(2);\n/**\n * 2^256\n */\nconst TWO_POW256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\n/**\n * Keccak-256 hash of null\n */\nconst KECCAK256_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n/**\n * Keccak-256 hash of null\n */\nconst KECCAK256_NULL = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(KECCAK256_NULL_S);\n/**\n * Keccak-256 of an RLP of an empty array\n */\nconst KECCAK256_RLP_ARRAY_S = '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';\n/**\n * Keccak-256 of an RLP of an empty array\n */\nconst KECCAK256_RLP_ARRAY = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(KECCAK256_RLP_ARRAY_S);\n/**\n * Keccak-256 hash of the RLP of null\n */\nconst KECCAK256_RLP_S = '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';\n/**\n * Keccak-256 hash of the RLP of null\n */\nconst KECCAK256_RLP = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(KECCAK256_RLP_S);\n/**\n *  RLP encoded empty string\n */\nconst RLP_EMPTY_STRING = Uint8Array.from([0x80]);\nconst MAX_WITHDRAWALS_PER_PAYLOAD = 16;\nconst RIPEMD160_ADDRESS_STRING = '0000000000000000000000000000000000000003';\n/**\n * BigInt constants\n */\nconst BIGINT_NEG1 = BigInt(-1);\nconst BIGINT_0 = BigInt(0);\nconst BIGINT_1 = BigInt(1);\nconst BIGINT_2 = BigInt(2);\nconst BIGINT_3 = BigInt(3);\nconst BIGINT_7 = BigInt(7);\nconst BIGINT_8 = BigInt(8);\nconst BIGINT_27 = BigInt(27);\nconst BIGINT_28 = BigInt(28);\nconst BIGINT_31 = BigInt(31);\nconst BIGINT_32 = BigInt(32);\nconst BIGINT_64 = BigInt(64);\nconst BIGINT_128 = BigInt(128);\nconst BIGINT_255 = BigInt(255);\nconst BIGINT_256 = BigInt(256);\nconst BIGINT_96 = BigInt(96);\nconst BIGINT_100 = BigInt(100);\nconst BIGINT_160 = BigInt(160);\nconst BIGINT_224 = BigInt(224);\nconst BIGINT_2EXP96 = BigInt(79228162514264337593543950336);\nconst BIGINT_2EXP160 = BigInt(1461501637330902918203684832716283019655932542976);\nconst BIGINT_2EXP224 = BigInt(26959946667150639794667015087019630673637144422540572481103610249216);\nconst BIGINT_2EXP256 = BIGINT_2 ** BIGINT_256;\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStEO0FBQ3ZCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDQSx3QkFBd0IseUVBQVM7QUFDakMsOEJBQThCLHlFQUFTO0FBQzlDO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTyx1QkFBdUIscURBQVU7QUFDeEM7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTyw0QkFBNEIscURBQVU7QUFDN0M7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTyxzQkFBc0IscURBQVU7QUFDdkM7QUFDQTtBQUNBO0FBQ087QUFDQTtBQUNBO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0Ly4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvYmFzZS1jb250cm9sbGVycy9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9jb25zdGFudHMuanM/ZDI2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZWNwMjU2azEgfSBmcm9tICdldGhlcmV1bS1jcnlwdG9ncmFwaHkvc2VjcDI1NmsxLmpzJztcbmltcG9ydCB7IGhleFRvQnl0ZXMgfSBmcm9tICcuL2J5dGVzLmpzJztcbi8qKlxuICogMl42NC0xXG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfVUlOVDY0ID0gQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmYnKTtcbi8qKlxuICogVGhlIG1heCBpbnRlZ2VyIHRoYXQgdGhlIGV2bSBjYW4gaGFuZGxlICgyXjI1Ni0xKVxuICovXG5leHBvcnQgY29uc3QgTUFYX0lOVEVHRVIgPSBCaWdJbnQoJzB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZicpO1xuLyoqXG4gKiBUaGUgbWF4IGludGVnZXIgdGhhdCB0aGUgZXZtIGNhbiBoYW5kbGUgKDJeMjU2LTEpIGFzIGEgYmlnaW50XG4gKiAyXjI1Ni0xIGVxdWFscyB0byAzNDAyODIzNjY5MjA5Mzg0NjM0NjMzNzQ2MDc0MzE3NjgyMTE0NTVcbiAqIFdlIHVzZSBsaXRlcmFsIHZhbHVlIGluc3RlYWQgb2YgY2FsY3VsYXRlZCB2YWx1ZSBmb3IgY29tcGF0aWJpbGl0eSBpc3N1ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9JTlRFR0VSX0JJR0lOVCA9IEJpZ0ludCgnMTE1NzkyMDg5MjM3MzE2MTk1NDIzNTcwOTg1MDA4Njg3OTA3ODUzMjY5OTg0NjY1NjQwNTY0MDM5NDU3NTg0MDA3OTEzMTI5NjM5OTM1Jyk7XG5leHBvcnQgY29uc3QgU0VDUDI1NksxX09SREVSID0gc2VjcDI1NmsxLkNVUlZFLm47XG5leHBvcnQgY29uc3QgU0VDUDI1NksxX09SREVSX0RJVl8yID0gc2VjcDI1NmsxLkNVUlZFLm4gLyBCaWdJbnQoMik7XG4vKipcbiAqIDJeMjU2XG4gKi9cbmV4cG9ydCBjb25zdCBUV09fUE9XMjU2ID0gQmlnSW50KCcweDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyk7XG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiBudWxsXG4gKi9cbmV4cG9ydCBjb25zdCBLRUNDQUsyNTZfTlVMTF9TID0gJzB4YzVkMjQ2MDE4NmY3MjMzYzkyN2U3ZGIyZGNjNzAzYzBlNTAwYjY1M2NhODIyNzNiN2JmYWQ4MDQ1ZDg1YTQ3MCc7XG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiBudWxsXG4gKi9cbmV4cG9ydCBjb25zdCBLRUNDQUsyNTZfTlVMTCA9IGhleFRvQnl0ZXMoS0VDQ0FLMjU2X05VTExfUyk7XG4vKipcbiAqIEtlY2Nhay0yNTYgb2YgYW4gUkxQIG9mIGFuIGVtcHR5IGFycmF5XG4gKi9cbmV4cG9ydCBjb25zdCBLRUNDQUsyNTZfUkxQX0FSUkFZX1MgPSAnMHgxZGNjNGRlOGRlYzc1ZDdhYWI4NWI1NjdiNmNjZDQxYWQzMTI0NTFiOTQ4YTc0MTNmMGExNDJmZDQwZDQ5MzQ3Jztcbi8qKlxuICogS2VjY2FrLTI1NiBvZiBhbiBSTFAgb2YgYW4gZW1wdHkgYXJyYXlcbiAqL1xuZXhwb3J0IGNvbnN0IEtFQ0NBSzI1Nl9STFBfQVJSQVkgPSBoZXhUb0J5dGVzKEtFQ0NBSzI1Nl9STFBfQVJSQVlfUyk7XG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiB0aGUgUkxQIG9mIG51bGxcbiAqL1xuZXhwb3J0IGNvbnN0IEtFQ0NBSzI1Nl9STFBfUyA9ICcweDU2ZTgxZjE3MWJjYzU1YTZmZjgzNDVlNjkyYzBmODZlNWI0OGUwMWI5OTZjYWRjMDAxNjIyZmI1ZTM2M2I0MjEnO1xuLyoqXG4gKiBLZWNjYWstMjU2IGhhc2ggb2YgdGhlIFJMUCBvZiBudWxsXG4gKi9cbmV4cG9ydCBjb25zdCBLRUNDQUsyNTZfUkxQID0gaGV4VG9CeXRlcyhLRUNDQUsyNTZfUkxQX1MpO1xuLyoqXG4gKiAgUkxQIGVuY29kZWQgZW1wdHkgc3RyaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBSTFBfRU1QVFlfU1RSSU5HID0gVWludDhBcnJheS5mcm9tKFsweDgwXSk7XG5leHBvcnQgY29uc3QgTUFYX1dJVEhEUkFXQUxTX1BFUl9QQVlMT0FEID0gMTY7XG5leHBvcnQgY29uc3QgUklQRU1EMTYwX0FERFJFU1NfU1RSSU5HID0gJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMnO1xuLyoqXG4gKiBCaWdJbnQgY29uc3RhbnRzXG4gKi9cbmV4cG9ydCBjb25zdCBCSUdJTlRfTkVHMSA9IEJpZ0ludCgtMSk7XG5leHBvcnQgY29uc3QgQklHSU5UXzAgPSBCaWdJbnQoMCk7XG5leHBvcnQgY29uc3QgQklHSU5UXzEgPSBCaWdJbnQoMSk7XG5leHBvcnQgY29uc3QgQklHSU5UXzIgPSBCaWdJbnQoMik7XG5leHBvcnQgY29uc3QgQklHSU5UXzMgPSBCaWdJbnQoMyk7XG5leHBvcnQgY29uc3QgQklHSU5UXzcgPSBCaWdJbnQoNyk7XG5leHBvcnQgY29uc3QgQklHSU5UXzggPSBCaWdJbnQoOCk7XG5leHBvcnQgY29uc3QgQklHSU5UXzI3ID0gQmlnSW50KDI3KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMjggPSBCaWdJbnQoMjgpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8zMSA9IEJpZ0ludCgzMSk7XG5leHBvcnQgY29uc3QgQklHSU5UXzMyID0gQmlnSW50KDMyKTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfNjQgPSBCaWdJbnQoNjQpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8xMjggPSBCaWdJbnQoMTI4KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMjU1ID0gQmlnSW50KDI1NSk7XG5leHBvcnQgY29uc3QgQklHSU5UXzI1NiA9IEJpZ0ludCgyNTYpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF85NiA9IEJpZ0ludCg5Nik7XG5leHBvcnQgY29uc3QgQklHSU5UXzEwMCA9IEJpZ0ludCgxMDApO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8xNjAgPSBCaWdJbnQoMTYwKTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMjI0ID0gQmlnSW50KDIyNCk7XG5leHBvcnQgY29uc3QgQklHSU5UXzJFWFA5NiA9IEJpZ0ludCg3OTIyODE2MjUxNDI2NDMzNzU5MzU0Mzk1MDMzNik7XG5leHBvcnQgY29uc3QgQklHSU5UXzJFWFAxNjAgPSBCaWdJbnQoMTQ2MTUwMTYzNzMzMDkwMjkxODIwMzY4NDgzMjcxNjI4MzAxOTY1NTkzMjU0Mjk3Nik7XG5leHBvcnQgY29uc3QgQklHSU5UXzJFWFAyMjQgPSBCaWdJbnQoMjY5NTk5NDY2NjcxNTA2Mzk3OTQ2NjcwMTUwODcwMTk2MzA2NzM2MzcxNDQ0MjI1NDA1NzI0ODExMDM2MTAyNDkyMTYpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8yRVhQMjU2ID0gQklHSU5UXzIgKiogQklHSU5UXzI1Njtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/db.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/db.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyEncoding: () => (/* binding */ KeyEncoding),\n/* harmony export */   ValueEncoding: () => (/* binding */ ValueEncoding)\n/* harmony export */ });\nvar KeyEncoding;\n(function (KeyEncoding) {\n    KeyEncoding[\"String\"] = \"string\";\n    KeyEncoding[\"Bytes\"] = \"view\";\n    KeyEncoding[\"Number\"] = \"number\";\n})(KeyEncoding || (KeyEncoding = {}));\nvar ValueEncoding;\n(function (ValueEncoding) {\n    ValueEncoding[\"String\"] = \"string\";\n    ValueEncoding[\"Bytes\"] = \"view\";\n    ValueEncoding[\"JSON\"] = \"json\";\n})(ValueEncoding || (ValueEncoding = {}));\n//# sourceMappingURL=db.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2RiLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsa0NBQWtDO0FBQzVCO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNDQUFzQztBQUN2QyIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXdhbGxldC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jhc2UtY29udHJvbGxlcnMvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vZGIuanM/ZmNhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIEtleUVuY29kaW5nO1xuKGZ1bmN0aW9uIChLZXlFbmNvZGluZykge1xuICAgIEtleUVuY29kaW5nW1wiU3RyaW5nXCJdID0gXCJzdHJpbmdcIjtcbiAgICBLZXlFbmNvZGluZ1tcIkJ5dGVzXCJdID0gXCJ2aWV3XCI7XG4gICAgS2V5RW5jb2RpbmdbXCJOdW1iZXJcIl0gPSBcIm51bWJlclwiO1xufSkoS2V5RW5jb2RpbmcgfHwgKEtleUVuY29kaW5nID0ge30pKTtcbmV4cG9ydCB2YXIgVmFsdWVFbmNvZGluZztcbihmdW5jdGlvbiAoVmFsdWVFbmNvZGluZykge1xuICAgIFZhbHVlRW5jb2RpbmdbXCJTdHJpbmdcIl0gPSBcInN0cmluZ1wiO1xuICAgIFZhbHVlRW5jb2RpbmdbXCJCeXRlc1wiXSA9IFwidmlld1wiO1xuICAgIFZhbHVlRW5jb2RpbmdbXCJKU09OXCJdID0gXCJqc29uXCI7XG59KShWYWx1ZUVuY29kaW5nIHx8IChWYWx1ZUVuY29kaW5nID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRiLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/db.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/genesis.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/genesis.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseGethGenesisState: () => (/* binding */ parseGethGenesisState)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n\n/**\n * Parses the geth genesis state into Blockchain {@link GenesisState}\n * @param json representing the `alloc` key in a Geth genesis file\n */\nfunction parseGethGenesisState(json) {\n    const state = {};\n    for (let address of Object.keys(json.alloc)) {\n        let { balance, code, storage, nonce } = json.alloc[address];\n        // create a map with lowercase for easy lookups\n        address = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.addHexPrefix)(address.toLowerCase());\n        balance = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.isHexPrefixed)(balance) ? balance : (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bigIntToHex)(BigInt(balance));\n        code = code !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.addHexPrefix)(code) : undefined;\n        storage = storage !== undefined ? Object.entries(storage) : undefined;\n        nonce = nonce !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.addHexPrefix)(nonce) : undefined;\n        state[address] = [balance, code, storage, nonce];\n    }\n    return state;\n}\n//# sourceMappingURL=genesis.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2dlbmVzaXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXVEO0FBQ1Q7QUFDOUM7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLGNBQWMsZ0NBQWdDO0FBQzlDO0FBQ0Esa0JBQWtCLHVEQUFZO0FBQzlCLGtCQUFrQiwyREFBYSxzQkFBc0Isc0RBQVc7QUFDaEUsb0NBQW9DLHVEQUFZO0FBQ2hEO0FBQ0Esc0NBQXNDLHVEQUFZO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC13YWxsZXQvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2dlbmVzaXMuanM/Y2EwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhZGRIZXhQcmVmaXgsIGJpZ0ludFRvSGV4IH0gZnJvbSAnLi9ieXRlcy5qcyc7XG5pbXBvcnQgeyBpc0hleFByZWZpeGVkIH0gZnJvbSAnLi9pbnRlcm5hbC5qcyc7XG4vKipcbiAqIFBhcnNlcyB0aGUgZ2V0aCBnZW5lc2lzIHN0YXRlIGludG8gQmxvY2tjaGFpbiB7QGxpbmsgR2VuZXNpc1N0YXRlfVxuICogQHBhcmFtIGpzb24gcmVwcmVzZW50aW5nIHRoZSBgYWxsb2NgIGtleSBpbiBhIEdldGggZ2VuZXNpcyBmaWxlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdldGhHZW5lc2lzU3RhdGUoanNvbikge1xuICAgIGNvbnN0IHN0YXRlID0ge307XG4gICAgZm9yIChsZXQgYWRkcmVzcyBvZiBPYmplY3Qua2V5cyhqc29uLmFsbG9jKSkge1xuICAgICAgICBsZXQgeyBiYWxhbmNlLCBjb2RlLCBzdG9yYWdlLCBub25jZSB9ID0ganNvbi5hbGxvY1thZGRyZXNzXTtcbiAgICAgICAgLy8gY3JlYXRlIGEgbWFwIHdpdGggbG93ZXJjYXNlIGZvciBlYXN5IGxvb2t1cHNcbiAgICAgICAgYWRkcmVzcyA9IGFkZEhleFByZWZpeChhZGRyZXNzLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICBiYWxhbmNlID0gaXNIZXhQcmVmaXhlZChiYWxhbmNlKSA/IGJhbGFuY2UgOiBiaWdJbnRUb0hleChCaWdJbnQoYmFsYW5jZSkpO1xuICAgICAgICBjb2RlID0gY29kZSAhPT0gdW5kZWZpbmVkID8gYWRkSGV4UHJlZml4KGNvZGUpIDogdW5kZWZpbmVkO1xuICAgICAgICBzdG9yYWdlID0gc3RvcmFnZSAhPT0gdW5kZWZpbmVkID8gT2JqZWN0LmVudHJpZXMoc3RvcmFnZSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIG5vbmNlID0gbm9uY2UgIT09IHVuZGVmaW5lZCA/IGFkZEhleFByZWZpeChub25jZSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIHN0YXRlW2FkZHJlc3NdID0gW2JhbGFuY2UsIGNvZGUsIHN0b3JhZ2UsIG5vbmNlXTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2VuZXNpcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/genesis.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/helpers.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/helpers.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertIsArray: () => (/* binding */ assertIsArray),\n/* harmony export */   assertIsBytes: () => (/* binding */ assertIsBytes),\n/* harmony export */   assertIsHexString: () => (/* binding */ assertIsHexString),\n/* harmony export */   assertIsString: () => (/* binding */ assertIsString)\n/* harmony export */ });\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nconst assertIsHexString = function (input) {\n    if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(input)) {\n        const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nconst assertIsBytes = function (input) {\n    if (!(input instanceof Uint8Array)) {\n        const msg = `This method only supports Uint8Array but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nconst assertIsArray = function (input) {\n    if (!Array.isArray(input)) {\n        const msg = `This method only supports number arrays but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nconst assertIsString = function (input) {\n    if (typeof input !== 'string') {\n        const msg = `This method only supports strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n//# sourceMappingURL=helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2hlbHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNEM7QUFDNUM7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNPO0FBQ1AsU0FBUyx5REFBVztBQUNwQix3RkFBd0YsTUFBTTtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ087QUFDUDtBQUNBLDJFQUEyRSxNQUFNO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckI7QUFDTztBQUNQO0FBQ0EsOEVBQThFLE1BQU07QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNPO0FBQ1A7QUFDQSx3RUFBd0UsTUFBTTtBQUM5RTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXdhbGxldC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jhc2UtY29udHJvbGxlcnMvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vaGVscGVycy5qcz9iYzIzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzSGV4U3RyaW5nIH0gZnJvbSAnLi9pbnRlcm5hbC5qcyc7XG4vKipcbiAqIFRocm93cyBpZiBhIHN0cmluZyBpcyBub3QgaGV4IHByZWZpeGVkXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgc3RyaW5nIHRvIGNoZWNrIGhleCBwcmVmaXggb2ZcbiAqL1xuZXhwb3J0IGNvbnN0IGFzc2VydElzSGV4U3RyaW5nID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgaWYgKCFpc0hleFN0cmluZyhpbnB1dCkpIHtcbiAgICAgICAgY29uc3QgbXNnID0gYFRoaXMgbWV0aG9kIG9ubHkgc3VwcG9ydHMgMHgtcHJlZml4ZWQgaGV4IHN0cmluZ3MgYnV0IGlucHV0IHdhczogJHtpbnB1dH1gO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59O1xuLyoqXG4gKiBUaHJvd3MgaWYgaW5wdXQgaXMgbm90IGEgYnVmZmVyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gaW5wdXQgdmFsdWUgdG8gY2hlY2tcbiAqL1xuZXhwb3J0IGNvbnN0IGFzc2VydElzQnl0ZXMgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAoIShpbnB1dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IGBUaGlzIG1ldGhvZCBvbmx5IHN1cHBvcnRzIFVpbnQ4QXJyYXkgYnV0IGlucHV0IHdhczogJHtpbnB1dH1gO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59O1xuLyoqXG4gKiBUaHJvd3MgaWYgaW5wdXQgaXMgbm90IGFuIGFycmF5XG4gKiBAcGFyYW0ge251bWJlcltdfSBpbnB1dCB2YWx1ZSB0byBjaGVja1xuICovXG5leHBvcnQgY29uc3QgYXNzZXJ0SXNBcnJheSA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgY29uc3QgbXNnID0gYFRoaXMgbWV0aG9kIG9ubHkgc3VwcG9ydHMgbnVtYmVyIGFycmF5cyBidXQgaW5wdXQgd2FzOiAke2lucHV0fWA7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbn07XG4vKipcbiAqIFRocm93cyBpZiBpbnB1dCBpcyBub3QgYSBzdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCB2YWx1ZSB0byBjaGVja1xuICovXG5leHBvcnQgY29uc3QgYXNzZXJ0SXNTdHJpbmcgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zdCBtc2cgPSBgVGhpcyBtZXRob2Qgb25seSBzdXBwb3J0cyBzdHJpbmdzIGJ1dCBpbnB1dCB3YXM6ICR7aW5wdXR9YDtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/index.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.Account),\n/* harmony export */   Address: () => (/* reexport safe */ _address_js__WEBPACK_IMPORTED_MODULE_3__.Address),\n/* harmony export */   AsyncEventEmitter: () => (/* reexport safe */ _asyncEventEmitter_js__WEBPACK_IMPORTED_MODULE_9__.AsyncEventEmitter),\n/* harmony export */   BIGINT_0: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0),\n/* harmony export */   BIGINT_1: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_1),\n/* harmony export */   BIGINT_100: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_100),\n/* harmony export */   BIGINT_128: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_128),\n/* harmony export */   BIGINT_160: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_160),\n/* harmony export */   BIGINT_2: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2),\n/* harmony export */   BIGINT_224: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_224),\n/* harmony export */   BIGINT_255: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_255),\n/* harmony export */   BIGINT_256: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_256),\n/* harmony export */   BIGINT_27: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_27),\n/* harmony export */   BIGINT_28: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_28),\n/* harmony export */   BIGINT_2EXP160: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2EXP160),\n/* harmony export */   BIGINT_2EXP224: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2EXP224),\n/* harmony export */   BIGINT_2EXP256: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2EXP256),\n/* harmony export */   BIGINT_2EXP96: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2EXP96),\n/* harmony export */   BIGINT_3: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_3),\n/* harmony export */   BIGINT_31: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_31),\n/* harmony export */   BIGINT_32: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_32),\n/* harmony export */   BIGINT_64: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_64),\n/* harmony export */   BIGINT_7: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_7),\n/* harmony export */   BIGINT_8: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_8),\n/* harmony export */   BIGINT_96: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_96),\n/* harmony export */   BIGINT_NEG1: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_NEG1),\n/* harmony export */   GWEI_TO_WEI: () => (/* reexport safe */ _units_js__WEBPACK_IMPORTED_MODULE_1__.GWEI_TO_WEI),\n/* harmony export */   KECCAK256_NULL: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_NULL),\n/* harmony export */   KECCAK256_NULL_S: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_NULL_S),\n/* harmony export */   KECCAK256_RLP: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_RLP),\n/* harmony export */   KECCAK256_RLP_ARRAY: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_RLP_ARRAY),\n/* harmony export */   KECCAK256_RLP_ARRAY_S: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_RLP_ARRAY_S),\n/* harmony export */   KECCAK256_RLP_S: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_RLP_S),\n/* harmony export */   KeyEncoding: () => (/* reexport safe */ _db_js__WEBPACK_IMPORTED_MODULE_4__.KeyEncoding),\n/* harmony export */   Lock: () => (/* reexport safe */ _lock_js__WEBPACK_IMPORTED_MODULE_14__.Lock),\n/* harmony export */   MAX_INTEGER: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_INTEGER),\n/* harmony export */   MAX_INTEGER_BIGINT: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_INTEGER_BIGINT),\n/* harmony export */   MAX_UINT64: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_UINT64),\n/* harmony export */   MAX_WITHDRAWALS_PER_PAYLOAD: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_WITHDRAWALS_PER_PAYLOAD),\n/* harmony export */   MapDB: () => (/* reexport safe */ _mapDB_js__WEBPACK_IMPORTED_MODULE_15__.MapDB),\n/* harmony export */   RIPEMD160_ADDRESS_STRING: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.RIPEMD160_ADDRESS_STRING),\n/* harmony export */   RLP_EMPTY_STRING: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.RLP_EMPTY_STRING),\n/* harmony export */   SECP256K1_ORDER: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.SECP256K1_ORDER),\n/* harmony export */   SECP256K1_ORDER_DIV_2: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.SECP256K1_ORDER_DIV_2),\n/* harmony export */   TWO_POW256: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.TWO_POW256),\n/* harmony export */   TypeOutput: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_8__.TypeOutput),\n/* harmony export */   ValueEncoding: () => (/* reexport safe */ _db_js__WEBPACK_IMPORTED_MODULE_4__.ValueEncoding),\n/* harmony export */   Withdrawal: () => (/* reexport safe */ _withdrawal_js__WEBPACK_IMPORTED_MODULE_5__.Withdrawal),\n/* harmony export */   accountBodyFromSlim: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.accountBodyFromSlim),\n/* harmony export */   accountBodyToRLP: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.accountBodyToRLP),\n/* harmony export */   accountBodyToSlim: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.accountBodyToSlim),\n/* harmony export */   addHexPrefix: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.addHexPrefix),\n/* harmony export */   arrayContainsArray: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.arrayContainsArray),\n/* harmony export */   bigInt64ToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigInt64ToBytes),\n/* harmony export */   bigIntMax: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntMax),\n/* harmony export */   bigIntMin: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntMin),\n/* harmony export */   bigIntToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToBytes),\n/* harmony export */   bigIntToHex: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToHex),\n/* harmony export */   bigIntToUnpaddedBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToUnpaddedBytes),\n/* harmony export */   blobsToCommitments: () => (/* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.blobsToCommitments),\n/* harmony export */   blobsToProofs: () => (/* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.blobsToProofs),\n/* harmony export */   bytesToBigInt: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToBigInt),\n/* harmony export */   bytesToBigInt64: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToBigInt64),\n/* harmony export */   bytesToHex: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToHex),\n/* harmony export */   bytesToInt: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToInt),\n/* harmony export */   bytesToInt32: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToInt32),\n/* harmony export */   bytesToUnprefixedHex: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToUnprefixedHex),\n/* harmony export */   bytesToUtf8: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToUtf8),\n/* harmony export */   calculateSigRecovery: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.calculateSigRecovery),\n/* harmony export */   commitmentsToVersionedHashes: () => (/* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.commitmentsToVersionedHashes),\n/* harmony export */   compareBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.compareBytes),\n/* harmony export */   computeVersionedHash: () => (/* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.computeVersionedHash),\n/* harmony export */   concatBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.concatBytes),\n/* harmony export */   ecrecover: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.ecrecover),\n/* harmony export */   ecsign: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.ecsign),\n/* harmony export */   equalsBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.equalsBytes),\n/* harmony export */   fetchFromProvider: () => (/* reexport safe */ _provider_js__WEBPACK_IMPORTED_MODULE_16__.fetchFromProvider),\n/* harmony export */   formatBigDecimal: () => (/* reexport safe */ _units_js__WEBPACK_IMPORTED_MODULE_1__.formatBigDecimal),\n/* harmony export */   fromAscii: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.fromAscii),\n/* harmony export */   fromRpcSig: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.fromRpcSig),\n/* harmony export */   fromSigned: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.fromSigned),\n/* harmony export */   fromUtf8: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.fromUtf8),\n/* harmony export */   generateAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.generateAddress),\n/* harmony export */   generateAddress2: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.generateAddress2),\n/* harmony export */   getBinarySize: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.getBinarySize),\n/* harmony export */   getBlobs: () => (/* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.getBlobs),\n/* harmony export */   getKeys: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.getKeys),\n/* harmony export */   getProvider: () => (/* reexport safe */ _provider_js__WEBPACK_IMPORTED_MODULE_16__.getProvider),\n/* harmony export */   hashPersonalMessage: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.hashPersonalMessage),\n/* harmony export */   hexToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.hexToBytes),\n/* harmony export */   importPublic: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.importPublic),\n/* harmony export */   initKZG: () => (/* reexport safe */ _kzg_js__WEBPACK_IMPORTED_MODULE_13__.initKZG),\n/* harmony export */   int32ToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.int32ToBytes),\n/* harmony export */   intToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.intToBytes),\n/* harmony export */   intToHex: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.intToHex),\n/* harmony export */   intToUnpaddedBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.intToUnpaddedBytes),\n/* harmony export */   isHexPrefixed: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.isHexPrefixed),\n/* harmony export */   isHexString: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.isHexString),\n/* harmony export */   isValidAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isValidAddress),\n/* harmony export */   isValidChecksumAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isValidChecksumAddress),\n/* harmony export */   isValidPrivate: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isValidPrivate),\n/* harmony export */   isValidPublic: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isValidPublic),\n/* harmony export */   isValidSignature: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.isValidSignature),\n/* harmony export */   isZeroAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isZeroAddress),\n/* harmony export */   padToEven: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.padToEven),\n/* harmony export */   parseGethGenesisState: () => (/* reexport safe */ _genesis_js__WEBPACK_IMPORTED_MODULE_11__.parseGethGenesisState),\n/* harmony export */   privateToAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.privateToAddress),\n/* harmony export */   privateToPublic: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.privateToPublic),\n/* harmony export */   pubToAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.pubToAddress),\n/* harmony export */   publicToAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.publicToAddress),\n/* harmony export */   randomBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.randomBytes),\n/* harmony export */   setLengthLeft: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.setLengthLeft),\n/* harmony export */   setLengthRight: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.setLengthRight),\n/* harmony export */   short: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.short),\n/* harmony export */   stripHexPrefix: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.stripHexPrefix),\n/* harmony export */   toAscii: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.toAscii),\n/* harmony export */   toBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.toBytes),\n/* harmony export */   toChecksumAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.toChecksumAddress),\n/* harmony export */   toCompactSig: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.toCompactSig),\n/* harmony export */   toRpcSig: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.toRpcSig),\n/* harmony export */   toType: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_8__.toType),\n/* harmony export */   toUnsigned: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.toUnsigned),\n/* harmony export */   unpadArray: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.unpadArray),\n/* harmony export */   unpadBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.unpadBytes),\n/* harmony export */   unpadHex: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.unpadHex),\n/* harmony export */   unprefixedHexToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.unprefixedHexToBytes),\n/* harmony export */   utf8ToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.utf8ToBytes),\n/* harmony export */   validateNoLeadingZeroes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.validateNoLeadingZeroes),\n/* harmony export */   zeroAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.zeroAddress),\n/* harmony export */   zeros: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.zeros)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _units_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./units.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/units.js\");\n/* harmony import */ var _account_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./account.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/account.js\");\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./address.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/address.js\");\n/* harmony import */ var _db_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./db.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/db.js\");\n/* harmony import */ var _withdrawal_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./withdrawal.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/withdrawal.js\");\n/* harmony import */ var _signature_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./signature.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/signature.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/types.js\");\n/* harmony import */ var _asyncEventEmitter_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./asyncEventEmitter.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js\");\n/* harmony import */ var _blobs_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./blobs.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/blobs.js\");\n/* harmony import */ var _genesis_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./genesis.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/genesis.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n/* harmony import */ var _kzg_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./kzg.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/kzg.js\");\n/* harmony import */ var _lock_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./lock.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/lock.js\");\n/* harmony import */ var _mapDB_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./mapDB.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/mapDB.js\");\n/* harmony import */ var _provider_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./provider.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/provider.js\");\n/**\n * Constants\n */\n\n/**\n * Units helpers\n */\n\n/**\n * Account class and helper functions\n */\n\n/**\n * Address type\n */\n\n/**\n * DB type\n */\n\n/**\n * Withdrawal type\n */\n\n/**\n * ECDSA signature\n */\n\n/**\n * Utilities for manipulating bytes, Uint8Arrays, etc.\n */\n\n/**\n * Helpful TypeScript types\n */\n\n/**\n * Export ethjs-util methods\n */\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUMrQjtBQUMvQjtBQUNBO0FBQ0E7QUFDMkI7QUFDM0I7QUFDQTtBQUNBO0FBQzZCO0FBQzdCO0FBQ0E7QUFDQTtBQUM2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ2dDO0FBQ2hDO0FBQ0E7QUFDQTtBQUMrQjtBQUMvQjtBQUNBO0FBQ0E7QUFDMkI7QUFDM0I7QUFDQTtBQUNBO0FBQzJCO0FBQzNCO0FBQ0E7QUFDQTtBQUN1QztBQUNaO0FBQ0U7QUFDb0k7QUFDeEk7QUFDQztBQUNDO0FBQ0c7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC13YWxsZXQvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2luZGV4LmpzPzhiNmUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9jb25zdGFudHMuanMnO1xuLyoqXG4gKiBVbml0cyBoZWxwZXJzXG4gKi9cbmV4cG9ydCAqIGZyb20gJy4vdW5pdHMuanMnO1xuLyoqXG4gKiBBY2NvdW50IGNsYXNzIGFuZCBoZWxwZXIgZnVuY3Rpb25zXG4gKi9cbmV4cG9ydCAqIGZyb20gJy4vYWNjb3VudC5qcyc7XG4vKipcbiAqIEFkZHJlc3MgdHlwZVxuICovXG5leHBvcnQgKiBmcm9tICcuL2FkZHJlc3MuanMnO1xuLyoqXG4gKiBEQiB0eXBlXG4gKi9cbmV4cG9ydCAqIGZyb20gJy4vZGIuanMnO1xuLyoqXG4gKiBXaXRoZHJhd2FsIHR5cGVcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi93aXRoZHJhd2FsLmpzJztcbi8qKlxuICogRUNEU0Egc2lnbmF0dXJlXG4gKi9cbmV4cG9ydCAqIGZyb20gJy4vc2lnbmF0dXJlLmpzJztcbi8qKlxuICogVXRpbGl0aWVzIGZvciBtYW5pcHVsYXRpbmcgYnl0ZXMsIFVpbnQ4QXJyYXlzLCBldGMuXG4gKi9cbmV4cG9ydCAqIGZyb20gJy4vYnl0ZXMuanMnO1xuLyoqXG4gKiBIZWxwZnVsIFR5cGVTY3JpcHQgdHlwZXNcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi90eXBlcy5qcyc7XG4vKipcbiAqIEV4cG9ydCBldGhqcy11dGlsIG1ldGhvZHNcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9hc3luY0V2ZW50RW1pdHRlci5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2Jsb2JzLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vZ2VuZXNpcy5qcyc7XG5leHBvcnQgeyBhcnJheUNvbnRhaW5zQXJyYXksIGZyb21Bc2NpaSwgZnJvbVV0ZjgsIGdldEJpbmFyeVNpemUsIGdldEtleXMsIGlzSGV4UHJlZml4ZWQsIGlzSGV4U3RyaW5nLCBwYWRUb0V2ZW4sIHN0cmlwSGV4UHJlZml4LCB0b0FzY2lpLCB9IGZyb20gJy4vaW50ZXJuYWwuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9remcuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9sb2NrLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vbWFwREIuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9wcm92aWRlci5qcyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/internal.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/internal.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayContainsArray: () => (/* binding */ arrayContainsArray),\n/* harmony export */   fromAscii: () => (/* binding */ fromAscii),\n/* harmony export */   fromUtf8: () => (/* binding */ fromUtf8),\n/* harmony export */   getBinarySize: () => (/* binding */ getBinarySize),\n/* harmony export */   getKeys: () => (/* binding */ getKeys),\n/* harmony export */   isHexPrefixed: () => (/* binding */ isHexPrefixed),\n/* harmony export */   isHexString: () => (/* binding */ isHexString),\n/* harmony export */   padToEven: () => (/* binding */ padToEven),\n/* harmony export */   stripHexPrefix: () => (/* binding */ stripHexPrefix),\n/* harmony export */   toAscii: () => (/* binding */ toAscii)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/*\nThe MIT License\n\nCopyright (c) 2016 Nick Dodson. nickdodson.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE\n */\n\n/**\n * Returns a `Boolean` on whether or not the a `String` starts with '0x'\n * @param str the string input value\n * @return a boolean if it is or is not hex prefixed\n * @throws if the str input is not a string\n */\nfunction isHexPrefixed(str) {\n    if (typeof str !== 'string') {\n        throw new Error(`[isHexPrefixed] input must be type 'string', received type ${typeof str}`);\n    }\n    return str[0] === '0' && str[1] === 'x';\n}\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */\nconst stripHexPrefix = (str) => {\n    if (typeof str !== 'string')\n        throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);\n    return isHexPrefixed(str) ? str.slice(2) : str;\n};\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */\nfunction padToEven(value) {\n    let a = value;\n    if (typeof a !== 'string') {\n        throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);\n    }\n    if (a.length % 2)\n        a = `0${a}`;\n    return a;\n}\n/**\n * Get the binary size of a string\n * @param str\n * @returns the number of bytes contained within the string\n */\nfunction getBinarySize(str) {\n    if (typeof str !== 'string') {\n        throw new Error(`[getBinarySize] method requires input type 'string', received ${typeof str}`);\n    }\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(str).byteLength;\n}\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param superset\n * @param subset\n *\n */\nfunction arrayContainsArray(superset, subset, some) {\n    if (Array.isArray(superset) !== true) {\n        throw new Error(`[arrayContainsArray] method requires input 'superset' to be an array, got type '${typeof superset}'`);\n    }\n    if (Array.isArray(subset) !== true) {\n        throw new Error(`[arrayContainsArray] method requires input 'subset' to be an array, got type '${typeof subset}'`);\n    }\n    return subset[some === true ? 'some' : 'every']((value) => superset.indexOf(value) >= 0);\n}\n/**\n * Should be called to get ascii from its hex representation\n *\n * @param string in hex\n * @returns ascii string representation of hex value\n */\nfunction toAscii(hex) {\n    let str = '';\n    let i = 0;\n    const l = hex.length;\n    if (hex.substring(0, 2) === '0x')\n        i = 2;\n    for (; i < l; i += 2) {\n        const code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n    return str;\n}\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string.\n * Strips leading and trailing 0's.\n *\n * @param string\n * @param optional padding\n * @returns hex representation of input string\n */\nfunction fromUtf8(stringValue) {\n    const str = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(stringValue);\n    return `0x${padToEven((0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(str)).replace(/^0+|0+$/g, '')}`;\n}\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @param  string\n * @param  optional padding\n * @returns  hex representation of input string\n */\nfunction fromAscii(stringValue) {\n    let hex = '';\n    for (let i = 0; i < stringValue.length; i++) {\n        const code = stringValue.charCodeAt(i);\n        const n = code.toString(16);\n        hex += n.length < 2 ? `0${n}` : n;\n    }\n    return `0x${hex}`;\n}\n/**\n * Returns the keys from an array of objects.\n * @example\n * ```js\n * getKeys([{a: '1', b: '2'}, {a: '3', b: '4'}], 'a') => ['1', '3']\n *````\n * @param  params\n * @param  key\n * @param  allowEmpty\n * @returns output just a simple array of output keys\n */\nfunction getKeys(params, key, allowEmpty) {\n    if (!Array.isArray(params)) {\n        throw new Error(`[getKeys] method expects input 'params' to be an array, got ${typeof params}`);\n    }\n    if (typeof key !== 'string') {\n        throw new Error(`[getKeys] method expects input 'key' to be type 'string', got ${typeof params}`);\n    }\n    const result = [];\n    for (let i = 0; i < params.length; i++) {\n        let value = params[i][key];\n        if (allowEmpty === true && !value) {\n            value = '';\n        }\n        else if (typeof value !== 'string') {\n            throw new Error(`invalid abi - expected type 'string', received ${typeof value}`);\n        }\n        result.push(value);\n    }\n    return result;\n}\n/**\n * Is the string a hex string.\n *\n * @param  value\n * @param  length\n * @returns  output the string is a hex string\n */\nfunction isHexString(value, length) {\n    if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/))\n        return false;\n    if (typeof length !== 'undefined' && length > 0 && value.length !== 2 + 2 * length)\n        return false;\n    return true;\n}\n//# sourceMappingURL=internal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/internal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/kzg.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/kzg.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initKZG: () => (/* binding */ initKZG)\n/* harmony export */ });\n/**\n * @deprecated This initialization method is deprecated since trusted setup loading is done directly in the reference KZG library\n * initialization or should othewise be assured independently before KZG libary usage.\n *\n * @param kzgLib a KZG implementation (defaults to c-kzg)\n * @param a dictionary of trusted setup options\n */\nfunction initKZG(kzg, _trustedSetupPath) {\n    kzg.loadTrustedSetup();\n}\n//# sourceMappingURL=kzg.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2t6Zy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXdhbGxldC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jhc2UtY29udHJvbGxlcnMvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20va3pnLmpzPzk4YWMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGluaXRpYWxpemF0aW9uIG1ldGhvZCBpcyBkZXByZWNhdGVkIHNpbmNlIHRydXN0ZWQgc2V0dXAgbG9hZGluZyBpcyBkb25lIGRpcmVjdGx5IGluIHRoZSByZWZlcmVuY2UgS1pHIGxpYnJhcnlcbiAqIGluaXRpYWxpemF0aW9uIG9yIHNob3VsZCBvdGhld2lzZSBiZSBhc3N1cmVkIGluZGVwZW5kZW50bHkgYmVmb3JlIEtaRyBsaWJhcnkgdXNhZ2UuXG4gKlxuICogQHBhcmFtIGt6Z0xpYiBhIEtaRyBpbXBsZW1lbnRhdGlvbiAoZGVmYXVsdHMgdG8gYy1remcpXG4gKiBAcGFyYW0gYSBkaWN0aW9uYXJ5IG9mIHRydXN0ZWQgc2V0dXAgb3B0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdEtaRyhremcsIF90cnVzdGVkU2V0dXBQYXRoKSB7XG4gICAga3pnLmxvYWRUcnVzdGVkU2V0dXAoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWt6Zy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/kzg.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/lock.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/lock.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Lock: () => (/* binding */ Lock)\n/* harmony export */ });\n// Based on https://github.com/jsoendermann/semaphore-async-await/blob/master/src/Semaphore.ts\nclass Lock {\n    constructor() {\n        this.permits = 1;\n        this.promiseResolverQueue = [];\n    }\n    /**\n     * Returns a promise used to wait for a permit to become available. This method should be awaited on.\n     * @returns  A promise that gets resolved when execution is allowed to proceed.\n     */\n    async acquire() {\n        if (this.permits > 0) {\n            this.permits -= 1;\n            return Promise.resolve(true);\n        }\n        // If there is no permit available, we return a promise that resolves once the semaphore gets\n        // signaled enough times that permits is equal to one.\n        return new Promise((resolver) => this.promiseResolverQueue.push(resolver));\n    }\n    /**\n     * Increases the number of permits by one. If there are other functions waiting, one of them will\n     * continue to execute in a future iteration of the event loop.\n     */\n    release() {\n        this.permits += 1;\n        if (this.permits > 1 && this.promiseResolverQueue.length > 0) {\n            // eslint-disable-next-line no-console\n            console.warn('Lock.permits should never be > 0 when there is someone waiting.');\n        }\n        else if (this.permits === 1 && this.promiseResolverQueue.length > 0) {\n            // If there is someone else waiting, immediately consume the permit that was released\n            // at the beginning of this function and let the waiting function resume.\n            this.permits -= 1;\n            const nextResolver = this.promiseResolverQueue.shift();\n            if (nextResolver) {\n                nextResolver(true);\n            }\n        }\n    }\n}\n//# sourceMappingURL=lock.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2xvY2suanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC13YWxsZXQvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2xvY2suanM/NTdhNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vanNvZW5kZXJtYW5uL3NlbWFwaG9yZS1hc3luYy1hd2FpdC9ibG9iL21hc3Rlci9zcmMvU2VtYXBob3JlLnRzXG5leHBvcnQgY2xhc3MgTG9jayB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucGVybWl0cyA9IDE7XG4gICAgICAgIHRoaXMucHJvbWlzZVJlc29sdmVyUXVldWUgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHByb21pc2UgdXNlZCB0byB3YWl0IGZvciBhIHBlcm1pdCB0byBiZWNvbWUgYXZhaWxhYmxlLiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgYXdhaXRlZCBvbi5cbiAgICAgKiBAcmV0dXJucyAgQSBwcm9taXNlIHRoYXQgZ2V0cyByZXNvbHZlZCB3aGVuIGV4ZWN1dGlvbiBpcyBhbGxvd2VkIHRvIHByb2NlZWQuXG4gICAgICovXG4gICAgYXN5bmMgYWNxdWlyZSgpIHtcbiAgICAgICAgaWYgKHRoaXMucGVybWl0cyA+IDApIHtcbiAgICAgICAgICAgIHRoaXMucGVybWl0cyAtPSAxO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyBwZXJtaXQgYXZhaWxhYmxlLCB3ZSByZXR1cm4gYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgb25jZSB0aGUgc2VtYXBob3JlIGdldHNcbiAgICAgICAgLy8gc2lnbmFsZWQgZW5vdWdoIHRpbWVzIHRoYXQgcGVybWl0cyBpcyBlcXVhbCB0byBvbmUuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZXIpID0+IHRoaXMucHJvbWlzZVJlc29sdmVyUXVldWUucHVzaChyZXNvbHZlcikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNyZWFzZXMgdGhlIG51bWJlciBvZiBwZXJtaXRzIGJ5IG9uZS4gSWYgdGhlcmUgYXJlIG90aGVyIGZ1bmN0aW9ucyB3YWl0aW5nLCBvbmUgb2YgdGhlbSB3aWxsXG4gICAgICogY29udGludWUgdG8gZXhlY3V0ZSBpbiBhIGZ1dHVyZSBpdGVyYXRpb24gb2YgdGhlIGV2ZW50IGxvb3AuXG4gICAgICovXG4gICAgcmVsZWFzZSgpIHtcbiAgICAgICAgdGhpcy5wZXJtaXRzICs9IDE7XG4gICAgICAgIGlmICh0aGlzLnBlcm1pdHMgPiAxICYmIHRoaXMucHJvbWlzZVJlc29sdmVyUXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignTG9jay5wZXJtaXRzIHNob3VsZCBuZXZlciBiZSA+IDAgd2hlbiB0aGVyZSBpcyBzb21lb25lIHdhaXRpbmcuJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5wZXJtaXRzID09PSAxICYmIHRoaXMucHJvbWlzZVJlc29sdmVyUXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgc29tZW9uZSBlbHNlIHdhaXRpbmcsIGltbWVkaWF0ZWx5IGNvbnN1bWUgdGhlIHBlcm1pdCB0aGF0IHdhcyByZWxlYXNlZFxuICAgICAgICAgICAgLy8gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGlzIGZ1bmN0aW9uIGFuZCBsZXQgdGhlIHdhaXRpbmcgZnVuY3Rpb24gcmVzdW1lLlxuICAgICAgICAgICAgdGhpcy5wZXJtaXRzIC09IDE7XG4gICAgICAgICAgICBjb25zdCBuZXh0UmVzb2x2ZXIgPSB0aGlzLnByb21pc2VSZXNvbHZlclF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAobmV4dFJlc29sdmVyKSB7XG4gICAgICAgICAgICAgICAgbmV4dFJlc29sdmVyKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9jay5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/lock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/mapDB.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/mapDB.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapDB: () => (/* binding */ MapDB)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n\nclass MapDB {\n    constructor(database) {\n        this._database = database ?? new Map();\n    }\n    async get(key) {\n        const dbKey = key instanceof Uint8Array ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(key) : key.toString();\n        return this._database.get(dbKey);\n    }\n    async put(key, val) {\n        const dbKey = key instanceof Uint8Array ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(key) : key.toString();\n        this._database.set(dbKey, val);\n    }\n    async del(key) {\n        const dbKey = key instanceof Uint8Array ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(key) : key.toString();\n        this._database.delete(dbKey);\n    }\n    async batch(opStack) {\n        for (const op of opStack) {\n            if (op.type === 'del') {\n                await this.del(op.key);\n            }\n            if (op.type === 'put') {\n                await this.put(op.key, op.value);\n            }\n        }\n    }\n    /**\n     * Note that the returned shallow copy will share the underlying database with the original\n     *\n     * @returns DB\n     */\n    shallowCopy() {\n        return new MapDB(this._database);\n    }\n    open() {\n        return Promise.resolve();\n    }\n}\n//# sourceMappingURL=mapDB.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL21hcERCLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtEO0FBQzNDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsK0RBQW9CO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCwrREFBb0I7QUFDdEU7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELCtEQUFvQjtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXdhbGxldC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jhc2UtY29udHJvbGxlcnMvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vbWFwREIuanM/MmJmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBieXRlc1RvVW5wcmVmaXhlZEhleCB9IGZyb20gJy4vYnl0ZXMuanMnO1xuZXhwb3J0IGNsYXNzIE1hcERCIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhYmFzZSkge1xuICAgICAgICB0aGlzLl9kYXRhYmFzZSA9IGRhdGFiYXNlID8/IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0KGtleSkge1xuICAgICAgICBjb25zdCBkYktleSA9IGtleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBieXRlc1RvVW5wcmVmaXhlZEhleChrZXkpIDoga2V5LnRvU3RyaW5nKCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhYmFzZS5nZXQoZGJLZXkpO1xuICAgIH1cbiAgICBhc3luYyBwdXQoa2V5LCB2YWwpIHtcbiAgICAgICAgY29uc3QgZGJLZXkgPSBrZXkgaW5zdGFuY2VvZiBVaW50OEFycmF5ID8gYnl0ZXNUb1VucHJlZml4ZWRIZXgoa2V5KSA6IGtleS50b1N0cmluZygpO1xuICAgICAgICB0aGlzLl9kYXRhYmFzZS5zZXQoZGJLZXksIHZhbCk7XG4gICAgfVxuICAgIGFzeW5jIGRlbChrZXkpIHtcbiAgICAgICAgY29uc3QgZGJLZXkgPSBrZXkgaW5zdGFuY2VvZiBVaW50OEFycmF5ID8gYnl0ZXNUb1VucHJlZml4ZWRIZXgoa2V5KSA6IGtleS50b1N0cmluZygpO1xuICAgICAgICB0aGlzLl9kYXRhYmFzZS5kZWxldGUoZGJLZXkpO1xuICAgIH1cbiAgICBhc3luYyBiYXRjaChvcFN0YWNrKSB7XG4gICAgICAgIGZvciAoY29uc3Qgb3Agb2Ygb3BTdGFjaykge1xuICAgICAgICAgICAgaWYgKG9wLnR5cGUgPT09ICdkZWwnKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5kZWwob3Aua2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcC50eXBlID09PSAncHV0Jykge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucHV0KG9wLmtleSwgb3AudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5vdGUgdGhhdCB0aGUgcmV0dXJuZWQgc2hhbGxvdyBjb3B5IHdpbGwgc2hhcmUgdGhlIHVuZGVybHlpbmcgZGF0YWJhc2Ugd2l0aCB0aGUgb3JpZ2luYWxcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIERCXG4gICAgICovXG4gICAgc2hhbGxvd0NvcHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTWFwREIodGhpcy5fZGF0YWJhc2UpO1xuICAgIH1cbiAgICBvcGVuKCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwREIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/mapDB.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/provider.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/provider.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchFromProvider: () => (/* binding */ fetchFromProvider),\n/* harmony export */   getProvider: () => (/* binding */ getProvider)\n/* harmony export */ });\n/**\n * Makes a simple RPC call to a remote Ethereum JSON-RPC provider and passes through the response.\n * No parameter or response validation is done.\n *\n * @param url the URL for the JSON RPC provider\n * @param params the parameters for the JSON-RPC method - refer to\n * https://ethereum.org/en/developers/docs/apis/json-rpc/ for details on RPC methods\n * @returns the `result` field from the JSON-RPC response\n * @example\n * ```ts\n * const provider = 'https://mainnet.infura.io/v3/...'\n * const params = {\n *   method: 'eth_getBlockByNumber',\n *   params: ['latest', false],\n * }\n *  const block = await fetchFromProvider(provider, params)\n */\nconst fetchFromProvider = async (url, params) => {\n    const data = JSON.stringify({\n        method: params.method,\n        params: params.params,\n        jsonrpc: '2.0',\n        id: 1,\n    });\n    const res = await fetch(url, {\n        headers: {\n            'content-type': 'application/json',\n        },\n        method: 'POST',\n        body: data,\n    });\n    if (!res.ok) {\n        throw new Error(`JSONRpcError: ${JSON.stringify({\n            method: params.method,\n            status: res.status,\n            message: await res.text().catch(() => {\n                return 'Could not parse error message likely because of a network error';\n            }),\n        }, null, 2)}`);\n    }\n    const json = await res.json();\n    // TODO we should check json.error here\n    return json.result;\n};\n/**\n *\n * @param provider a URL string or {@link EthersProvider}\n * @returns the extracted URL string for the JSON-RPC Provider\n */\nconst getProvider = (provider) => {\n    if (typeof provider === 'string') {\n        return provider;\n    }\n    else if (typeof provider === 'object' && provider._getConnection !== undefined) {\n        return provider._getConnection().url;\n    }\n    else {\n        throw new Error('Must provide valid provider URL or Web3Provider');\n    }\n};\n//# sourceMappingURL=provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3Byb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTLFdBQVc7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXdhbGxldC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jhc2UtY29udHJvbGxlcnMvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vcHJvdmlkZXIuanM/NGRhZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1ha2VzIGEgc2ltcGxlIFJQQyBjYWxsIHRvIGEgcmVtb3RlIEV0aGVyZXVtIEpTT04tUlBDIHByb3ZpZGVyIGFuZCBwYXNzZXMgdGhyb3VnaCB0aGUgcmVzcG9uc2UuXG4gKiBObyBwYXJhbWV0ZXIgb3IgcmVzcG9uc2UgdmFsaWRhdGlvbiBpcyBkb25lLlxuICpcbiAqIEBwYXJhbSB1cmwgdGhlIFVSTCBmb3IgdGhlIEpTT04gUlBDIHByb3ZpZGVyXG4gKiBAcGFyYW0gcGFyYW1zIHRoZSBwYXJhbWV0ZXJzIGZvciB0aGUgSlNPTi1SUEMgbWV0aG9kIC0gcmVmZXIgdG9cbiAqIGh0dHBzOi8vZXRoZXJldW0ub3JnL2VuL2RldmVsb3BlcnMvZG9jcy9hcGlzL2pzb24tcnBjLyBmb3IgZGV0YWlscyBvbiBSUEMgbWV0aG9kc1xuICogQHJldHVybnMgdGhlIGByZXN1bHRgIGZpZWxkIGZyb20gdGhlIEpTT04tUlBDIHJlc3BvbnNlXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGNvbnN0IHByb3ZpZGVyID0gJ2h0dHBzOi8vbWFpbm5ldC5pbmZ1cmEuaW8vdjMvLi4uJ1xuICogY29uc3QgcGFyYW1zID0ge1xuICogICBtZXRob2Q6ICdldGhfZ2V0QmxvY2tCeU51bWJlcicsXG4gKiAgIHBhcmFtczogWydsYXRlc3QnLCBmYWxzZV0sXG4gKiB9XG4gKiAgY29uc3QgYmxvY2sgPSBhd2FpdCBmZXRjaEZyb21Qcm92aWRlcihwcm92aWRlciwgcGFyYW1zKVxuICovXG5leHBvcnQgY29uc3QgZmV0Y2hGcm9tUHJvdmlkZXIgPSBhc3luYyAodXJsLCBwYXJhbXMpID0+IHtcbiAgICBjb25zdCBkYXRhID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBtZXRob2Q6IHBhcmFtcy5tZXRob2QsXG4gICAgICAgIHBhcmFtczogcGFyYW1zLnBhcmFtcyxcbiAgICAgICAganNvbnJwYzogJzIuMCcsXG4gICAgICAgIGlkOiAxLFxuICAgIH0pO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9LFxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogZGF0YSxcbiAgICB9KTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEpTT05ScGNFcnJvcjogJHtKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBtZXRob2Q6IHBhcmFtcy5tZXRob2QsXG4gICAgICAgICAgICBzdGF0dXM6IHJlcy5zdGF0dXMsXG4gICAgICAgICAgICBtZXNzYWdlOiBhd2FpdCByZXMudGV4dCgpLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0NvdWxkIG5vdCBwYXJzZSBlcnJvciBtZXNzYWdlIGxpa2VseSBiZWNhdXNlIG9mIGEgbmV0d29yayBlcnJvcic7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSwgbnVsbCwgMil9YCk7XG4gICAgfVxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuICAgIC8vIFRPRE8gd2Ugc2hvdWxkIGNoZWNrIGpzb24uZXJyb3IgaGVyZVxuICAgIHJldHVybiBqc29uLnJlc3VsdDtcbn07XG4vKipcbiAqXG4gKiBAcGFyYW0gcHJvdmlkZXIgYSBVUkwgc3RyaW5nIG9yIHtAbGluayBFdGhlcnNQcm92aWRlcn1cbiAqIEByZXR1cm5zIHRoZSBleHRyYWN0ZWQgVVJMIHN0cmluZyBmb3IgdGhlIEpTT04tUlBDIFByb3ZpZGVyXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRQcm92aWRlciA9IChwcm92aWRlcikgPT4ge1xuICAgIGlmICh0eXBlb2YgcHJvdmlkZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBwcm92aWRlcjtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHByb3ZpZGVyID09PSAnb2JqZWN0JyAmJiBwcm92aWRlci5fZ2V0Q29ubmVjdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBwcm92aWRlci5fZ2V0Q29ubmVjdGlvbigpLnVybDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwcm92aWRlIHZhbGlkIHByb3ZpZGVyIFVSTCBvciBXZWIzUHJvdmlkZXInKTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/signature.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/signature.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateSigRecovery: () => (/* binding */ calculateSigRecovery),\n/* harmony export */   ecrecover: () => (/* binding */ ecrecover),\n/* harmony export */   ecsign: () => (/* binding */ ecsign),\n/* harmony export */   fromRpcSig: () => (/* binding */ fromRpcSig),\n/* harmony export */   hashPersonalMessage: () => (/* binding */ hashPersonalMessage),\n/* harmony export */   isValidSignature: () => (/* binding */ isValidSignature),\n/* harmony export */   toCompactSig: () => (/* binding */ toCompactSig),\n/* harmony export */   toRpcSig: () => (/* binding */ toRpcSig)\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/secp256k1.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/secp256k1.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/helpers.js\");\n\n\n\n\n\n/**\n * Returns the ECDSA signature of a message hash.\n *\n * If `chainId` is provided assume an EIP-155-style signature and calculate the `v` value\n * accordingly, otherwise return a \"static\" `v` just derived from the `recovery` bit\n */\nfunction ecsign(msgHash, privateKey, chainId) {\n    const sig = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_1__.secp256k1.sign(msgHash, privateKey);\n    const buf = sig.toCompactRawBytes();\n    const r = buf.slice(0, 32);\n    const s = buf.slice(32, 64);\n    const v = chainId === undefined\n        ? BigInt(sig.recovery + 27)\n        : BigInt(sig.recovery + 35) + BigInt(chainId) * _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_2;\n    return { r, s, v };\n}\nfunction calculateSigRecovery(v, chainId) {\n    if (v === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 || v === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1)\n        return v;\n    if (chainId === undefined) {\n        return v - _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_27;\n    }\n    return v - (chainId * _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_2 + BigInt(35));\n}\nfunction isValidSigRecovery(recovery) {\n    return recovery === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 || recovery === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1;\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nconst ecrecover = function (msgHash, v, r, s, chainId) {\n    const signature = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(r, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(s, 32));\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    const sig = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_1__.secp256k1.Signature.fromCompact(signature).addRecoveryBit(Number(recovery));\n    const senderPubKey = sig.recoverPublicKey(msgHash);\n    return senderPubKey.toRawBytes(false).slice(1);\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nconst toRpcSig = function (v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(r, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(s, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(v)));\n};\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nconst toCompactSig = function (v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    const ss = Uint8Array.from([...s]);\n    if ((v > BigInt(28) && v % _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_2 === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1) || v === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1 || v === BigInt(28)) {\n        ss[0] |= 0x80;\n    }\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(r, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(ss, 32)));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n *\n * NOTE: For an extracted `v` value < 27 (see Geth bug https://github.com/ethereum/go-ethereum/issues/2053)\n * `v + 27` is returned for the `v` value\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nconst fromRpcSig = function (sig) {\n    const bytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(sig);\n    let r;\n    let s;\n    let v;\n    if (bytes.length >= 65) {\n        r = bytes.subarray(0, 32);\n        s = bytes.subarray(32, 64);\n        v = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(bytes.subarray(64));\n    }\n    else if (bytes.length === 64) {\n        // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n        r = bytes.subarray(0, 32);\n        s = bytes.subarray(32, 64);\n        v = BigInt((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToInt)(bytes.subarray(32, 33)) >> 7);\n        s[0] &= 0x7f;\n    }\n    else {\n        throw new Error('Invalid signature length');\n    }\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v = v + _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_27;\n    }\n    return {\n        v,\n        r,\n        s,\n    };\n};\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nconst isValidSignature = function (v, r, s, homesteadOrLater = true, chainId) {\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    const rBigInt = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(r);\n    const sBigInt = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(s);\n    if (rBigInt === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 ||\n        rBigInt >= _constants_js__WEBPACK_IMPORTED_MODULE_3__.SECP256K1_ORDER ||\n        sBigInt === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 ||\n        sBigInt >= _constants_js__WEBPACK_IMPORTED_MODULE_3__.SECP256K1_ORDER) {\n        return false;\n    }\n    if (homesteadOrLater && sBigInt >= _constants_js__WEBPACK_IMPORTED_MODULE_3__.SECP256K1_ORDER_DIV_2) {\n        return false;\n    }\n    return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nconst hashPersonalMessage = function (message) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.assertIsBytes)(message);\n    const prefix = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.utf8ToBytes)(`\\u0019Ethereum Signed Message:\\n${message.length}`);\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)(prefix, message));\n};\n//# sourceMappingURL=signature.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/signature.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/types.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/types.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypeOutput: () => (/* binding */ TypeOutput),\n/* harmony export */   toType: () => (/* binding */ toType)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n\n/**\n * Type output options\n */\nvar TypeOutput;\n(function (TypeOutput) {\n    TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n    TypeOutput[TypeOutput[\"BigInt\"] = 1] = \"BigInt\";\n    TypeOutput[TypeOutput[\"Uint8Array\"] = 2] = \"Uint8Array\";\n    TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput || (TypeOutput = {}));\nfunction toType(input, outputType) {\n    if (input === null) {\n        return null;\n    }\n    if (input === undefined) {\n        return undefined;\n    }\n    if (typeof input === 'string' && !(0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.isHexString)(input)) {\n        throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\n    }\n    else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n        throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n    }\n    const output = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(input);\n    switch (outputType) {\n        case TypeOutput.Uint8Array:\n            return output;\n        case TypeOutput.BigInt:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBigInt)(output);\n        case TypeOutput.Number: {\n            const bigInt = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBigInt)(output);\n            if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n                throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\n            }\n            return Number(bigInt);\n        }\n        case TypeOutput.PrefixedHexString:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(output);\n        default:\n            throw new Error('unknown outputType');\n    }\n}\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZ0U7QUFDcEI7QUFDNUM7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnQ0FBZ0M7QUFDMUI7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MseURBQVc7QUFDakQsOEVBQThFLE1BQU07QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsa0RBQU87QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsd0RBQWE7QUFDaEM7QUFDQSwyQkFBMkIsd0RBQWE7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHFEQUFVO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC13YWxsZXQvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3R5cGVzLmpzPzNkM2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnl0ZXNUb0JpZ0ludCwgYnl0ZXNUb0hleCwgdG9CeXRlcyB9IGZyb20gJy4vYnl0ZXMuanMnO1xuaW1wb3J0IHsgaXNIZXhTdHJpbmcgfSBmcm9tICcuL2ludGVybmFsLmpzJztcbi8qKlxuICogVHlwZSBvdXRwdXQgb3B0aW9uc1xuICovXG5leHBvcnQgdmFyIFR5cGVPdXRwdXQ7XG4oZnVuY3Rpb24gKFR5cGVPdXRwdXQpIHtcbiAgICBUeXBlT3V0cHV0W1R5cGVPdXRwdXRbXCJOdW1iZXJcIl0gPSAwXSA9IFwiTnVtYmVyXCI7XG4gICAgVHlwZU91dHB1dFtUeXBlT3V0cHV0W1wiQmlnSW50XCJdID0gMV0gPSBcIkJpZ0ludFwiO1xuICAgIFR5cGVPdXRwdXRbVHlwZU91dHB1dFtcIlVpbnQ4QXJyYXlcIl0gPSAyXSA9IFwiVWludDhBcnJheVwiO1xuICAgIFR5cGVPdXRwdXRbVHlwZU91dHB1dFtcIlByZWZpeGVkSGV4U3RyaW5nXCJdID0gM10gPSBcIlByZWZpeGVkSGV4U3RyaW5nXCI7XG59KShUeXBlT3V0cHV0IHx8IChUeXBlT3V0cHV0ID0ge30pKTtcbmV4cG9ydCBmdW5jdGlvbiB0b1R5cGUoaW5wdXQsIG91dHB1dFR5cGUpIHtcbiAgICBpZiAoaW5wdXQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChpbnB1dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnICYmICFpc0hleFN0cmluZyhpbnB1dCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBIHN0cmluZyBtdXN0IGJlIHByb3ZpZGVkIHdpdGggYSAweC1wcmVmaXgsIGdpdmVuOiAke2lucHV0fWApO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInICYmICFOdW1iZXIuaXNTYWZlSW50ZWdlcihpbnB1dCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgcHJvdmlkZWQgbnVtYmVyIGlzIGdyZWF0ZXIgdGhhbiBNQVhfU0FGRV9JTlRFR0VSIChwbGVhc2UgdXNlIGFuIGFsdGVybmF0aXZlIGlucHV0IHR5cGUpJyk7XG4gICAgfVxuICAgIGNvbnN0IG91dHB1dCA9IHRvQnl0ZXMoaW5wdXQpO1xuICAgIHN3aXRjaCAob3V0cHV0VHlwZSkge1xuICAgICAgICBjYXNlIFR5cGVPdXRwdXQuVWludDhBcnJheTpcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgIGNhc2UgVHlwZU91dHB1dC5CaWdJbnQ6XG4gICAgICAgICAgICByZXR1cm4gYnl0ZXNUb0JpZ0ludChvdXRwdXQpO1xuICAgICAgICBjYXNlIFR5cGVPdXRwdXQuTnVtYmVyOiB7XG4gICAgICAgICAgICBjb25zdCBiaWdJbnQgPSBieXRlc1RvQmlnSW50KG91dHB1dCk7XG4gICAgICAgICAgICBpZiAoYmlnSW50ID4gQmlnSW50KE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHByb3ZpZGVkIG51bWJlciBpcyBncmVhdGVyIHRoYW4gTUFYX1NBRkVfSU5URUdFUiAocGxlYXNlIHVzZSBhbiBhbHRlcm5hdGl2ZSBvdXRwdXQgdHlwZSknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIoYmlnSW50KTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFR5cGVPdXRwdXQuUHJlZml4ZWRIZXhTdHJpbmc6XG4gICAgICAgICAgICByZXR1cm4gYnl0ZXNUb0hleChvdXRwdXQpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIG91dHB1dFR5cGUnKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/units.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/units.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GWEI_TO_WEI: () => (/* binding */ GWEI_TO_WEI),\n/* harmony export */   formatBigDecimal: () => (/* binding */ formatBigDecimal)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n\n/** Easy conversion from Gwei to wei */\nconst GWEI_TO_WEI = BigInt(1000000000);\nfunction formatBigDecimal(numerator, denominator, maxDecimalFactor) {\n    if (denominator === _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0) {\n        denominator = _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_1;\n    }\n    const full = numerator / denominator;\n    const fraction = ((numerator - full * denominator) * maxDecimalFactor) / denominator;\n    // zeros to be added post decimal are number of zeros in maxDecimalFactor - number of digits in fraction\n    const zerosPostDecimal = String(maxDecimalFactor).length - 1 - String(fraction).length;\n    return `${full}.${'0'.repeat(zerosPostDecimal)}${fraction}`;\n}\n//# sourceMappingURL=units.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3VuaXRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvRDtBQUNwRDtBQUNPO0FBQ0E7QUFDUCx3QkFBd0IsbURBQVE7QUFDaEMsc0JBQXNCLG1EQUFRO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLEtBQUssR0FBRyw2QkFBNkIsRUFBRSxTQUFTO0FBQzlEO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC13YWxsZXQvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3VuaXRzLmpzP2MyYWIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQklHSU5UXzAsIEJJR0lOVF8xIH0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuLyoqIEVhc3kgY29udmVyc2lvbiBmcm9tIEd3ZWkgdG8gd2VpICovXG5leHBvcnQgY29uc3QgR1dFSV9UT19XRUkgPSBCaWdJbnQoMTAwMDAwMDAwMCk7XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0QmlnRGVjaW1hbChudW1lcmF0b3IsIGRlbm9taW5hdG9yLCBtYXhEZWNpbWFsRmFjdG9yKSB7XG4gICAgaWYgKGRlbm9taW5hdG9yID09PSBCSUdJTlRfMCkge1xuICAgICAgICBkZW5vbWluYXRvciA9IEJJR0lOVF8xO1xuICAgIH1cbiAgICBjb25zdCBmdWxsID0gbnVtZXJhdG9yIC8gZGVub21pbmF0b3I7XG4gICAgY29uc3QgZnJhY3Rpb24gPSAoKG51bWVyYXRvciAtIGZ1bGwgKiBkZW5vbWluYXRvcikgKiBtYXhEZWNpbWFsRmFjdG9yKSAvIGRlbm9taW5hdG9yO1xuICAgIC8vIHplcm9zIHRvIGJlIGFkZGVkIHBvc3QgZGVjaW1hbCBhcmUgbnVtYmVyIG9mIHplcm9zIGluIG1heERlY2ltYWxGYWN0b3IgLSBudW1iZXIgb2YgZGlnaXRzIGluIGZyYWN0aW9uXG4gICAgY29uc3QgemVyb3NQb3N0RGVjaW1hbCA9IFN0cmluZyhtYXhEZWNpbWFsRmFjdG9yKS5sZW5ndGggLSAxIC0gU3RyaW5nKGZyYWN0aW9uKS5sZW5ndGg7XG4gICAgcmV0dXJuIGAke2Z1bGx9LiR7JzAnLnJlcGVhdCh6ZXJvc1Bvc3REZWNpbWFsKX0ke2ZyYWN0aW9ufWA7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bml0cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/units.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/withdrawal.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/withdrawal.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Withdrawal: () => (/* binding */ Withdrawal)\n/* harmony export */ });\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./address.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/address.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/types.js\");\n\n\n\n\n/**\n * Representation of EIP-4895 withdrawal data\n */\nclass Withdrawal {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating a Withdrawal object from varying data types.\n     * Its amount is in Gwei to match CL representation and for eventual ssz withdrawalsRoot\n     */\n    constructor(index, validatorIndex, address, \n    /**\n     * withdrawal amount in Gwei to match the CL repesentation and eventually ssz withdrawalsRoot\n     */\n    amount) {\n        this.index = index;\n        this.validatorIndex = validatorIndex;\n        this.address = address;\n        this.amount = amount;\n    }\n    static fromWithdrawalData(withdrawalData) {\n        const { index: indexData, validatorIndex: validatorIndexData, address: addressData, amount: amountData, } = withdrawalData;\n        const index = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(indexData, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt);\n        const validatorIndex = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(validatorIndexData, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt);\n        const address = addressData instanceof _address_js__WEBPACK_IMPORTED_MODULE_0__.Address ? addressData : new _address_js__WEBPACK_IMPORTED_MODULE_0__.Address((0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(addressData));\n        const amount = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(amountData, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt);\n        return new Withdrawal(index, validatorIndex, address, amount);\n    }\n    static fromValuesArray(withdrawalArray) {\n        if (withdrawalArray.length !== 4) {\n            throw Error(`Invalid withdrawalArray length expected=4 actual=${withdrawalArray.length}`);\n        }\n        const [index, validatorIndex, address, amount] = withdrawalArray;\n        return Withdrawal.fromWithdrawalData({ index, validatorIndex, address, amount });\n    }\n    /**\n     * Convert a withdrawal to a buffer array\n     * @param withdrawal the withdrawal to convert\n     * @returns buffer array of the withdrawal\n     */\n    static toBytesArray(withdrawal) {\n        const { index, validatorIndex, address, amount } = withdrawal;\n        const indexBytes = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(index, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt) === _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0\n            ? new Uint8Array()\n            : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(index, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        const validatorIndexBytes = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(validatorIndex, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt) === _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0\n            ? new Uint8Array()\n            : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(validatorIndex, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        const addressBytes = address instanceof _address_js__WEBPACK_IMPORTED_MODULE_0__.Address ? address.bytes : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(address, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        const amountBytes = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(amount, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt) === _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0\n            ? new Uint8Array()\n            : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(amount, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        return [indexBytes, validatorIndexBytes, addressBytes, amountBytes];\n    }\n    raw() {\n        return Withdrawal.toBytesArray(this);\n    }\n    toValue() {\n        return {\n            index: this.index,\n            validatorIndex: this.validatorIndex,\n            address: this.address.bytes,\n            amount: this.amount,\n        };\n    }\n    toJSON() {\n        return {\n            index: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.index),\n            validatorIndex: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.validatorIndex),\n            address: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(this.address.bytes),\n            amount: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.amount),\n        };\n    }\n}\n//# sourceMappingURL=withdrawal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3dpdGhkcmF3YWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBdUM7QUFDdUI7QUFDcEI7QUFDTTtBQUNoRDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGtHQUFrRztBQUNsSCxzQkFBc0IsaURBQU0sWUFBWSxpREFBVTtBQUNsRCwrQkFBK0IsaURBQU0scUJBQXFCLGlEQUFVO0FBQ3BFLCtDQUErQyxnREFBTyxxQkFBcUIsZ0RBQU8sQ0FBQyxrREFBTztBQUMxRix1QkFBdUIsaURBQU0sYUFBYSxpREFBVTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RSx1QkFBdUI7QUFDbkc7QUFDQTtBQUNBLCtDQUErQyx3Q0FBd0M7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IseUNBQXlDO0FBQ3pELDJCQUEyQixpREFBTSxRQUFRLGlEQUFVLGFBQWEsbURBQVE7QUFDeEU7QUFDQSxjQUFjLGlEQUFNLFFBQVEsaURBQVU7QUFDdEMsb0NBQW9DLGlEQUFNLGlCQUFpQixpREFBVSxhQUFhLG1EQUFRO0FBQzFGO0FBQ0EsY0FBYyxpREFBTSxpQkFBaUIsaURBQVU7QUFDL0MsZ0RBQWdELGdEQUFPLG1CQUFtQixpREFBTSxVQUFVLGlEQUFVO0FBQ3BHLDRCQUE0QixpREFBTSxTQUFTLGlEQUFVLGFBQWEsbURBQVE7QUFDMUU7QUFDQSxjQUFjLGlEQUFNLFNBQVMsaURBQVU7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHNEQUFXO0FBQzlCLDRCQUE0QixzREFBVztBQUN2QyxxQkFBcUIscURBQVU7QUFDL0Isb0JBQW9CLHNEQUFXO0FBQy9CO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0Ly4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvYmFzZS1jb250cm9sbGVycy9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS93aXRoZHJhd2FsLmpzPzBiYTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJy4vYWRkcmVzcy5qcyc7XG5pbXBvcnQgeyBiaWdJbnRUb0hleCwgYnl0ZXNUb0hleCwgdG9CeXRlcyB9IGZyb20gJy4vYnl0ZXMuanMnO1xuaW1wb3J0IHsgQklHSU5UXzAgfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBUeXBlT3V0cHV0LCB0b1R5cGUgfSBmcm9tICcuL3R5cGVzLmpzJztcbi8qKlxuICogUmVwcmVzZW50YXRpb24gb2YgRUlQLTQ4OTUgd2l0aGRyYXdhbCBkYXRhXG4gKi9cbmV4cG9ydCBjbGFzcyBXaXRoZHJhd2FsIHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGNvbnN0cnVjdG9yIGFzc2lnbnMgYW5kIHZhbGlkYXRlcyB0aGUgdmFsdWVzLlxuICAgICAqIFVzZSB0aGUgc3RhdGljIGZhY3RvcnkgbWV0aG9kcyB0byBhc3Npc3QgaW4gY3JlYXRpbmcgYSBXaXRoZHJhd2FsIG9iamVjdCBmcm9tIHZhcnlpbmcgZGF0YSB0eXBlcy5cbiAgICAgKiBJdHMgYW1vdW50IGlzIGluIEd3ZWkgdG8gbWF0Y2ggQ0wgcmVwcmVzZW50YXRpb24gYW5kIGZvciBldmVudHVhbCBzc3ogd2l0aGRyYXdhbHNSb290XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaW5kZXgsIHZhbGlkYXRvckluZGV4LCBhZGRyZXNzLCBcbiAgICAvKipcbiAgICAgKiB3aXRoZHJhd2FsIGFtb3VudCBpbiBHd2VpIHRvIG1hdGNoIHRoZSBDTCByZXBlc2VudGF0aW9uIGFuZCBldmVudHVhbGx5IHNzeiB3aXRoZHJhd2Fsc1Jvb3RcbiAgICAgKi9cbiAgICBhbW91bnQpIHtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICB0aGlzLnZhbGlkYXRvckluZGV4ID0gdmFsaWRhdG9ySW5kZXg7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgICAgIHRoaXMuYW1vdW50ID0gYW1vdW50O1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVdpdGhkcmF3YWxEYXRhKHdpdGhkcmF3YWxEYXRhKSB7XG4gICAgICAgIGNvbnN0IHsgaW5kZXg6IGluZGV4RGF0YSwgdmFsaWRhdG9ySW5kZXg6IHZhbGlkYXRvckluZGV4RGF0YSwgYWRkcmVzczogYWRkcmVzc0RhdGEsIGFtb3VudDogYW1vdW50RGF0YSwgfSA9IHdpdGhkcmF3YWxEYXRhO1xuICAgICAgICBjb25zdCBpbmRleCA9IHRvVHlwZShpbmRleERhdGEsIFR5cGVPdXRwdXQuQmlnSW50KTtcbiAgICAgICAgY29uc3QgdmFsaWRhdG9ySW5kZXggPSB0b1R5cGUodmFsaWRhdG9ySW5kZXhEYXRhLCBUeXBlT3V0cHV0LkJpZ0ludCk7XG4gICAgICAgIGNvbnN0IGFkZHJlc3MgPSBhZGRyZXNzRGF0YSBpbnN0YW5jZW9mIEFkZHJlc3MgPyBhZGRyZXNzRGF0YSA6IG5ldyBBZGRyZXNzKHRvQnl0ZXMoYWRkcmVzc0RhdGEpKTtcbiAgICAgICAgY29uc3QgYW1vdW50ID0gdG9UeXBlKGFtb3VudERhdGEsIFR5cGVPdXRwdXQuQmlnSW50KTtcbiAgICAgICAgcmV0dXJuIG5ldyBXaXRoZHJhd2FsKGluZGV4LCB2YWxpZGF0b3JJbmRleCwgYWRkcmVzcywgYW1vdW50KTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21WYWx1ZXNBcnJheSh3aXRoZHJhd2FsQXJyYXkpIHtcbiAgICAgICAgaWYgKHdpdGhkcmF3YWxBcnJheS5sZW5ndGggIT09IDQpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBJbnZhbGlkIHdpdGhkcmF3YWxBcnJheSBsZW5ndGggZXhwZWN0ZWQ9NCBhY3R1YWw9JHt3aXRoZHJhd2FsQXJyYXkubGVuZ3RofWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IFtpbmRleCwgdmFsaWRhdG9ySW5kZXgsIGFkZHJlc3MsIGFtb3VudF0gPSB3aXRoZHJhd2FsQXJyYXk7XG4gICAgICAgIHJldHVybiBXaXRoZHJhd2FsLmZyb21XaXRoZHJhd2FsRGF0YSh7IGluZGV4LCB2YWxpZGF0b3JJbmRleCwgYWRkcmVzcywgYW1vdW50IH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGEgd2l0aGRyYXdhbCB0byBhIGJ1ZmZlciBhcnJheVxuICAgICAqIEBwYXJhbSB3aXRoZHJhd2FsIHRoZSB3aXRoZHJhd2FsIHRvIGNvbnZlcnRcbiAgICAgKiBAcmV0dXJucyBidWZmZXIgYXJyYXkgb2YgdGhlIHdpdGhkcmF3YWxcbiAgICAgKi9cbiAgICBzdGF0aWMgdG9CeXRlc0FycmF5KHdpdGhkcmF3YWwpIHtcbiAgICAgICAgY29uc3QgeyBpbmRleCwgdmFsaWRhdG9ySW5kZXgsIGFkZHJlc3MsIGFtb3VudCB9ID0gd2l0aGRyYXdhbDtcbiAgICAgICAgY29uc3QgaW5kZXhCeXRlcyA9IHRvVHlwZShpbmRleCwgVHlwZU91dHB1dC5CaWdJbnQpID09PSBCSUdJTlRfMFxuICAgICAgICAgICAgPyBuZXcgVWludDhBcnJheSgpXG4gICAgICAgICAgICA6IHRvVHlwZShpbmRleCwgVHlwZU91dHB1dC5VaW50OEFycmF5KTtcbiAgICAgICAgY29uc3QgdmFsaWRhdG9ySW5kZXhCeXRlcyA9IHRvVHlwZSh2YWxpZGF0b3JJbmRleCwgVHlwZU91dHB1dC5CaWdJbnQpID09PSBCSUdJTlRfMFxuICAgICAgICAgICAgPyBuZXcgVWludDhBcnJheSgpXG4gICAgICAgICAgICA6IHRvVHlwZSh2YWxpZGF0b3JJbmRleCwgVHlwZU91dHB1dC5VaW50OEFycmF5KTtcbiAgICAgICAgY29uc3QgYWRkcmVzc0J5dGVzID0gYWRkcmVzcyBpbnN0YW5jZW9mIEFkZHJlc3MgPyBhZGRyZXNzLmJ5dGVzIDogdG9UeXBlKGFkZHJlc3MsIFR5cGVPdXRwdXQuVWludDhBcnJheSk7XG4gICAgICAgIGNvbnN0IGFtb3VudEJ5dGVzID0gdG9UeXBlKGFtb3VudCwgVHlwZU91dHB1dC5CaWdJbnQpID09PSBCSUdJTlRfMFxuICAgICAgICAgICAgPyBuZXcgVWludDhBcnJheSgpXG4gICAgICAgICAgICA6IHRvVHlwZShhbW91bnQsIFR5cGVPdXRwdXQuVWludDhBcnJheSk7XG4gICAgICAgIHJldHVybiBbaW5kZXhCeXRlcywgdmFsaWRhdG9ySW5kZXhCeXRlcywgYWRkcmVzc0J5dGVzLCBhbW91bnRCeXRlc107XG4gICAgfVxuICAgIHJhdygpIHtcbiAgICAgICAgcmV0dXJuIFdpdGhkcmF3YWwudG9CeXRlc0FycmF5KHRoaXMpO1xuICAgIH1cbiAgICB0b1ZhbHVlKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXG4gICAgICAgICAgICB2YWxpZGF0b3JJbmRleDogdGhpcy52YWxpZGF0b3JJbmRleCxcbiAgICAgICAgICAgIGFkZHJlc3M6IHRoaXMuYWRkcmVzcy5ieXRlcyxcbiAgICAgICAgICAgIGFtb3VudDogdGhpcy5hbW91bnQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluZGV4OiBiaWdJbnRUb0hleCh0aGlzLmluZGV4KSxcbiAgICAgICAgICAgIHZhbGlkYXRvckluZGV4OiBiaWdJbnRUb0hleCh0aGlzLnZhbGlkYXRvckluZGV4KSxcbiAgICAgICAgICAgIGFkZHJlc3M6IGJ5dGVzVG9IZXgodGhpcy5hZGRyZXNzLmJ5dGVzKSxcbiAgICAgICAgICAgIGFtb3VudDogYmlnSW50VG9IZXgodGhpcy5hbW91bnQpLFxuICAgICAgICB9O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpdGhkcmF3YWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/withdrawal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/_shortw_utils.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/_shortw_utils.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCurve: () => (/* binding */ createCurve),\n/* harmony export */   getHash: () => (/* binding */ getHash)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/hmac */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/hmac.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\n\n// connects noble-curves to noble-hashes\nfunction getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => (0,_noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__.hmac)(hash, key, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(...msgs)),\n        randomBytes: _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.randomBytes,\n    };\n}\nfunction createCurve(curveDef, defHash) {\n    const create = (hash) => (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__.weierstrass)({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL2VzbS9fc2hvcnR3X3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDMEM7QUFDcUI7QUFDUDtBQUN4RDtBQUNPO0FBQ1A7QUFDQTtBQUNBLGdDQUFnQyx3REFBSSxZQUFZLGdFQUFXO0FBQzNELG1CQUFtQjtBQUNuQjtBQUNBO0FBQ087QUFDUCw2QkFBNkIscUVBQVcsR0FBRywrQkFBK0I7QUFDMUUsMkJBQTJCLDRCQUE0QjtBQUN2RDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0Ly4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvYmFzZS1jb250cm9sbGVycy9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vX3Nob3J0d191dGlscy5qcz9mMDUxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBub2JsZS1jdXJ2ZXMgLSBNSVQgTGljZW5zZSAoYykgMjAyMiBQYXVsIE1pbGxlciAocGF1bG1pbGxyLmNvbSkgKi9cbmltcG9ydCB7IGhtYWMgfSBmcm9tICdAbm9ibGUvaGFzaGVzL2htYWMnO1xuaW1wb3J0IHsgY29uY2F0Qnl0ZXMsIHJhbmRvbUJ5dGVzIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy91dGlscyc7XG5pbXBvcnQgeyB3ZWllcnN0cmFzcyB9IGZyb20gJy4vYWJzdHJhY3Qvd2VpZXJzdHJhc3MuanMnO1xuLy8gY29ubmVjdHMgbm9ibGUtY3VydmVzIHRvIG5vYmxlLWhhc2hlc1xuZXhwb3J0IGZ1bmN0aW9uIGdldEhhc2goaGFzaCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGhhc2gsXG4gICAgICAgIGhtYWM6IChrZXksIC4uLm1zZ3MpID0+IGhtYWMoaGFzaCwga2V5LCBjb25jYXRCeXRlcyguLi5tc2dzKSksXG4gICAgICAgIHJhbmRvbUJ5dGVzLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ3VydmUoY3VydmVEZWYsIGRlZkhhc2gpIHtcbiAgICBjb25zdCBjcmVhdGUgPSAoaGFzaCkgPT4gd2VpZXJzdHJhc3MoeyAuLi5jdXJ2ZURlZiwgLi4uZ2V0SGFzaChoYXNoKSB9KTtcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7IC4uLmNyZWF0ZShkZWZIYXNoKSwgY3JlYXRlIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X3Nob3J0d191dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/_shortw_utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/curve.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/curve.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateBasic: () => (/* binding */ validateBasic),\n/* harmony export */   wNAF: () => (/* binding */ wNAF)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modular.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\n\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nfunction wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nfunction validateBasic(curve) {\n    (0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.validateField)(curve.Fp);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject)(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...(0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.nLength)(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/curve.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/hash-to-curve.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/hash-to-curve.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHasher: () => (/* binding */ createHasher),\n/* harmony export */   expand_message_xmd: () => (/* binding */ expand_message_xmd),\n/* harmony export */   expand_message_xof: () => (/* binding */ expand_message_xof),\n/* harmony export */   hash_to_field: () => (/* binding */ hash_to_field),\n/* harmony export */   isogenyMap: () => (/* binding */ isogenyMap)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modular.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/utils.js\");\n\n\nfunction validateDST(dst) {\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBytes)(dst))\n        return dst;\n    if (typeof dst === 'string')\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(dst);\n    throw new Error('DST must be Uint8Array or string');\n}\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = _utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    if (value < 0 || value >= 1 << (8 * length)) {\n        throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n    }\n    const res = Array.from({ length }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction abytes(item) {\n    if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBytes)(item))\n        throw new Error('Uint8Array expected');\n}\nfunction isNum(item) {\n    if (!Number.isSafeInteger(item))\n        throw new Error('number expected');\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nfunction expand_message_xmd(msg, DST, lenInBytes, H) {\n    abytes(msg);\n    abytes(DST);\n    isNum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255)\n        DST = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (ell > 255)\n        throw new Error('Invalid xmd length');\n    const DST_prime = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n        b[i] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...args));\n    }\n    const pseudo_random_bytes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nfunction expand_message_xof(msg, DST, lenInBytes, k, H) {\n    abytes(msg);\n    abytes(DST);\n    isNum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil((2 * k) / 8);\n        DST = H.create({ dkLen }).update((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255)\n        throw new Error('expand_message_xof: invalid lenInBytes');\n    return (H.create({ dkLen: lenInBytes })\n        .update(msg)\n        .update(i2osp(lenInBytes, 2))\n        // 2. DST_prime = DST || I2OSP(len(DST), 1)\n        .update(DST)\n        .update(i2osp(DST.length, 1))\n        .digest());\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nfunction hash_to_field(msg, count, options) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(options, {\n        DST: 'stringOrUint8Array',\n        p: 'bigint',\n        m: 'isSafeInteger',\n        k: 'isSafeInteger',\n        hash: 'hash',\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    abytes(msg);\n    isNum(count);\n    const DST = validateDST(_DST);\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    }\n    else if (expand === 'xof') {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    }\n    else if (expand === '_internal_pass') {\n        // for internal tests only\n        prb = msg;\n    }\n    else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const e = new Array(m);\n        for (let j = 0; j < m; j++) {\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.mod)(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nfunction isogenyMap(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i) => Array.from(i).reverse());\n    return (x, y) => {\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return { x, y };\n    };\n}\nfunction createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== 'function')\n        throw new Error('mapToCurve() must be defined');\n    return {\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve(msg, options) {\n            const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve(msg, options) {\n            const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n    };\n}\n//# sourceMappingURL=hash-to-curve.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/hash-to-curve.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/modular.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/modular.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Field: () => (/* binding */ Field),\n/* harmony export */   FpDiv: () => (/* binding */ FpDiv),\n/* harmony export */   FpInvertBatch: () => (/* binding */ FpInvertBatch),\n/* harmony export */   FpIsSquare: () => (/* binding */ FpIsSquare),\n/* harmony export */   FpPow: () => (/* binding */ FpPow),\n/* harmony export */   FpSqrt: () => (/* binding */ FpSqrt),\n/* harmony export */   FpSqrtEven: () => (/* binding */ FpSqrtEven),\n/* harmony export */   FpSqrtOdd: () => (/* binding */ FpSqrtOdd),\n/* harmony export */   getFieldBytesLength: () => (/* binding */ getFieldBytesLength),\n/* harmony export */   getMinHashLength: () => (/* binding */ getMinHashLength),\n/* harmony export */   hashToPrivateScalar: () => (/* binding */ hashToPrivateScalar),\n/* harmony export */   invert: () => (/* binding */ invert),\n/* harmony export */   isNegativeLE: () => (/* binding */ isNegativeLE),\n/* harmony export */   mapHashToField: () => (/* binding */ mapHashToField),\n/* harmony export */   mod: () => (/* binding */ mod),\n/* harmony export */   nLength: () => (/* binding */ nLength),\n/* harmony export */   pow: () => (/* binding */ pow),\n/* harmony export */   pow2: () => (/* binding */ pow2),\n/* harmony export */   tonelliShanks: () => (/* binding */ tonelliShanks),\n/* harmony export */   validateField: () => (/* binding */ validateField)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nfunction mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nfunction pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nfunction pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nfunction invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nfunction tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nfunction FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nconst isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nfunction validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nfunction FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nfunction FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nfunction FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nfunction FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nfunction nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nfunction Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bitMask)(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(num, BYTES) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(bytes) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nfunction FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nfunction FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nfunction hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(hash) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nfunction getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nfunction getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nfunction mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(key) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(reduced, fieldLen) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/modular.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/utils.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/utils.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bitGet: () => (/* binding */ bitGet),\n/* harmony export */   bitLen: () => (/* binding */ bitLen),\n/* harmony export */   bitMask: () => (/* binding */ bitMask),\n/* harmony export */   bitSet: () => (/* binding */ bitSet),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   bytesToNumberBE: () => (/* binding */ bytesToNumberBE),\n/* harmony export */   bytesToNumberLE: () => (/* binding */ bytesToNumberLE),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createHmacDrbg: () => (/* binding */ createHmacDrbg),\n/* harmony export */   ensureBytes: () => (/* binding */ ensureBytes),\n/* harmony export */   equalBytes: () => (/* binding */ equalBytes),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   numberToBytesBE: () => (/* binding */ numberToBytesBE),\n/* harmony export */   numberToBytesLE: () => (/* binding */ numberToBytesLE),\n/* harmony export */   numberToHexUnpadded: () => (/* binding */ numberToHexUnpadded),\n/* harmony export */   numberToVarBytesBE: () => (/* binding */ numberToVarBytesBE),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   validateObject: () => (/* binding */ validateObject)\n/* harmony export */ });\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    if (!isBytes(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nfunction bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction bytesToNumberLE(bytes) {\n    if (!isBytes(bytes))\n        throw new Error('Uint8Array expected');\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nfunction numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nfunction numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nfunction numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nfunction ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        if (!isBytes(a))\n            throw new Error('Uint8Array expected');\n        sum += a.length;\n    }\n    let res = new Uint8Array(sum);\n    let pad = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nfunction equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nfunction bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nfunction bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nconst bitSet = (n, pos, value) => {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nconst bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nfunction createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nfunction validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/weierstrass.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/weierstrass.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DER: () => (/* binding */ DER),\n/* harmony export */   SWUFpSqrtRatio: () => (/* binding */ SWUFpSqrtRatio),\n/* harmony export */   mapToCurveSimpleSWU: () => (/* binding */ mapToCurveSimpleSWU),\n/* harmony export */   weierstrass: () => (/* binding */ weierstrass),\n/* harmony export */   weierstrassPoints: () => (/* binding */ weierstrassPoints)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modular.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _curve_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./curve.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/curve.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\n\n\n\n\nfunction validatePointOpts(curve) {\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);\n    _utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = _utils_js__WEBPACK_IMPORTED_MODULE_1__;\nconst DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__.isBytes(data))\n            throw new Error('ui8a expected');\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nfunction weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (_utils_js__WEBPACK_IMPORTED_MODULE_1__.isBytes(key))\n                key = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = _modular_js__WEBPACK_IMPORTED_MODULE_2__.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);\n    _utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nfunction weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return _modular_js__WEBPACK_IMPORTED_MODULE_2__.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return _modular_js__WEBPACK_IMPORTED_MODULE_2__.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(_utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = _modular_js__WEBPACK_IMPORTED_MODULE_2__.getMinHashLength(CURVE.n);\n            return _modular_js__WEBPACK_IMPORTED_MODULE_2__.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = _utils_js__WEBPACK_IMPORTED_MODULE_1__.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return _utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash);\n        if (prehash)\n            msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('extraEntropy', e)); // check for being bytes\n        }\n        const seed = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = _utils_js__WEBPACK_IMPORTED_MODULE_1__.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash);\n        publicKey = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || _utils_js__WEBPACK_IMPORTED_MODULE_1__.isBytes(sg)) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nfunction SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nfunction mapToCurveSimpleSWU(Fp, opts) {\n    _modular_js__WEBPACK_IMPORTED_MODULE_2__.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/weierstrass.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/secp256k1.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/secp256k1.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeToCurve: () => (/* binding */ encodeToCurve),\n/* harmony export */   hashToCurve: () => (/* binding */ hashToCurve),\n/* harmony export */   schnorr: () => (/* binding */ schnorr),\n/* harmony export */   secp256k1: () => (/* binding */ secp256k1)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract/modular.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/* harmony import */ var _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abstract/utils.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./abstract/hash-to-curve.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/abstract/hash-to-curve.js\");\n/* harmony import */ var _shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_shortw_utils.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/_shortw_utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\n\n\n\n\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b3, _3n, P) * b3) % P;\n    const b9 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b6, _3n, P) * b3) % P;\n    const b11 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b9, _2n, P) * b2) % P;\n    const b22 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b11, _11n, P) * b11) % P;\n    const b44 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b22, _22n, P) * b22) % P;\n    const b88 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b44, _44n, P) * b44) % P;\n    const b176 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b88, _88n, P) * b88) % P;\n    const b220 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b176, _44n, P) * b44) % P;\n    const b223 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b220, _3n, P) * b3) % P;\n    const t1 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b223, _23n, P) * b22) % P;\n    const t2 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(t1, _6n, P) * b2) % P;\n    const root = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.Field)(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nconst secp256k1 = (0,_shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__.createCurve)({\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(k - c1 * a1 - c2 * a2, n);\n            let k2 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256)((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.numberToBytesBE)(n, 32);\nconst modP = (x) => (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(x, secp256k1P);\nconst modN = (x) => (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.randomBytes)(32)) {\n    const m = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('signature', signature, 64);\n    const m = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('message', message);\n    const pub = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('publicKey', publicKey, 32);\n    try {\n        const P = lift_x((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nconst schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE: _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.numberToBytesBE,\n        bytesToNumberBE: _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE,\n        taggedHash,\n        mod: _abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__.isogenyMap)(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_6__.mapToCurveSimpleSWU)(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__.createHasher)(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256,\n}))();\nconst hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nconst encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/secp256k1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/_assert.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/_assert.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bool: () => (/* binding */ bool),\n/* harmony export */   bytes: () => (/* binding */ bytes),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   output: () => (/* binding */ output)\n/* harmony export */ });\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\n// copied from utils\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\n\nconst assert = { number, bool, bytes, hash, exists, output };\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assert);\n//# sourceMappingURL=_assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fYXNzZXJ0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0EsbURBQW1ELEVBQUU7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsaURBQWlELEVBQUU7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsUUFBUSxrQkFBa0IsU0FBUztBQUM1RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLElBQUk7QUFDckY7QUFDQTtBQUNxRDtBQUNyRCxpQkFBaUI7QUFDakIsaUVBQWUsTUFBTSxFQUFDO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0Ly4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvYmFzZS1jb250cm9sbGVycy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX2Fzc2VydC5qcz9lM2I2Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIG51bWJlcihuKSB7XG4gICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihuKSB8fCBuIDwgMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBXcm9uZyBwb3NpdGl2ZSBpbnRlZ2VyOiAke259YCk7XG59XG5mdW5jdGlvbiBib29sKGIpIHtcbiAgICBpZiAodHlwZW9mIGIgIT09ICdib29sZWFuJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBib29sZWFuLCBub3QgJHtifWApO1xufVxuLy8gY29waWVkIGZyb20gdXRpbHNcbmZ1bmN0aW9uIGlzQnl0ZXMoYSkge1xuICAgIHJldHVybiAoYSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHxcbiAgICAgICAgKGEgIT0gbnVsbCAmJiB0eXBlb2YgYSA9PT0gJ29iamVjdCcgJiYgYS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnVWludDhBcnJheScpKTtcbn1cbmZ1bmN0aW9uIGJ5dGVzKGIsIC4uLmxlbmd0aHMpIHtcbiAgICBpZiAoIWlzQnl0ZXMoYikpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgVWludDhBcnJheScpO1xuICAgIGlmIChsZW5ndGhzLmxlbmd0aCA+IDAgJiYgIWxlbmd0aHMuaW5jbHVkZXMoYi5sZW5ndGgpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIFVpbnQ4QXJyYXkgb2YgbGVuZ3RoICR7bGVuZ3Roc30sIG5vdCBvZiBsZW5ndGg9JHtiLmxlbmd0aH1gKTtcbn1cbmZ1bmN0aW9uIGhhc2goaGFzaCkge1xuICAgIGlmICh0eXBlb2YgaGFzaCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgaGFzaC5jcmVhdGUgIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCBzaG91bGQgYmUgd3JhcHBlZCBieSB1dGlscy53cmFwQ29uc3RydWN0b3InKTtcbiAgICBudW1iZXIoaGFzaC5vdXRwdXRMZW4pO1xuICAgIG51bWJlcihoYXNoLmJsb2NrTGVuKTtcbn1cbmZ1bmN0aW9uIGV4aXN0cyhpbnN0YW5jZSwgY2hlY2tGaW5pc2hlZCA9IHRydWUpIHtcbiAgICBpZiAoaW5zdGFuY2UuZGVzdHJveWVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hhc2ggaW5zdGFuY2UgaGFzIGJlZW4gZGVzdHJveWVkJyk7XG4gICAgaWYgKGNoZWNrRmluaXNoZWQgJiYgaW5zdGFuY2UuZmluaXNoZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCNkaWdlc3QoKSBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZCcpO1xufVxuZnVuY3Rpb24gb3V0cHV0KG91dCwgaW5zdGFuY2UpIHtcbiAgICBieXRlcyhvdXQpO1xuICAgIGNvbnN0IG1pbiA9IGluc3RhbmNlLm91dHB1dExlbjtcbiAgICBpZiAob3V0Lmxlbmd0aCA8IG1pbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGRpZ2VzdEludG8oKSBleHBlY3RzIG91dHB1dCBidWZmZXIgb2YgbGVuZ3RoIGF0IGxlYXN0ICR7bWlufWApO1xuICAgIH1cbn1cbmV4cG9ydCB7IG51bWJlciwgYm9vbCwgYnl0ZXMsIGhhc2gsIGV4aXN0cywgb3V0cHV0IH07XG5jb25zdCBhc3NlcnQgPSB7IG51bWJlciwgYm9vbCwgYnl0ZXMsIGhhc2gsIGV4aXN0cywgb3V0cHV0IH07XG5leHBvcnQgZGVmYXVsdCBhc3NlcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fYXNzZXJ0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/_assert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/_sha2.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/_sha2.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SHA2: () => (/* binding */ SHA2)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(this.buffer);\n    }\n    update(data) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        const { view, buffer, blockLen } = this;\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.output)(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_sha2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fc2hhMi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBOEM7QUFDUztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sbUJBQW1CLDJDQUFJO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IscURBQVU7QUFDOUI7QUFDQTtBQUNBLFFBQVEsa0RBQU07QUFDZCxnQkFBZ0IseUJBQXlCO0FBQ3pDLGVBQWUsa0RBQU87QUFDdEI7QUFDQSwwQkFBMEIsVUFBVTtBQUNwQztBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMscURBQVU7QUFDM0MsdUJBQXVCLHVCQUF1QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsa0RBQU07QUFDZCxRQUFRLGtEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsK0JBQStCO0FBQy9DLGNBQWMsTUFBTTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsY0FBYztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IscURBQVU7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixZQUFZO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixvQkFBb0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxREFBcUQ7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC13YWxsZXQvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fc2hhMi5qcz9lNjQ4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4aXN0cywgb3V0cHV0IH0gZnJvbSAnLi9fYXNzZXJ0LmpzJztcbmltcG9ydCB7IEhhc2gsIGNyZWF0ZVZpZXcsIHRvQnl0ZXMgfSBmcm9tICcuL3V0aWxzLmpzJztcbi8vIFBvbHlmaWxsIGZvciBTYWZhcmkgMTRcbmZ1bmN0aW9uIHNldEJpZ1VpbnQ2NCh2aWV3LCBieXRlT2Zmc2V0LCB2YWx1ZSwgaXNMRSkge1xuICAgIGlmICh0eXBlb2Ygdmlldy5zZXRCaWdVaW50NjQgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHJldHVybiB2aWV3LnNldEJpZ1VpbnQ2NChieXRlT2Zmc2V0LCB2YWx1ZSwgaXNMRSk7XG4gICAgY29uc3QgXzMybiA9IEJpZ0ludCgzMik7XG4gICAgY29uc3QgX3UzMl9tYXggPSBCaWdJbnQoMHhmZmZmZmZmZik7XG4gICAgY29uc3Qgd2ggPSBOdW1iZXIoKHZhbHVlID4+IF8zMm4pICYgX3UzMl9tYXgpO1xuICAgIGNvbnN0IHdsID0gTnVtYmVyKHZhbHVlICYgX3UzMl9tYXgpO1xuICAgIGNvbnN0IGggPSBpc0xFID8gNCA6IDA7XG4gICAgY29uc3QgbCA9IGlzTEUgPyAwIDogNDtcbiAgICB2aWV3LnNldFVpbnQzMihieXRlT2Zmc2V0ICsgaCwgd2gsIGlzTEUpO1xuICAgIHZpZXcuc2V0VWludDMyKGJ5dGVPZmZzZXQgKyBsLCB3bCwgaXNMRSk7XG59XG4vLyBCYXNlIFNIQTIgY2xhc3MgKFJGQyA2MjM0KVxuZXhwb3J0IGNsYXNzIFNIQTIgZXh0ZW5kcyBIYXNoIHtcbiAgICBjb25zdHJ1Y3RvcihibG9ja0xlbiwgb3V0cHV0TGVuLCBwYWRPZmZzZXQsIGlzTEUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ibG9ja0xlbiA9IGJsb2NrTGVuO1xuICAgICAgICB0aGlzLm91dHB1dExlbiA9IG91dHB1dExlbjtcbiAgICAgICAgdGhpcy5wYWRPZmZzZXQgPSBwYWRPZmZzZXQ7XG4gICAgICAgIHRoaXMuaXNMRSA9IGlzTEU7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoYmxvY2tMZW4pO1xuICAgICAgICB0aGlzLnZpZXcgPSBjcmVhdGVWaWV3KHRoaXMuYnVmZmVyKTtcbiAgICB9XG4gICAgdXBkYXRlKGRhdGEpIHtcbiAgICAgICAgZXhpc3RzKHRoaXMpO1xuICAgICAgICBjb25zdCB7IHZpZXcsIGJ1ZmZlciwgYmxvY2tMZW4gfSA9IHRoaXM7XG4gICAgICAgIGRhdGEgPSB0b0J5dGVzKGRhdGEpO1xuICAgICAgICBjb25zdCBsZW4gPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgcG9zID0gMDsgcG9zIDwgbGVuOykge1xuICAgICAgICAgICAgY29uc3QgdGFrZSA9IE1hdGgubWluKGJsb2NrTGVuIC0gdGhpcy5wb3MsIGxlbiAtIHBvcyk7XG4gICAgICAgICAgICAvLyBGYXN0IHBhdGg6IHdlIGhhdmUgYXQgbGVhc3Qgb25lIGJsb2NrIGluIGlucHV0LCBjYXN0IGl0IHRvIHZpZXcgYW5kIHByb2Nlc3NcbiAgICAgICAgICAgIGlmICh0YWtlID09PSBibG9ja0xlbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFWaWV3ID0gY3JlYXRlVmlldyhkYXRhKTtcbiAgICAgICAgICAgICAgICBmb3IgKDsgYmxvY2tMZW4gPD0gbGVuIC0gcG9zOyBwb3MgKz0gYmxvY2tMZW4pXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvY2VzcyhkYXRhVmlldywgcG9zKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZlci5zZXQoZGF0YS5zdWJhcnJheShwb3MsIHBvcyArIHRha2UpLCB0aGlzLnBvcyk7XG4gICAgICAgICAgICB0aGlzLnBvcyArPSB0YWtlO1xuICAgICAgICAgICAgcG9zICs9IHRha2U7XG4gICAgICAgICAgICBpZiAodGhpcy5wb3MgPT09IGJsb2NrTGVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzKHZpZXcsIDApO1xuICAgICAgICAgICAgICAgIHRoaXMucG9zID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxlbmd0aCArPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgdGhpcy5yb3VuZENsZWFuKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkaWdlc3RJbnRvKG91dCkge1xuICAgICAgICBleGlzdHModGhpcyk7XG4gICAgICAgIG91dHB1dChvdXQsIHRoaXMpO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgLy8gUGFkZGluZ1xuICAgICAgICAvLyBXZSBjYW4gYXZvaWQgYWxsb2NhdGlvbiBvZiBidWZmZXIgZm9yIHBhZGRpbmcgY29tcGxldGVseSBpZiBpdFxuICAgICAgICAvLyB3YXMgcHJldmlvdXNseSBub3QgYWxsb2NhdGVkIGhlcmUuIEJ1dCBpdCB3b24ndCBjaGFuZ2UgcGVyZm9ybWFuY2UuXG4gICAgICAgIGNvbnN0IHsgYnVmZmVyLCB2aWV3LCBibG9ja0xlbiwgaXNMRSB9ID0gdGhpcztcbiAgICAgICAgbGV0IHsgcG9zIH0gPSB0aGlzO1xuICAgICAgICAvLyBhcHBlbmQgdGhlIGJpdCAnMScgdG8gdGhlIG1lc3NhZ2VcbiAgICAgICAgYnVmZmVyW3BvcysrXSA9IDBiMTAwMDAwMDA7XG4gICAgICAgIHRoaXMuYnVmZmVyLnN1YmFycmF5KHBvcykuZmlsbCgwKTtcbiAgICAgICAgLy8gd2UgaGF2ZSBsZXNzIHRoYW4gcGFkT2Zmc2V0IGxlZnQgaW4gYnVmZmVyLCBzbyB3ZSBjYW5ub3QgcHV0IGxlbmd0aCBpbiBjdXJyZW50IGJsb2NrLCBuZWVkIHByb2Nlc3MgaXQgYW5kIHBhZCBhZ2FpblxuICAgICAgICBpZiAodGhpcy5wYWRPZmZzZXQgPiBibG9ja0xlbiAtIHBvcykge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzKHZpZXcsIDApO1xuICAgICAgICAgICAgcG9zID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBQYWQgdW50aWwgZnVsbCBibG9jayBieXRlIHdpdGggemVyb3NcbiAgICAgICAgZm9yIChsZXQgaSA9IHBvczsgaSA8IGJsb2NrTGVuOyBpKyspXG4gICAgICAgICAgICBidWZmZXJbaV0gPSAwO1xuICAgICAgICAvLyBOb3RlOiBzaGE1MTIgcmVxdWlyZXMgbGVuZ3RoIHRvIGJlIDEyOGJpdCBpbnRlZ2VyLCBidXQgbGVuZ3RoIGluIEpTIHdpbGwgb3ZlcmZsb3cgYmVmb3JlIHRoYXRcbiAgICAgICAgLy8gWW91IG5lZWQgdG8gd3JpdGUgYXJvdW5kIDIgZXhhYnl0ZXMgKHU2NF9tYXggLyA4IC8gKDEwMjQqKjYpKSBmb3IgdGhpcyB0byBoYXBwZW4uXG4gICAgICAgIC8vIFNvIHdlIGp1c3Qgd3JpdGUgbG93ZXN0IDY0IGJpdHMgb2YgdGhhdCB2YWx1ZS5cbiAgICAgICAgc2V0QmlnVWludDY0KHZpZXcsIGJsb2NrTGVuIC0gOCwgQmlnSW50KHRoaXMubGVuZ3RoICogOCksIGlzTEUpO1xuICAgICAgICB0aGlzLnByb2Nlc3ModmlldywgMCk7XG4gICAgICAgIGNvbnN0IG92aWV3ID0gY3JlYXRlVmlldyhvdXQpO1xuICAgICAgICBjb25zdCBsZW4gPSB0aGlzLm91dHB1dExlbjtcbiAgICAgICAgLy8gTk9URTogd2UgZG8gZGl2aXNpb24gYnkgNCBsYXRlciwgd2hpY2ggc2hvdWxkIGJlIGZ1c2VkIGluIHNpbmdsZSBvcCB3aXRoIG1vZHVsbyBieSBKSVRcbiAgICAgICAgaWYgKGxlbiAlIDQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ19zaGEyOiBvdXRwdXRMZW4gc2hvdWxkIGJlIGFsaWduZWQgdG8gMzJiaXQnKTtcbiAgICAgICAgY29uc3Qgb3V0TGVuID0gbGVuIC8gNDtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLmdldCgpO1xuICAgICAgICBpZiAob3V0TGVuID4gc3RhdGUubGVuZ3RoKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdfc2hhMjogb3V0cHV0TGVuIGJpZ2dlciB0aGFuIHN0YXRlJyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0TGVuOyBpKyspXG4gICAgICAgICAgICBvdmlldy5zZXRVaW50MzIoNCAqIGksIHN0YXRlW2ldLCBpc0xFKTtcbiAgICB9XG4gICAgZGlnZXN0KCkge1xuICAgICAgICBjb25zdCB7IGJ1ZmZlciwgb3V0cHV0TGVuIH0gPSB0aGlzO1xuICAgICAgICB0aGlzLmRpZ2VzdEludG8oYnVmZmVyKTtcbiAgICAgICAgY29uc3QgcmVzID0gYnVmZmVyLnNsaWNlKDAsIG91dHB1dExlbik7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBfY2xvbmVJbnRvKHRvKSB7XG4gICAgICAgIHRvIHx8ICh0byA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkpO1xuICAgICAgICB0by5zZXQoLi4udGhpcy5nZXQoKSk7XG4gICAgICAgIGNvbnN0IHsgYmxvY2tMZW4sIGJ1ZmZlciwgbGVuZ3RoLCBmaW5pc2hlZCwgZGVzdHJveWVkLCBwb3MgfSA9IHRoaXM7XG4gICAgICAgIHRvLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgdG8ucG9zID0gcG9zO1xuICAgICAgICB0by5maW5pc2hlZCA9IGZpbmlzaGVkO1xuICAgICAgICB0by5kZXN0cm95ZWQgPSBkZXN0cm95ZWQ7XG4gICAgICAgIGlmIChsZW5ndGggJSBibG9ja0xlbilcbiAgICAgICAgICAgIHRvLmJ1ZmZlci5zZXQoYnVmZmVyKTtcbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9zaGEyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/_sha2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/_u64.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/_u64.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   add3H: () => (/* binding */ add3H),\n/* harmony export */   add3L: () => (/* binding */ add3L),\n/* harmony export */   add4H: () => (/* binding */ add4H),\n/* harmony export */   add4L: () => (/* binding */ add4L),\n/* harmony export */   add5H: () => (/* binding */ add5H),\n/* harmony export */   add5L: () => (/* binding */ add5L),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fromBig: () => (/* binding */ fromBig),\n/* harmony export */   rotlBH: () => (/* binding */ rotlBH),\n/* harmony export */   rotlBL: () => (/* binding */ rotlBL),\n/* harmony export */   rotlSH: () => (/* binding */ rotlSH),\n/* harmony export */   rotlSL: () => (/* binding */ rotlSL),\n/* harmony export */   rotr32H: () => (/* binding */ rotr32H),\n/* harmony export */   rotr32L: () => (/* binding */ rotr32L),\n/* harmony export */   rotrBH: () => (/* binding */ rotrBH),\n/* harmony export */   rotrBL: () => (/* binding */ rotrBL),\n/* harmony export */   rotrSH: () => (/* binding */ rotrSH),\n/* harmony export */   rotrSL: () => (/* binding */ rotrSL),\n/* harmony export */   shrSH: () => (/* binding */ shrSH),\n/* harmony export */   shrSL: () => (/* binding */ shrSL),\n/* harmony export */   split: () => (/* binding */ split),\n/* harmony export */   toBig: () => (/* binding */ toBig)\n/* harmony export */ });\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\n\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (u64);\n//# sourceMappingURL=_u64.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fdTY0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDaUw7QUFDakw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsR0FBRyxFQUFDO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0Ly4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvYmFzZS1jb250cm9sbGVycy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX3U2NC5qcz8wMjFlIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFUzMl9NQVNLNjQgPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDIgKiogMzIgLSAxKTtcbmNvbnN0IF8zMm4gPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDMyKTtcbi8vIFdlIGFyZSBub3QgdXNpbmcgQmlnVWludDY0QXJyYXksIGJlY2F1c2UgdGhleSBhcmUgZXh0cmVtZWx5IHNsb3cgYXMgcGVyIDIwMjJcbmZ1bmN0aW9uIGZyb21CaWcobiwgbGUgPSBmYWxzZSkge1xuICAgIGlmIChsZSlcbiAgICAgICAgcmV0dXJuIHsgaDogTnVtYmVyKG4gJiBVMzJfTUFTSzY0KSwgbDogTnVtYmVyKChuID4+IF8zMm4pICYgVTMyX01BU0s2NCkgfTtcbiAgICByZXR1cm4geyBoOiBOdW1iZXIoKG4gPj4gXzMybikgJiBVMzJfTUFTSzY0KSB8IDAsIGw6IE51bWJlcihuICYgVTMyX01BU0s2NCkgfCAwIH07XG59XG5mdW5jdGlvbiBzcGxpdChsc3QsIGxlID0gZmFsc2UpIHtcbiAgICBsZXQgQWggPSBuZXcgVWludDMyQXJyYXkobHN0Lmxlbmd0aCk7XG4gICAgbGV0IEFsID0gbmV3IFVpbnQzMkFycmF5KGxzdC5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbHN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHsgaCwgbCB9ID0gZnJvbUJpZyhsc3RbaV0sIGxlKTtcbiAgICAgICAgW0FoW2ldLCBBbFtpXV0gPSBbaCwgbF07XG4gICAgfVxuICAgIHJldHVybiBbQWgsIEFsXTtcbn1cbmNvbnN0IHRvQmlnID0gKGgsIGwpID0+IChCaWdJbnQoaCA+Pj4gMCkgPDwgXzMybikgfCBCaWdJbnQobCA+Pj4gMCk7XG4vLyBmb3IgU2hpZnQgaW4gWzAsIDMyKVxuY29uc3Qgc2hyU0ggPSAoaCwgX2wsIHMpID0+IGggPj4+IHM7XG5jb25zdCBzaHJTTCA9IChoLCBsLCBzKSA9PiAoaCA8PCAoMzIgLSBzKSkgfCAobCA+Pj4gcyk7XG4vLyBSaWdodCByb3RhdGUgZm9yIFNoaWZ0IGluIFsxLCAzMilcbmNvbnN0IHJvdHJTSCA9IChoLCBsLCBzKSA9PiAoaCA+Pj4gcykgfCAobCA8PCAoMzIgLSBzKSk7XG5jb25zdCByb3RyU0wgPSAoaCwgbCwgcykgPT4gKGggPDwgKDMyIC0gcykpIHwgKGwgPj4+IHMpO1xuLy8gUmlnaHQgcm90YXRlIGZvciBTaGlmdCBpbiAoMzIsIDY0KSwgTk9URTogMzIgaXMgc3BlY2lhbCBjYXNlLlxuY29uc3Qgcm90ckJIID0gKGgsIGwsIHMpID0+IChoIDw8ICg2NCAtIHMpKSB8IChsID4+PiAocyAtIDMyKSk7XG5jb25zdCByb3RyQkwgPSAoaCwgbCwgcykgPT4gKGggPj4+IChzIC0gMzIpKSB8IChsIDw8ICg2NCAtIHMpKTtcbi8vIFJpZ2h0IHJvdGF0ZSBmb3Igc2hpZnQ9PT0zMiAoanVzdCBzd2FwcyBsJmgpXG5jb25zdCByb3RyMzJIID0gKF9oLCBsKSA9PiBsO1xuY29uc3Qgcm90cjMyTCA9IChoLCBfbCkgPT4gaDtcbi8vIExlZnQgcm90YXRlIGZvciBTaGlmdCBpbiBbMSwgMzIpXG5jb25zdCByb3RsU0ggPSAoaCwgbCwgcykgPT4gKGggPDwgcykgfCAobCA+Pj4gKDMyIC0gcykpO1xuY29uc3Qgcm90bFNMID0gKGgsIGwsIHMpID0+IChsIDw8IHMpIHwgKGggPj4+ICgzMiAtIHMpKTtcbi8vIExlZnQgcm90YXRlIGZvciBTaGlmdCBpbiAoMzIsIDY0KSwgTk9URTogMzIgaXMgc3BlY2lhbCBjYXNlLlxuY29uc3Qgcm90bEJIID0gKGgsIGwsIHMpID0+IChsIDw8IChzIC0gMzIpKSB8IChoID4+PiAoNjQgLSBzKSk7XG5jb25zdCByb3RsQkwgPSAoaCwgbCwgcykgPT4gKGggPDwgKHMgLSAzMikpIHwgKGwgPj4+ICg2NCAtIHMpKTtcbi8vIEpTIHVzZXMgMzItYml0IHNpZ25lZCBpbnRlZ2VycyBmb3IgYml0d2lzZSBvcGVyYXRpb25zIHdoaWNoIG1lYW5zIHdlIGNhbm5vdFxuLy8gc2ltcGxlIHRha2UgY2Fycnkgb3V0IG9mIGxvdyBiaXQgc3VtIGJ5IHNoaWZ0LCB3ZSBuZWVkIHRvIHVzZSBkaXZpc2lvbi5cbmZ1bmN0aW9uIGFkZChBaCwgQWwsIEJoLCBCbCkge1xuICAgIGNvbnN0IGwgPSAoQWwgPj4+IDApICsgKEJsID4+PiAwKTtcbiAgICByZXR1cm4geyBoOiAoQWggKyBCaCArICgobCAvIDIgKiogMzIpIHwgMCkpIHwgMCwgbDogbCB8IDAgfTtcbn1cbi8vIEFkZGl0aW9uIHdpdGggbW9yZSB0aGFuIDIgZWxlbWVudHNcbmNvbnN0IGFkZDNMID0gKEFsLCBCbCwgQ2wpID0+IChBbCA+Pj4gMCkgKyAoQmwgPj4+IDApICsgKENsID4+PiAwKTtcbmNvbnN0IGFkZDNIID0gKGxvdywgQWgsIEJoLCBDaCkgPT4gKEFoICsgQmggKyBDaCArICgobG93IC8gMiAqKiAzMikgfCAwKSkgfCAwO1xuY29uc3QgYWRkNEwgPSAoQWwsIEJsLCBDbCwgRGwpID0+IChBbCA+Pj4gMCkgKyAoQmwgPj4+IDApICsgKENsID4+PiAwKSArIChEbCA+Pj4gMCk7XG5jb25zdCBhZGQ0SCA9IChsb3csIEFoLCBCaCwgQ2gsIERoKSA9PiAoQWggKyBCaCArIENoICsgRGggKyAoKGxvdyAvIDIgKiogMzIpIHwgMCkpIHwgMDtcbmNvbnN0IGFkZDVMID0gKEFsLCBCbCwgQ2wsIERsLCBFbCkgPT4gKEFsID4+PiAwKSArIChCbCA+Pj4gMCkgKyAoQ2wgPj4+IDApICsgKERsID4+PiAwKSArIChFbCA+Pj4gMCk7XG5jb25zdCBhZGQ1SCA9IChsb3csIEFoLCBCaCwgQ2gsIERoLCBFaCkgPT4gKEFoICsgQmggKyBDaCArIERoICsgRWggKyAoKGxvdyAvIDIgKiogMzIpIHwgMCkpIHwgMDtcbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0IHsgZnJvbUJpZywgc3BsaXQsIHRvQmlnLCBzaHJTSCwgc2hyU0wsIHJvdHJTSCwgcm90clNMLCByb3RyQkgsIHJvdHJCTCwgcm90cjMySCwgcm90cjMyTCwgcm90bFNILCByb3RsU0wsIHJvdGxCSCwgcm90bEJMLCBhZGQsIGFkZDNMLCBhZGQzSCwgYWRkNEwsIGFkZDRILCBhZGQ1SCwgYWRkNUwsIH07XG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IHU2NCA9IHtcbiAgICBmcm9tQmlnLCBzcGxpdCwgdG9CaWcsXG4gICAgc2hyU0gsIHNoclNMLFxuICAgIHJvdHJTSCwgcm90clNMLCByb3RyQkgsIHJvdHJCTCxcbiAgICByb3RyMzJILCByb3RyMzJMLFxuICAgIHJvdGxTSCwgcm90bFNMLCByb3RsQkgsIHJvdGxCTCxcbiAgICBhZGQsIGFkZDNMLCBhZGQzSCwgYWRkNEwsIGFkZDRILCBhZGQ1SCwgYWRkNUwsXG59O1xuZXhwb3J0IGRlZmF1bHQgdTY0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X3U2NC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/_u64.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/cryptoNode.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/cryptoNode.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   crypto: () => (/* binding */ crypto)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\n// The file will throw on node.js 14 and earlier.\n// @ts-ignore\n\nconst crypto = /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) && typeof /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) === 'object' && \"webcrypto\" in /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) ? node_crypto__WEBPACK_IMPORTED_MODULE_0__.webcrypto : undefined;\n//# sourceMappingURL=cryptoNode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9jcnlwdG9Ob2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ2tDO0FBQzNCLGVBQWUsMk1BQUUsV0FBVywyTUFBRSxpQkFBaUIsME5BQWlCLEdBQUcsa0RBQVk7QUFDdEYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC13YWxsZXQvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9jcnlwdG9Ob2RlLmpzPzA0ODQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gV2UgdXNlIFdlYkNyeXB0byBha2EgZ2xvYmFsVGhpcy5jcnlwdG8sIHdoaWNoIGV4aXN0cyBpbiBicm93c2VycyBhbmQgbm9kZS5qcyAxNisuXG4vLyBTZWUgdXRpbHMudHMgZm9yIGRldGFpbHMuXG4vLyBUaGUgZmlsZSB3aWxsIHRocm93IG9uIG5vZGUuanMgMTQgYW5kIGVhcmxpZXIuXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgKiBhcyBuYyBmcm9tICdub2RlOmNyeXB0byc7XG5leHBvcnQgY29uc3QgY3J5cHRvID0gbmMgJiYgdHlwZW9mIG5jID09PSAnb2JqZWN0JyAmJiAnd2ViY3J5cHRvJyBpbiBuYyA/IG5jLndlYmNyeXB0byA6IHVuZGVmaW5lZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyeXB0b05vZGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/cryptoNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/hmac.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/hmac.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HMAC: () => (/* binding */ HMAC),\n/* harmony export */   hmac: () => (/* binding */ hmac)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// HMAC (RFC 2104)\nclass HMAC extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.hash)(hash);\n        const key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.bytes)(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9obWFjLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZ0c7QUFDckQ7QUFDM0M7QUFDTyxtQkFBbUIsMkNBQUk7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGdEQUFVO0FBQ2xCLG9CQUFvQixrREFBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGtEQUFZO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxrREFBWTtBQUNwQixRQUFRLGlEQUFXO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFLGdCQUFnQix5REFBeUQ7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0Ly4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvYmFzZS1jb250cm9sbGVycy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vaG1hYy5qcz9kY2VhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhhc2ggYXMgYXNzZXJ0SGFzaCwgYnl0ZXMgYXMgYXNzZXJ0Qnl0ZXMsIGV4aXN0cyBhcyBhc3NlcnRFeGlzdHMgfSBmcm9tICcuL19hc3NlcnQuanMnO1xuaW1wb3J0IHsgSGFzaCwgdG9CeXRlcyB9IGZyb20gJy4vdXRpbHMuanMnO1xuLy8gSE1BQyAoUkZDIDIxMDQpXG5leHBvcnQgY2xhc3MgSE1BQyBleHRlbmRzIEhhc2gge1xuICAgIGNvbnN0cnVjdG9yKGhhc2gsIF9rZXkpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgICBhc3NlcnRIYXNoKGhhc2gpO1xuICAgICAgICBjb25zdCBrZXkgPSB0b0J5dGVzKF9rZXkpO1xuICAgICAgICB0aGlzLmlIYXNoID0gaGFzaC5jcmVhdGUoKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmlIYXNoLnVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgaW5zdGFuY2Ugb2YgY2xhc3Mgd2hpY2ggZXh0ZW5kcyB1dGlscy5IYXNoJyk7XG4gICAgICAgIHRoaXMuYmxvY2tMZW4gPSB0aGlzLmlIYXNoLmJsb2NrTGVuO1xuICAgICAgICB0aGlzLm91dHB1dExlbiA9IHRoaXMuaUhhc2gub3V0cHV0TGVuO1xuICAgICAgICBjb25zdCBibG9ja0xlbiA9IHRoaXMuYmxvY2tMZW47XG4gICAgICAgIGNvbnN0IHBhZCA9IG5ldyBVaW50OEFycmF5KGJsb2NrTGVuKTtcbiAgICAgICAgLy8gYmxvY2tMZW4gY2FuIGJlIGJpZ2dlciB0aGFuIG91dHB1dExlblxuICAgICAgICBwYWQuc2V0KGtleS5sZW5ndGggPiBibG9ja0xlbiA/IGhhc2guY3JlYXRlKCkudXBkYXRlKGtleSkuZGlnZXN0KCkgOiBrZXkpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHBhZFtpXSBePSAweDM2O1xuICAgICAgICB0aGlzLmlIYXNoLnVwZGF0ZShwYWQpO1xuICAgICAgICAvLyBCeSBkb2luZyB1cGRhdGUgKHByb2Nlc3Npbmcgb2YgZmlyc3QgYmxvY2spIG9mIG91dGVyIGhhc2ggaGVyZSB3ZSBjYW4gcmUtdXNlIGl0IGJldHdlZW4gbXVsdGlwbGUgY2FsbHMgdmlhIGNsb25lXG4gICAgICAgIHRoaXMub0hhc2ggPSBoYXNoLmNyZWF0ZSgpO1xuICAgICAgICAvLyBVbmRvIGludGVybmFsIFhPUiAmJiBhcHBseSBvdXRlciBYT1JcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWQubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBwYWRbaV0gXj0gMHgzNiBeIDB4NWM7XG4gICAgICAgIHRoaXMub0hhc2gudXBkYXRlKHBhZCk7XG4gICAgICAgIHBhZC5maWxsKDApO1xuICAgIH1cbiAgICB1cGRhdGUoYnVmKSB7XG4gICAgICAgIGFzc2VydEV4aXN0cyh0aGlzKTtcbiAgICAgICAgdGhpcy5pSGFzaC51cGRhdGUoYnVmKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRpZ2VzdEludG8ob3V0KSB7XG4gICAgICAgIGFzc2VydEV4aXN0cyh0aGlzKTtcbiAgICAgICAgYXNzZXJ0Qnl0ZXMob3V0LCB0aGlzLm91dHB1dExlbik7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmlIYXNoLmRpZ2VzdEludG8ob3V0KTtcbiAgICAgICAgdGhpcy5vSGFzaC51cGRhdGUob3V0KTtcbiAgICAgICAgdGhpcy5vSGFzaC5kaWdlc3RJbnRvKG91dCk7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgIH1cbiAgICBkaWdlc3QoKSB7XG4gICAgICAgIGNvbnN0IG91dCA9IG5ldyBVaW50OEFycmF5KHRoaXMub0hhc2gub3V0cHV0TGVuKTtcbiAgICAgICAgdGhpcy5kaWdlc3RJbnRvKG91dCk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIF9jbG9uZUludG8odG8pIHtcbiAgICAgICAgLy8gQ3JlYXRlIG5ldyBpbnN0YW5jZSB3aXRob3V0IGNhbGxpbmcgY29uc3RydWN0b3Igc2luY2Uga2V5IGFscmVhZHkgaW4gc3RhdGUgYW5kIHdlIGRvbid0IGtub3cgaXQuXG4gICAgICAgIHRvIHx8ICh0byA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLCB7fSkpO1xuICAgICAgICBjb25zdCB7IG9IYXNoLCBpSGFzaCwgZmluaXNoZWQsIGRlc3Ryb3llZCwgYmxvY2tMZW4sIG91dHB1dExlbiB9ID0gdGhpcztcbiAgICAgICAgdG8gPSB0bztcbiAgICAgICAgdG8uZmluaXNoZWQgPSBmaW5pc2hlZDtcbiAgICAgICAgdG8uZGVzdHJveWVkID0gZGVzdHJveWVkO1xuICAgICAgICB0by5ibG9ja0xlbiA9IGJsb2NrTGVuO1xuICAgICAgICB0by5vdXRwdXRMZW4gPSBvdXRwdXRMZW47XG4gICAgICAgIHRvLm9IYXNoID0gb0hhc2guX2Nsb25lSW50byh0by5vSGFzaCk7XG4gICAgICAgIHRvLmlIYXNoID0gaUhhc2guX2Nsb25lSW50byh0by5pSGFzaCk7XG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLm9IYXNoLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5pSGFzaC5kZXN0cm95KCk7XG4gICAgfVxufVxuLyoqXG4gKiBITUFDOiBSRkMyMTA0IG1lc3NhZ2UgYXV0aGVudGljYXRpb24gY29kZS5cbiAqIEBwYXJhbSBoYXNoIC0gZnVuY3Rpb24gdGhhdCB3b3VsZCBiZSB1c2VkIGUuZy4gc2hhMjU2XG4gKiBAcGFyYW0ga2V5IC0gbWVzc2FnZSBrZXlcbiAqIEBwYXJhbSBtZXNzYWdlIC0gbWVzc2FnZSBkYXRhXG4gKi9cbmV4cG9ydCBjb25zdCBobWFjID0gKGhhc2gsIGtleSwgbWVzc2FnZSkgPT4gbmV3IEhNQUMoaGFzaCwga2V5KS51cGRhdGUobWVzc2FnZSkuZGlnZXN0KCk7XG5obWFjLmNyZWF0ZSA9IChoYXNoLCBrZXkpID0+IG5ldyBITUFDKGhhc2gsIGtleSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1obWFjLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/hmac.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/sha256.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/sha256.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sha224: () => (/* binding */ sha224),\n/* harmony export */   sha256: () => (/* binding */ sha256)\n/* harmony export */ });\n/* harmony import */ var _sha2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_sha2.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/_sha2.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends _sha2_js__WEBPACK_IMPORTED_MODULE_0__.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 7) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 17) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 6) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 11) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 2) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 13) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nconst sha256 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA256());\nconst sha224 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA224());\n//# sourceMappingURL=sha256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/sha256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/sha3.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/sha3.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Keccak: () => (/* binding */ Keccak),\n/* harmony export */   keccakP: () => (/* binding */ keccakP),\n/* harmony export */   keccak_224: () => (/* binding */ keccak_224),\n/* harmony export */   keccak_256: () => (/* binding */ keccak_256),\n/* harmony export */   keccak_384: () => (/* binding */ keccak_384),\n/* harmony export */   keccak_512: () => (/* binding */ keccak_512),\n/* harmony export */   sha3_224: () => (/* binding */ sha3_224),\n/* harmony export */   sha3_256: () => (/* binding */ sha3_256),\n/* harmony export */   sha3_384: () => (/* binding */ sha3_384),\n/* harmony export */   sha3_512: () => (/* binding */ sha3_512),\n/* harmony export */   shake128: () => (/* binding */ shake128),\n/* harmony export */   shake256: () => (/* binding */ shake256)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _u64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_u64.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/_u64.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/utils.js\");\n\n\n\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.split)(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlBH)(h, l, s) : (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlSH)(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlBL)(h, l, s) : (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlSL)(h, l, s));\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nclass Keccak extends _utils_js__WEBPACK_IMPORTED_MODULE_1__.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.number)(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.exists)(this);\n        const { blockLen, state } = this;\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.exists)(this, false);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.bytes)(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.number)(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.output)(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\nconst sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nconst sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nconst sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nconst sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nconst keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nconst keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nconst keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nconst keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nconst shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nconst shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/sha3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/utils.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/utils.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hash: () => (/* binding */ Hash),\n/* harmony export */   asyncLoop: () => (/* binding */ asyncLoop),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   checkOpts: () => (/* binding */ checkOpts),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createView: () => (/* binding */ createView),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   isLE: () => (/* binding */ isLE),\n/* harmony export */   nextTick: () => (/* binding */ nextTick),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   rotr: () => (/* binding */ rotr),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   u32: () => (/* binding */ u32),\n/* harmony export */   u8: () => (/* binding */ u8),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   wrapConstructor: () => (/* binding */ wrapConstructor),\n/* harmony export */   wrapConstructorWithOpts: () => (/* binding */ wrapConstructorWithOpts),\n/* harmony export */   wrapXOFConstructorWithOpts: () => (/* binding */ wrapXOFConstructorWithOpts)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/crypto */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/cryptoNode.js\");\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\n\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\n// Other libraries would silently corrupt the data instead of throwing an error,\n// when they don't support it.\nconst isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    if (!isBytes(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!isBytes(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        if (!isBytes(a))\n            throw new Error('Uint8Array expected');\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nfunction randomBytes(bytesLength = 32) {\n    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.getRandomValues === 'function') {\n        return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/keccak.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/keccak.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keccak224: () => (/* binding */ keccak224),\n/* harmony export */   keccak256: () => (/* binding */ keccak256),\n/* harmony export */   keccak384: () => (/* binding */ keccak384),\n/* harmony export */   keccak512: () => (/* binding */ keccak512)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/sha3 */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/sha3.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/utils.js\");\n\n\nconst keccak224 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapHash)(_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_1__.keccak_224);\nconst keccak256 = (() => {\n    const k = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapHash)(_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_1__.keccak_256);\n    k.create = _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_1__.keccak_256.create;\n    return k;\n})();\nconst keccak384 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapHash)(_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_1__.keccak_384);\nconst keccak512 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapHash)(_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_1__.keccak_512);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9ldGhlcmV1bS1jcnlwdG9ncmFwaHkvZXNtL2tlY2Nhay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBb0Y7QUFDOUM7QUFDL0Isa0JBQWtCLG1EQUFRLENBQUMsMERBQVU7QUFDckM7QUFDUCxjQUFjLG1EQUFRLENBQUMsMERBQVU7QUFDakMsZUFBZSwwREFBVTtBQUN6QjtBQUNBLENBQUM7QUFDTSxrQkFBa0IsbURBQVEsQ0FBQywwREFBVTtBQUNyQyxrQkFBa0IsbURBQVEsQ0FBQywwREFBVSIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXdhbGxldC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jhc2UtY29udHJvbGxlcnMvbm9kZV9tb2R1bGVzL2V0aGVyZXVtLWNyeXB0b2dyYXBoeS9lc20va2VjY2FrLmpzPzI5NmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsga2VjY2FrXzIyNCwga2VjY2FrXzI1Niwga2VjY2FrXzM4NCwga2VjY2FrXzUxMiB9IGZyb20gXCJAbm9ibGUvaGFzaGVzL3NoYTNcIjtcbmltcG9ydCB7IHdyYXBIYXNoIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmV4cG9ydCBjb25zdCBrZWNjYWsyMjQgPSB3cmFwSGFzaChrZWNjYWtfMjI0KTtcbmV4cG9ydCBjb25zdCBrZWNjYWsyNTYgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGsgPSB3cmFwSGFzaChrZWNjYWtfMjU2KTtcbiAgICBrLmNyZWF0ZSA9IGtlY2Nha18yNTYuY3JlYXRlO1xuICAgIHJldHVybiBrO1xufSkoKTtcbmV4cG9ydCBjb25zdCBrZWNjYWszODQgPSB3cmFwSGFzaChrZWNjYWtfMzg0KTtcbmV4cG9ydCBjb25zdCBrZWNjYWs1MTIgPSB3cmFwSGFzaChrZWNjYWtfNTEyKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/keccak.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/random.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/random.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRandomBytes: () => (/* binding */ getRandomBytes),\n/* harmony export */   getRandomBytesSync: () => (/* binding */ getRandomBytesSync)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/utils.js\");\n\nfunction getRandomBytesSync(bytes) {\n    return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.randomBytes)(bytes);\n}\nasync function getRandomBytes(bytes) {\n    return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.randomBytes)(bytes);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9ldGhlcmV1bS1jcnlwdG9ncmFwaHkvZXNtL3JhbmRvbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBa0Q7QUFDM0M7QUFDUCxXQUFXLGdFQUFXO0FBQ3RCO0FBQ087QUFDUCxXQUFXLGdFQUFXO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0Ly4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvYmFzZS1jb250cm9sbGVycy9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L2VzbS9yYW5kb20uanM/YTE2MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByYW5kb21CeXRlcyB9IGZyb20gXCJAbm9ibGUvaGFzaGVzL3V0aWxzXCI7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UmFuZG9tQnl0ZXNTeW5jKGJ5dGVzKSB7XG4gICAgcmV0dXJuIHJhbmRvbUJ5dGVzKGJ5dGVzKTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRSYW5kb21CeXRlcyhieXRlcykge1xuICAgIHJldHVybiByYW5kb21CeXRlcyhieXRlcyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/random.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/secp256k1.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/secp256k1.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   secp256k1: () => (/* reexport safe */ _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.secp256k1)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/curves/esm/secp256k1.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9ldGhlcmV1bS1jcnlwdG9ncmFwaHkvZXNtL3NlY3AyNTZrMS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFvRCIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXdhbGxldC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jhc2UtY29udHJvbGxlcnMvbm9kZV9tb2R1bGVzL2V0aGVyZXVtLWNyeXB0b2dyYXBoeS9lc20vc2VjcDI1NmsxLmpzPzU4MDkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgc2VjcDI1NmsxIH0gZnJvbSBcIkBub2JsZS9jdXJ2ZXMvc2VjcDI1NmsxXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/secp256k1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/sha256.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/sha256.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sha256: () => (/* binding */ sha256)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/utils.js\");\n\n\nconst sha256 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapHash)(_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9ldGhlcmV1bS1jcnlwdG9ncmFwaHkvZXNtL3NoYTI1Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBeUQ7QUFDbkI7QUFDL0IsZUFBZSxtREFBUSxDQUFDLHdEQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0Ly4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvYmFzZS1jb250cm9sbGVycy9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L2VzbS9zaGEyNTYuanM/MGZjMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzaGEyNTYgYXMgX3NoYTI1NiB9IGZyb20gXCJAbm9ibGUvaGFzaGVzL3NoYTI1NlwiO1xuaW1wb3J0IHsgd3JhcEhhc2ggfSBmcm9tIFwiLi91dGlscy5qc1wiO1xuZXhwb3J0IGNvbnN0IHNoYTI1NiA9IHdyYXBIYXNoKF9zaGEyNTYpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/sha256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/utils.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/utils.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertBool: () => (/* binding */ assertBool),\n/* harmony export */   assertBytes: () => (/* binding */ assertBytes),\n/* harmony export */   bytesToHex: () => (/* reexport safe */ _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.bytesToHex),\n/* harmony export */   bytesToUtf8: () => (/* binding */ bytesToUtf8),\n/* harmony export */   concatBytes: () => (/* reexport safe */ _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes),\n/* harmony export */   createView: () => (/* reexport safe */ _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.createView),\n/* harmony export */   crypto: () => (/* binding */ crypto),\n/* harmony export */   equalsBytes: () => (/* binding */ equalsBytes),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   toHex: () => (/* reexport safe */ _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.bytesToHex),\n/* harmony export */   utf8ToBytes: () => (/* reexport safe */ _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes),\n/* harmony export */   wrapHash: () => (/* binding */ wrapHash)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/_assert */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@noble/hashes/esm/utils.js\");\n\n\nconst assertBool = _noble_hashes_assert__WEBPACK_IMPORTED_MODULE_0__[\"default\"].bool;\nconst assertBytes = _noble_hashes_assert__WEBPACK_IMPORTED_MODULE_0__[\"default\"].bytes;\n\n\n// buf.toString('utf8') -> bytesToUtf8(buf)\nfunction bytesToUtf8(data) {\n    if (!(data instanceof Uint8Array)) {\n        throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);\n    }\n    return new TextDecoder().decode(data);\n}\nfunction hexToBytes(data) {\n    const sliced = data.startsWith(\"0x\") ? data.substring(2) : data;\n    return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(sliced);\n}\n// buf.equals(buf2) -> equalsBytes(buf, buf2)\nfunction equalsBytes(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n// Internal utils\nfunction wrapHash(hash) {\n    return (msg) => {\n        _noble_hashes_assert__WEBPACK_IMPORTED_MODULE_0__[\"default\"].bytes(msg);\n        return hash(msg);\n    };\n}\n// TODO(v3): switch away from node crypto, remove this unnecessary variable.\nconst crypto = (() => {\n    const webCrypto = typeof globalThis === \"object\" && \"crypto\" in globalThis ? globalThis.crypto : undefined;\n    const nodeRequire = typeof module !== \"undefined\" &&\n        typeof module.require === \"function\" &&\n        module.require.bind(module);\n    return {\n        node: nodeRequire && !webCrypto ? nodeRequire(\"crypto\") : undefined,\n        web: webCrypto\n    };\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9ldGhlcmV1bS1jcnlwdG9ncmFwaHkvZXNtL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTJDO0FBQ3FCO0FBQ2hFLG1CQUFtQixpRUFBVztBQUM5QixvQkFBb0Isa0VBQVk7QUFDRztBQUN5RTtBQUM1RztBQUNPO0FBQ1A7QUFDQSxvRUFBb0UsWUFBWTtBQUNoRjtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsV0FBVywrREFBVztBQUN0QjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsY0FBYztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxRQUFRLGtFQUFZO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXdhbGxldC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jhc2UtY29udHJvbGxlcnMvbm9kZV9tb2R1bGVzL2V0aGVyZXVtLWNyeXB0b2dyYXBoeS9lc20vdXRpbHMuanM/YmE1MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gXCJAbm9ibGUvaGFzaGVzL19hc3NlcnRcIjtcbmltcG9ydCB7IGhleFRvQnl0ZXMgYXMgX2hleFRvQnl0ZXMgfSBmcm9tIFwiQG5vYmxlL2hhc2hlcy91dGlsc1wiO1xuY29uc3QgYXNzZXJ0Qm9vbCA9IGFzc2VydC5ib29sO1xuY29uc3QgYXNzZXJ0Qnl0ZXMgPSBhc3NlcnQuYnl0ZXM7XG5leHBvcnQgeyBhc3NlcnRCb29sLCBhc3NlcnRCeXRlcyB9O1xuZXhwb3J0IHsgYnl0ZXNUb0hleCwgYnl0ZXNUb0hleCBhcyB0b0hleCwgY29uY2F0Qnl0ZXMsIGNyZWF0ZVZpZXcsIHV0ZjhUb0J5dGVzIH0gZnJvbSBcIkBub2JsZS9oYXNoZXMvdXRpbHNcIjtcbi8vIGJ1Zi50b1N0cmluZygndXRmOCcpIC0+IGJ5dGVzVG9VdGY4KGJ1ZilcbmV4cG9ydCBmdW5jdGlvbiBieXRlc1RvVXRmOChkYXRhKSB7XG4gICAgaWYgKCEoZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGJ5dGVzVG9VdGY4IGV4cGVjdGVkIFVpbnQ4QXJyYXksIGdvdCAke3R5cGVvZiBkYXRhfWApO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKGRhdGEpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhleFRvQnl0ZXMoZGF0YSkge1xuICAgIGNvbnN0IHNsaWNlZCA9IGRhdGEuc3RhcnRzV2l0aChcIjB4XCIpID8gZGF0YS5zdWJzdHJpbmcoMikgOiBkYXRhO1xuICAgIHJldHVybiBfaGV4VG9CeXRlcyhzbGljZWQpO1xufVxuLy8gYnVmLmVxdWFscyhidWYyKSAtPiBlcXVhbHNCeXRlcyhidWYsIGJ1ZjIpXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzQnl0ZXMoYSwgYikge1xuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8vIEludGVybmFsIHV0aWxzXG5leHBvcnQgZnVuY3Rpb24gd3JhcEhhc2goaGFzaCkge1xuICAgIHJldHVybiAobXNnKSA9PiB7XG4gICAgICAgIGFzc2VydC5ieXRlcyhtc2cpO1xuICAgICAgICByZXR1cm4gaGFzaChtc2cpO1xuICAgIH07XG59XG4vLyBUT0RPKHYzKTogc3dpdGNoIGF3YXkgZnJvbSBub2RlIGNyeXB0bywgcmVtb3ZlIHRoaXMgdW5uZWNlc3NhcnkgdmFyaWFibGUuXG5leHBvcnQgY29uc3QgY3J5cHRvID0gKCgpID0+IHtcbiAgICBjb25zdCB3ZWJDcnlwdG8gPSB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJvYmplY3RcIiAmJiBcImNyeXB0b1wiIGluIGdsb2JhbFRoaXMgPyBnbG9iYWxUaGlzLmNyeXB0byA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBub2RlUmVxdWlyZSA9IHR5cGVvZiBtb2R1bGUgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdHlwZW9mIG1vZHVsZS5yZXF1aXJlID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgbW9kdWxlLnJlcXVpcmUuYmluZChtb2R1bGUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5vZGU6IG5vZGVSZXF1aXJlICYmICF3ZWJDcnlwdG8gPyBub2RlUmVxdWlyZShcImNyeXB0b1wiKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgd2ViOiB3ZWJDcnlwdG9cbiAgICB9O1xufSkoKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/ethereum-cryptography/esm/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/ffjavascript/build/main.esm.js":
/*!****************************************************************!*\
  !*** ./node_modules/@toruslabs/ffjavascript/build/main.esm.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   F1Field: () => (/* binding */ ZqField),\n/* harmony export */   Scalar: () => (/* binding */ Scalar),\n/* harmony export */   ZqField: () => (/* binding */ ZqField)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n\n\n/* global BigInt */\nconst hexLen = [0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4];\n\nfunction fromString(s, radix) {\n  if (!radix || radix == 10) {\n    return BigInt(s);\n  } else if (radix == 16) {\n    if (s.slice(0, 2) == \"0x\") {\n      return BigInt(s);\n    } else {\n      return BigInt(\"0x\" + s);\n    }\n  }\n}\n\nconst e = fromString;\n\nfunction fromArray(a, radix) {\n  let acc = BigInt(0);\n  radix = BigInt(radix);\n  for (let i = 0; i < a.length; i++) {\n    acc = acc * radix + BigInt(a[i]);\n  }\n  return acc;\n}\n\nfunction bitLength(a) {\n  const aS = a.toString(16);\n  return (aS.length - 1) * 4 + hexLen[parseInt(aS[0], 16)];\n}\n\nfunction isNegative(a) {\n  return BigInt(a) < BigInt(0);\n}\n\nfunction isZero(a) {\n  return !a;\n}\n\nfunction shiftLeft(a, n) {\n  return BigInt(a) << BigInt(n);\n}\n\nfunction shiftRight(a, n) {\n  return BigInt(a) >> BigInt(n);\n}\n\nconst shl = shiftLeft;\nconst shr = shiftRight;\n\nfunction isOdd(a) {\n  return (BigInt(a) & BigInt(1)) == BigInt(1);\n}\n\nfunction naf(n) {\n  let E = BigInt(n);\n  const res = [];\n  while (E) {\n    if (E & BigInt(1)) {\n      const z = 2 - Number(E % BigInt(4));\n      res.push(z);\n      E = E - BigInt(z);\n    } else {\n      res.push(0);\n    }\n    E = E >> BigInt(1);\n  }\n  return res;\n}\n\nfunction bits(n) {\n  let E = BigInt(n);\n  const res = [];\n  while (E) {\n    if (E & BigInt(1)) {\n      res.push(1);\n    } else {\n      res.push(0);\n    }\n    E = E >> BigInt(1);\n  }\n  return res;\n}\n\nfunction toNumber(s) {\n  if (s > BigInt(Number.MAX_SAFE_INTEGER)) {\n    throw new Error(\"Number too big\");\n  }\n  return Number(s);\n}\n\nfunction toArray(s, radix) {\n  const res = [];\n  let rem = BigInt(s);\n  radix = BigInt(radix);\n  while (rem) {\n    res.unshift(Number(rem % radix));\n    rem = rem / radix;\n  }\n  return res;\n}\n\nfunction add(a, b) {\n  return BigInt(a) + BigInt(b);\n}\n\nfunction sub(a, b) {\n  return BigInt(a) - BigInt(b);\n}\n\nfunction neg(a) {\n  return -BigInt(a);\n}\n\nfunction mul(a, b) {\n  return BigInt(a) * BigInt(b);\n}\n\nfunction square(a) {\n  return BigInt(a) * BigInt(a);\n}\n\nfunction pow(a, b) {\n  return BigInt(a) ** BigInt(b);\n}\n\nfunction exp$1(a, b) {\n  return BigInt(a) ** BigInt(b);\n}\n\nfunction abs(a) {\n  return BigInt(a) >= 0 ? BigInt(a) : -BigInt(a);\n}\n\nfunction div(a, b) {\n  return BigInt(a) / BigInt(b);\n}\n\nfunction mod(a, b) {\n  return BigInt(a) % BigInt(b);\n}\n\nfunction eq(a, b) {\n  return BigInt(a) == BigInt(b);\n}\n\nfunction neq(a, b) {\n  return BigInt(a) != BigInt(b);\n}\n\nfunction lt(a, b) {\n  return BigInt(a) < BigInt(b);\n}\n\nfunction gt(a, b) {\n  return BigInt(a) > BigInt(b);\n}\n\nfunction leq(a, b) {\n  return BigInt(a) <= BigInt(b);\n}\n\nfunction geq(a, b) {\n  return BigInt(a) >= BigInt(b);\n}\n\nfunction band(a, b) {\n  return BigInt(a) & BigInt(b);\n}\n\nfunction bor(a, b) {\n  return BigInt(a) | BigInt(b);\n}\n\nfunction bxor(a, b) {\n  return BigInt(a) ^ BigInt(b);\n}\n\nfunction land(a, b) {\n  return BigInt(a) && BigInt(b);\n}\n\nfunction lor(a, b) {\n  return BigInt(a) || BigInt(b);\n}\n\nfunction lnot(a) {\n  return !BigInt(a);\n}\n\n// Returns a buffer with Little Endian Representation\nfunction toRprLE(buff, o, e, n8) {\n  const s = \"0000000\" + e.toString(16);\n  const v = new Uint32Array(buff.buffer, o, n8 / 4);\n  const l = (((s.length - 7) * 4 - 1) >> 5) + 1; // Number of 32bit words;\n  for (let i = 0; i < l; i++) v[i] = parseInt(s.substring(s.length - 8 * i - 8, s.length - 8 * i), 16);\n  for (let i = l; i < v.length; i++) v[i] = 0;\n  for (let i = v.length * 4; i < n8; i++) buff[i] = toNumber(band(shiftRight(e, i * 8), 0xff));\n}\n\n// Returns a buffer with Big Endian Representation\nfunction toRprBE(buff, o, e, n8) {\n  const s = \"0000000\" + e.toString(16);\n  const v = new DataView(buff.buffer, buff.byteOffset + o, n8);\n  const l = (((s.length - 7) * 4 - 1) >> 5) + 1; // Number of 32bit words;\n  for (let i = 0; i < l; i++) v.setUint32(n8 - i * 4 - 4, parseInt(s.substring(s.length - 8 * i - 8, s.length - 8 * i), 16), false);\n  for (let i = 0; i < n8 / 4 - l; i++) v[i] = 0;\n}\n\n// Pases a buffer with Little Endian Representation\nfunction fromRprLE(buff, o, n8) {\n  n8 = n8 || buff.byteLength;\n  o = o || 0;\n  const v = new Uint32Array(buff.buffer, o, n8 / 4);\n  const a = new Array(n8 / 4);\n  v.forEach((ch, i) => (a[a.length - i - 1] = ch.toString(16).padStart(8, \"0\")));\n  return fromString(a.join(\"\"), 16);\n}\n\n// Pases a buffer with Big Endian Representation\nfunction fromRprBE(buff, o, n8) {\n  n8 = n8 || buff.byteLength;\n  o = o || 0;\n  const v = new DataView(buff.buffer, buff.byteOffset + o, n8);\n  const a = new Array(n8 / 4);\n  for (let i = 0; i < n8 / 4; i++) {\n    a[i] = v\n      .getUint32(i * 4, false)\n      .toString(16)\n      .padStart(8, \"0\");\n  }\n  return fromString(a.join(\"\"), 16);\n}\n\nfunction toString(a, radix) {\n  return a.toString(radix);\n}\n\nfunction toLEBuff(a) {\n  const buff = new Uint8Array(Math.floor((bitLength(a) - 1) / 8) + 1);\n  toRprLE(buff, 0, a, buff.byteLength);\n  return buff;\n}\n\nconst zero = e(0);\nconst one = e(1);\n\nvar _Scalar = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  abs: abs,\n  add: add,\n  band: band,\n  bitLength: bitLength,\n  bits: bits,\n  bor: bor,\n  bxor: bxor,\n  div: div,\n  e: e,\n  eq: eq,\n  exp: exp$1,\n  fromArray: fromArray,\n  fromRprBE: fromRprBE,\n  fromRprLE: fromRprLE,\n  fromString: fromString,\n  geq: geq,\n  gt: gt,\n  isNegative: isNegative,\n  isOdd: isOdd,\n  isZero: isZero,\n  land: land,\n  leq: leq,\n  lnot: lnot,\n  lor: lor,\n  lt: lt,\n  mod: mod,\n  mul: mul,\n  naf: naf,\n  neg: neg,\n  neq: neq,\n  one: one,\n  pow: pow,\n  shiftLeft: shiftLeft,\n  shiftRight: shiftRight,\n  shl: shl,\n  shr: shr,\n  square: square,\n  sub: sub,\n  toArray: toArray,\n  toLEBuff: toLEBuff,\n  toNumber: toNumber,\n  toRprBE: toRprBE,\n  toRprLE: toRprLE,\n  toString: toString,\n  zero: zero\n});\n\n/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\n/*\nexports.mulScalar = (F, base, e) =>{\n    let res = F.zero;\n    let rem = bigInt(e);\n    let exp = base;\n\n    while (! rem.eq(bigInt.zero)) {\n        if (rem.and(bigInt.one).eq(bigInt.one)) {\n            res = F.add(res, exp);\n        }\n        exp = F.double(exp);\n        rem = rem.shiftRight(1);\n    }\n\n    return res;\n};\n*/\n\nfunction exp(F, base, e) {\n  if (isZero(e)) return F.one;\n\n  const n = bits(e);\n\n  if (n.length == 0) return F.one;\n\n  let res = base;\n\n  for (let i = n.length - 2; i >= 0; i--) {\n    res = F.square(res);\n\n    if (n[i]) {\n      res = F.mul(res, base);\n    }\n  }\n\n  return res;\n}\n\n// Check here: https://eprint.iacr.org/2012/685.pdf\n\nfunction buildSqrt(F) {\n  if (F.m % 2 == 1) {\n    if (eq(mod(F.p, 4), 1)) {\n      if (eq(mod(F.p, 8), 1)) {\n        if (eq(mod(F.p, 16), 1)) {\n          // alg7_muller(F);\n          alg5_tonelliShanks(F);\n        } else if (eq(mod(F.p, 16), 9)) {\n          alg4_kong(F);\n        } else {\n          throw new Error(\"Field withot sqrt\");\n        }\n      } else if (eq(mod(F.p, 8), 5)) {\n        alg3_atkin(F);\n      } else {\n        throw new Error(\"Field withot sqrt\");\n      }\n    } else if (eq(mod(F.p, 4), 3)) {\n      alg2_shanks(F);\n    }\n  } else {\n    const pm2mod4 = mod(pow(F.p, F.m / 2), 4);\n    if (pm2mod4 == 1) {\n      alg10_adj(F);\n    } else if (pm2mod4 == 3) {\n      alg9_adj(F);\n    } else {\n      alg8_complex(F);\n    }\n  }\n}\n\nfunction alg5_tonelliShanks(F) {\n  F.sqrt_q = pow(F.p, F.m);\n\n  F.sqrt_s = 0;\n  F.sqrt_t = sub(F.sqrt_q, 1);\n\n  while (!isOdd(F.sqrt_t)) {\n    F.sqrt_s = F.sqrt_s + 1;\n    F.sqrt_t = div(F.sqrt_t, 2);\n  }\n\n  let c0 = F.one;\n\n  while (F.eq(c0, F.one)) {\n    const c = F.random();\n    F.sqrt_z = F.pow(c, F.sqrt_t);\n    c0 = F.pow(F.sqrt_z, 2 ** (F.sqrt_s - 1));\n  }\n\n  F.sqrt_tm1d2 = div(sub(F.sqrt_t, 1), 2);\n\n  F.sqrt = function (a) {\n    const F = this;\n    if (F.isZero(a)) return F.zero;\n    let w = F.pow(a, F.sqrt_tm1d2);\n    const a0 = F.pow(F.mul(F.square(w), a), 2 ** (F.sqrt_s - 1));\n    if (F.eq(a0, F.negone)) return null;\n\n    let v = F.sqrt_s;\n    let x = F.mul(a, w);\n    let b = F.mul(x, w);\n    let z = F.sqrt_z;\n    while (!F.eq(b, F.one)) {\n      let b2k = F.square(b);\n      let k = 1;\n      while (!F.eq(b2k, F.one)) {\n        b2k = F.square(b2k);\n        k++;\n      }\n\n      w = z;\n      for (let i = 0; i < v - k - 1; i++) {\n        w = F.square(w);\n      }\n      z = F.square(w);\n      b = F.mul(b, z);\n      x = F.mul(x, w);\n      v = k;\n    }\n    return F.geq(x, F.zero) ? x : F.neg(x);\n  };\n}\n\nfunction alg4_kong(F) {\n  F.sqrt = function () {\n    throw new Error(\"Sqrt alg 4 not implemented\");\n  };\n}\n\nfunction alg3_atkin(F) {\n  F.sqrt = function () {\n    throw new Error(\"Sqrt alg 3 not implemented\");\n  };\n}\n\nfunction alg2_shanks(F) {\n  F.sqrt_q = pow(F.p, F.m);\n  F.sqrt_e1 = div(sub(F.sqrt_q, 3), 4);\n\n  F.sqrt = function (a) {\n    if (this.isZero(a)) return this.zero;\n\n    // Test that have solution\n    const a1 = this.pow(a, this.sqrt_e1);\n\n    const a0 = this.mul(this.square(a1), a);\n\n    if (this.eq(a0, this.negone)) return null;\n\n    const x = this.mul(a1, a);\n\n    return F.geq(x, F.zero) ? x : F.neg(x);\n  };\n}\n\nfunction alg10_adj(F) {\n  F.sqrt = function () {\n    throw new Error(\"Sqrt alg 10 not implemented\");\n  };\n}\n\nfunction alg9_adj(F) {\n  F.sqrt_q = pow(F.p, F.m / 2);\n  F.sqrt_e34 = div(sub(F.sqrt_q, 3), 4);\n  F.sqrt_e12 = div(sub(F.sqrt_q, 1), 2);\n\n  F.frobenius = function (n, x) {\n    if (n % 2 == 1) {\n      return F.conjugate(x);\n    } else {\n      return x;\n    }\n  };\n\n  F.sqrt = function (a) {\n    const F = this;\n    const a1 = F.pow(a, F.sqrt_e34);\n    const alfa = F.mul(F.square(a1), a);\n    const a0 = F.mul(F.frobenius(1, alfa), alfa);\n    if (F.eq(a0, F.negone)) return null;\n    const x0 = F.mul(a1, a);\n    let x;\n    if (F.eq(alfa, F.negone)) {\n      x = F.mul(x0, [F.F.zero, F.F.one]);\n    } else {\n      const b = F.pow(F.add(F.one, alfa), F.sqrt_e12);\n      x = F.mul(b, x0);\n    }\n    return F.geq(x, F.zero) ? x : F.neg(x);\n  };\n}\n\nfunction alg8_complex(F) {\n  F.sqrt = function () {\n    throw new Error(\"Sqrt alg 8 not implemented\");\n  };\n}\n\nfunction getRandomBytes(n) {\n  let array = new Uint8Array(n);\n  if (false) {} else {\n    // NodeJS\n    crypto__WEBPACK_IMPORTED_MODULE_0__.randomFillSync(array);\n  }\n  return array;\n}\n\n/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/*\n    This library does operations on polynomials with coefficients in a field F.\n\n    A polynomial P(x) = p0 + p1 * x + p2 * x^2 + ... + pn * x^n  is represented\n    by the array [ p0, p1, p2, ... , pn ].\n */\n\nclass FFT {\n  constructor(G, F, opMulGF) {\n    this.F = F;\n    this.G = G;\n    this.opMulGF = opMulGF;\n\n    let rem = F.sqrt_t || F.t;\n    let s = F.sqrt_s || F.s;\n\n    let nqr = F.one;\n    while (F.eq(F.pow(nqr, F.half), F.one)) nqr = F.add(nqr, F.one);\n\n    this.w = new Array(s + 1);\n    this.wi = new Array(s + 1);\n    this.w[s] = this.F.pow(nqr, rem);\n    this.wi[s] = this.F.inv(this.w[s]);\n\n    let n = s - 1;\n    while (n >= 0) {\n      this.w[n] = this.F.square(this.w[n + 1]);\n      this.wi[n] = this.F.square(this.wi[n + 1]);\n      n--;\n    }\n\n    this.roots = [];\n    /*\n        for (let i=0; i<16; i++) {\n            let r = this.F.one;\n            n = 1 << i;\n            const rootsi = new Array(n);\n            for (let j=0; j<n; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n\n            this.roots.push(rootsi);\n        }\n        */\n    this._setRoots(Math.min(s, 15));\n  }\n\n  _setRoots(n) {\n    for (let i = n; i >= 0 && !this.roots[i]; i--) {\n      let r = this.F.one;\n      const nroots = 1 << i;\n      const rootsi = new Array(nroots);\n      for (let j = 0; j < nroots; j++) {\n        rootsi[j] = r;\n        r = this.F.mul(r, this.w[i]);\n      }\n\n      this.roots[i] = rootsi;\n    }\n  }\n\n  fft(p) {\n    if (p.length <= 1) return p;\n    const bits = log2(p.length - 1) + 1;\n    this._setRoots(bits);\n\n    const m = 1 << bits;\n    if (p.length != m) {\n      throw new Error(\"Size must be multiple of 2\");\n    }\n    const res = __fft(this, p, bits, 0, 1);\n    return res;\n  }\n\n  ifft(p) {\n    if (p.length <= 1) return p;\n    const bits = log2(p.length - 1) + 1;\n    this._setRoots(bits);\n    const m = 1 << bits;\n    if (p.length != m) {\n      throw new Error(\"Size must be multiple of 2\");\n    }\n    const res = __fft(this, p, bits, 0, 1);\n    const twoinvm = this.F.inv(this.F.mulScalar(this.F.one, m));\n    const resn = new Array(m);\n    for (let i = 0; i < m; i++) {\n      resn[i] = this.opMulGF(res[(m - i) % m], twoinvm);\n    }\n\n    return resn;\n  }\n}\n\nfunction log2(V) {\n  return (\n    ((V & 0xffff0000) !== 0 ? ((V &= 0xffff0000), 16) : 0) |\n    ((V & 0xff00ff00) !== 0 ? ((V &= 0xff00ff00), 8) : 0) |\n    ((V & 0xf0f0f0f0) !== 0 ? ((V &= 0xf0f0f0f0), 4) : 0) |\n    ((V & 0xcccccccc) !== 0 ? ((V &= 0xcccccccc), 2) : 0) |\n    ((V & 0xaaaaaaaa) !== 0)\n  );\n}\n\nfunction __fft(PF, pall, bits, offset, step) {\n  const n = 1 << bits;\n  if (n == 1) {\n    return [pall[offset]];\n  } else if (n == 2) {\n    return [PF.G.add(pall[offset], pall[offset + step]), PF.G.sub(pall[offset], pall[offset + step])];\n  }\n\n  const ndiv2 = n >> 1;\n  const p1 = __fft(PF, pall, bits - 1, offset, step * 2);\n  const p2 = __fft(PF, pall, bits - 1, offset + step, step * 2);\n\n  const out = new Array(n);\n\n  for (let i = 0; i < ndiv2; i++) {\n    out[i] = PF.G.add(p1[i], PF.opMulGF(p2[i], PF.roots[bits][i]));\n    out[i + ndiv2] = PF.G.sub(p1[i], PF.opMulGF(p2[i], PF.roots[bits][i]));\n  }\n\n  return out;\n}\n\n/* global BigInt */\n\nclass ZqField {\n  constructor(p) {\n    this.type = \"F1\";\n    this.one = BigInt(1);\n    this.zero = BigInt(0);\n    this.p = BigInt(p);\n    this.m = 1;\n    this.negone = this.p - this.one;\n    this.two = BigInt(2);\n    this.half = this.p >> this.one;\n    this.bitLength = bitLength(this.p);\n    this.mask = (this.one << BigInt(this.bitLength)) - this.one;\n\n    this.n64 = Math.floor((this.bitLength - 1) / 64) + 1;\n    this.n32 = this.n64 * 2;\n    this.n8 = this.n64 * 8;\n    this.R = this.e(this.one << BigInt(this.n64 * 64));\n    this.Ri = this.inv(this.R);\n\n    const e = this.negone >> this.one;\n    this.nqr = this.two;\n    let r = this.pow(this.nqr, e);\n    while (!this.eq(r, this.negone)) {\n      this.nqr = this.nqr + this.one;\n      r = this.pow(this.nqr, e);\n    }\n\n    this.s = 0;\n    this.t = this.negone;\n\n    while ((this.t & this.one) == this.zero) {\n      this.s = this.s + 1;\n      this.t = this.t >> this.one;\n    }\n\n    this.nqr_to_t = this.pow(this.nqr, this.t);\n\n    buildSqrt(this);\n\n    this.FFT = new FFT(this, this, this.mul.bind(this));\n\n    this.fft = this.FFT.fft.bind(this.FFT);\n    this.ifft = this.FFT.ifft.bind(this.FFT);\n    this.w = this.FFT.w;\n    this.wi = this.FFT.wi;\n\n    this.shift = this.square(this.nqr);\n    this.k = this.exp(this.nqr, 2 ** this.s);\n  }\n\n  e(a, b) {\n    let res;\n    if (!b) {\n      res = BigInt(a);\n    } else if (b == 16) {\n      res = BigInt(\"0x\" + a);\n    }\n    if (res < 0) {\n      let nres = -res;\n      if (nres >= this.p) nres = nres % this.p;\n      return this.p - nres;\n    } else {\n      return res >= this.p ? res % this.p : res;\n    }\n  }\n\n  add(a, b) {\n    const res = a + b;\n    return res >= this.p ? res - this.p : res;\n  }\n\n  sub(a, b) {\n    return a >= b ? a - b : this.p - b + a;\n  }\n\n  neg(a) {\n    return a ? this.p - a : a;\n  }\n\n  mul(a, b) {\n    return (a * b) % this.p;\n  }\n\n  mulScalar(base, s) {\n    return (base * this.e(s)) % this.p;\n  }\n\n  square(a) {\n    return (a * a) % this.p;\n  }\n\n  eq(a, b) {\n    return a == b;\n  }\n\n  neq(a, b) {\n    return a != b;\n  }\n\n  lt(a, b) {\n    const aa = a > this.half ? a - this.p : a;\n    const bb = b > this.half ? b - this.p : b;\n    return aa < bb;\n  }\n\n  gt(a, b) {\n    const aa = a > this.half ? a - this.p : a;\n    const bb = b > this.half ? b - this.p : b;\n    return aa > bb;\n  }\n\n  leq(a, b) {\n    const aa = a > this.half ? a - this.p : a;\n    const bb = b > this.half ? b - this.p : b;\n    return aa <= bb;\n  }\n\n  geq(a, b) {\n    const aa = a > this.half ? a - this.p : a;\n    const bb = b > this.half ? b - this.p : b;\n    return aa >= bb;\n  }\n\n  div(a, b) {\n    return this.mul(a, this.inv(b));\n  }\n\n  idiv(a, b) {\n    if (!b) throw new Error(\"Division by zero\");\n    return a / b;\n  }\n\n  inv(a) {\n    if (!a) throw new Error(\"Division by zero\");\n\n    let t = this.zero;\n    let r = this.p;\n    let newt = this.one;\n    let newr = a % this.p;\n    while (newr) {\n      let q = r / newr;\n      [t, newt] = [newt, t - q * newt];\n      [r, newr] = [newr, r - q * newr];\n    }\n    if (t < this.zero) t += this.p;\n    return t;\n  }\n\n  mod(a, b) {\n    return a % b;\n  }\n\n  pow(b, e) {\n    return exp(this, b, e);\n  }\n\n  exp(b, e) {\n    return exp(this, b, e);\n  }\n\n  band(a, b) {\n    const res = a & b & this.mask;\n    return res >= this.p ? res - this.p : res;\n  }\n\n  bor(a, b) {\n    const res = (a | b) & this.mask;\n    return res >= this.p ? res - this.p : res;\n  }\n\n  bxor(a, b) {\n    const res = (a ^ b) & this.mask;\n    return res >= this.p ? res - this.p : res;\n  }\n\n  bnot(a) {\n    const res = a ^ this.mask;\n    return res >= this.p ? res - this.p : res;\n  }\n\n  shl(a, b) {\n    if (Number(b) < this.bitLength) {\n      const res = (a << b) & this.mask;\n      return res >= this.p ? res - this.p : res;\n    } else {\n      const nb = this.p - b;\n      if (Number(nb) < this.bitLength) {\n        return a >> nb;\n      } else {\n        return this.zero;\n      }\n    }\n  }\n\n  shr(a, b) {\n    if (Number(b) < this.bitLength) {\n      return a >> b;\n    } else {\n      const nb = this.p - b;\n      if (Number(nb) < this.bitLength) {\n        const res = (a << nb) & this.mask;\n        return res >= this.p ? res - this.p : res;\n      } else {\n        return 0;\n      }\n    }\n  }\n\n  land(a, b) {\n    return a && b ? this.one : this.zero;\n  }\n\n  lor(a, b) {\n    return a || b ? this.one : this.zero;\n  }\n\n  lnot(a) {\n    return a ? this.zero : this.one;\n  }\n\n  sqrt_old(n) {\n    if (n == this.zero) return this.zero;\n\n    // Test that have solution\n    const res = this.pow(n, this.negone >> this.one);\n    if (res != this.one) return null;\n\n    let m = this.s;\n    let c = this.nqr_to_t;\n    let t = this.pow(n, this.t);\n    let r = this.pow(n, this.add(this.t, this.one) >> this.one);\n\n    while (t != this.one) {\n      let sq = this.square(t);\n      let i = 1;\n      while (sq != this.one) {\n        i++;\n        sq = this.square(sq);\n      }\n\n      // b = c ^ m-i-1\n      let b = c;\n      for (let j = 0; j < m - i - 1; j++) b = this.square(b);\n\n      m = i;\n      c = this.square(b);\n      t = this.mul(t, c);\n      r = this.mul(r, b);\n    }\n\n    if (r > this.p >> this.one) {\n      r = this.neg(r);\n    }\n\n    return r;\n  }\n\n  normalize(a, b) {\n    a = BigInt(a, b);\n    if (a < 0) {\n      let na = -a;\n      if (na >= this.p) na = na % this.p;\n      return this.p - na;\n    } else {\n      return a >= this.p ? a % this.p : a;\n    }\n  }\n\n  random() {\n    const nBytes = (this.bitLength * 2) / 8;\n    let res = this.zero;\n    for (let i = 0; i < nBytes; i++) {\n      res = (res << BigInt(8)) + BigInt(getRandomBytes(1)[0]);\n    }\n    return res % this.p;\n  }\n\n  toString(a, base) {\n    base = base || 10;\n    let vs;\n    if (a > this.half && base == 10) {\n      const v = this.p - a;\n      vs = \"-\" + v.toString(base);\n    } else {\n      vs = a.toString(base);\n    }\n    return vs;\n  }\n\n  isZero(a) {\n    return a == this.zero;\n  }\n\n  fromRng(rng) {\n    let v;\n    do {\n      v = this.zero;\n      for (let i = 0; i < this.n64; i++) {\n        v += rng.nextU64() << BigInt(64 * i);\n      }\n      v &= this.mask;\n    } while (v >= this.p);\n    v = (v * this.Ri) % this.p; // Convert from montgomery\n    return v;\n  }\n\n  fft(a) {\n    return this.FFT.fft(a);\n  }\n\n  ifft(a) {\n    return this.FFT.ifft(a);\n  }\n\n  // Returns a buffer with Little Endian Representation\n  toRprLE(buff, o, e) {\n    toRprLE(buff, o, e, this.n64 * 8);\n  }\n\n  // Returns a buffer with Big Endian Representation\n  toRprBE(buff, o, e) {\n    toRprBE(buff, o, e, this.n64 * 8);\n  }\n\n  // Returns a buffer with Big Endian Montgomery Representation\n  toRprBEM(buff, o, e) {\n    return this.toRprBE(buff, o, this.mul(this.R, e));\n  }\n\n  toRprLEM(buff, o, e) {\n    return this.toRprLE(buff, o, this.mul(this.R, e));\n  }\n\n  // Pases a buffer with Little Endian Representation\n  fromRprLE(buff, o) {\n    return fromRprLE(buff, o, this.n8);\n  }\n\n  // Pases a buffer with Big Endian Representation\n  fromRprBE(buff, o) {\n    return fromRprBE(buff, o, this.n8);\n  }\n\n  fromRprLEM(buff, o) {\n    return this.mul(this.fromRprLE(buff, o), this.Ri);\n  }\n\n  fromRprBEM(buff, o) {\n    return this.mul(this.fromRprBE(buff, o), this.Ri);\n  }\n\n  toObject(a) {\n    return a;\n  }\n}\n\nconst Scalar = _Scalar;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9mZmphdmFzY3JpcHQvYnVpbGQvbWFpbi5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0Qjs7QUFFNUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsY0FBYztBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pELGtCQUFrQixPQUFPO0FBQ3pCLGtCQUFrQixjQUFjO0FBQ2hDLDZCQUE2QixRQUFRO0FBQ3JDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pELGtCQUFrQixPQUFPO0FBQ3pCLGtCQUFrQixnQkFBZ0I7QUFDbEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixZQUFZO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSw2QkFBNkIsUUFBUTtBQUNyQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNCQUFzQixlQUFlO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU0sS0FBZSxFQUFFLEVBV3BCLENBQUM7QUFDSjtBQUNBLElBQUksa0RBQXFCO0FBQ3pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esc0JBQXNCLE1BQU07QUFDNUI7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLEtBQUs7QUFDL0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQkFBb0IsMEJBQTBCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixZQUFZO0FBQ2xDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixPQUFPO0FBQzNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxrQkFBa0IsV0FBVztBQUM3QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzQkFBc0IsZUFBZTs7QUFFckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixZQUFZO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsY0FBYztBQUNwQztBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sZ0NBQWdDO0FBQ2hDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC13YWxsZXQvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9mZmphdmFzY3JpcHQvYnVpbGQvbWFpbi5lc20uanM/NzgxMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5cbi8qIGdsb2JhbCBCaWdJbnQgKi9cbmNvbnN0IGhleExlbiA9IFswLCAxLCAyLCAyLCAzLCAzLCAzLCAzLCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0XTtcblxuZnVuY3Rpb24gZnJvbVN0cmluZyhzLCByYWRpeCkge1xuICBpZiAoIXJhZGl4IHx8IHJhZGl4ID09IDEwKSB7XG4gICAgcmV0dXJuIEJpZ0ludChzKTtcbiAgfSBlbHNlIGlmIChyYWRpeCA9PSAxNikge1xuICAgIGlmIChzLnNsaWNlKDAsIDIpID09IFwiMHhcIikge1xuICAgICAgcmV0dXJuIEJpZ0ludChzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEJpZ0ludChcIjB4XCIgKyBzKTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgZSA9IGZyb21TdHJpbmc7XG5cbmZ1bmN0aW9uIGZyb21BcnJheShhLCByYWRpeCkge1xuICBsZXQgYWNjID0gQmlnSW50KDApO1xuICByYWRpeCA9IEJpZ0ludChyYWRpeCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgIGFjYyA9IGFjYyAqIHJhZGl4ICsgQmlnSW50KGFbaV0pO1xuICB9XG4gIHJldHVybiBhY2M7XG59XG5cbmZ1bmN0aW9uIGJpdExlbmd0aChhKSB7XG4gIGNvbnN0IGFTID0gYS50b1N0cmluZygxNik7XG4gIHJldHVybiAoYVMubGVuZ3RoIC0gMSkgKiA0ICsgaGV4TGVuW3BhcnNlSW50KGFTWzBdLCAxNildO1xufVxuXG5mdW5jdGlvbiBpc05lZ2F0aXZlKGEpIHtcbiAgcmV0dXJuIEJpZ0ludChhKSA8IEJpZ0ludCgwKTtcbn1cblxuZnVuY3Rpb24gaXNaZXJvKGEpIHtcbiAgcmV0dXJuICFhO1xufVxuXG5mdW5jdGlvbiBzaGlmdExlZnQoYSwgbikge1xuICByZXR1cm4gQmlnSW50KGEpIDw8IEJpZ0ludChuKTtcbn1cblxuZnVuY3Rpb24gc2hpZnRSaWdodChhLCBuKSB7XG4gIHJldHVybiBCaWdJbnQoYSkgPj4gQmlnSW50KG4pO1xufVxuXG5jb25zdCBzaGwgPSBzaGlmdExlZnQ7XG5jb25zdCBzaHIgPSBzaGlmdFJpZ2h0O1xuXG5mdW5jdGlvbiBpc09kZChhKSB7XG4gIHJldHVybiAoQmlnSW50KGEpICYgQmlnSW50KDEpKSA9PSBCaWdJbnQoMSk7XG59XG5cbmZ1bmN0aW9uIG5hZihuKSB7XG4gIGxldCBFID0gQmlnSW50KG4pO1xuICBjb25zdCByZXMgPSBbXTtcbiAgd2hpbGUgKEUpIHtcbiAgICBpZiAoRSAmIEJpZ0ludCgxKSkge1xuICAgICAgY29uc3QgeiA9IDIgLSBOdW1iZXIoRSAlIEJpZ0ludCg0KSk7XG4gICAgICByZXMucHVzaCh6KTtcbiAgICAgIEUgPSBFIC0gQmlnSW50KHopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMucHVzaCgwKTtcbiAgICB9XG4gICAgRSA9IEUgPj4gQmlnSW50KDEpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIGJpdHMobikge1xuICBsZXQgRSA9IEJpZ0ludChuKTtcbiAgY29uc3QgcmVzID0gW107XG4gIHdoaWxlIChFKSB7XG4gICAgaWYgKEUgJiBCaWdJbnQoMSkpIHtcbiAgICAgIHJlcy5wdXNoKDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMucHVzaCgwKTtcbiAgICB9XG4gICAgRSA9IEUgPj4gQmlnSW50KDEpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIHRvTnVtYmVyKHMpIHtcbiAgaWYgKHMgPiBCaWdJbnQoTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTnVtYmVyIHRvbyBiaWdcIik7XG4gIH1cbiAgcmV0dXJuIE51bWJlcihzKTtcbn1cblxuZnVuY3Rpb24gdG9BcnJheShzLCByYWRpeCkge1xuICBjb25zdCByZXMgPSBbXTtcbiAgbGV0IHJlbSA9IEJpZ0ludChzKTtcbiAgcmFkaXggPSBCaWdJbnQocmFkaXgpO1xuICB3aGlsZSAocmVtKSB7XG4gICAgcmVzLnVuc2hpZnQoTnVtYmVyKHJlbSAlIHJhZGl4KSk7XG4gICAgcmVtID0gcmVtIC8gcmFkaXg7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gYWRkKGEsIGIpIHtcbiAgcmV0dXJuIEJpZ0ludChhKSArIEJpZ0ludChiKTtcbn1cblxuZnVuY3Rpb24gc3ViKGEsIGIpIHtcbiAgcmV0dXJuIEJpZ0ludChhKSAtIEJpZ0ludChiKTtcbn1cblxuZnVuY3Rpb24gbmVnKGEpIHtcbiAgcmV0dXJuIC1CaWdJbnQoYSk7XG59XG5cbmZ1bmN0aW9uIG11bChhLCBiKSB7XG4gIHJldHVybiBCaWdJbnQoYSkgKiBCaWdJbnQoYik7XG59XG5cbmZ1bmN0aW9uIHNxdWFyZShhKSB7XG4gIHJldHVybiBCaWdJbnQoYSkgKiBCaWdJbnQoYSk7XG59XG5cbmZ1bmN0aW9uIHBvdyhhLCBiKSB7XG4gIHJldHVybiBCaWdJbnQoYSkgKiogQmlnSW50KGIpO1xufVxuXG5mdW5jdGlvbiBleHAkMShhLCBiKSB7XG4gIHJldHVybiBCaWdJbnQoYSkgKiogQmlnSW50KGIpO1xufVxuXG5mdW5jdGlvbiBhYnMoYSkge1xuICByZXR1cm4gQmlnSW50KGEpID49IDAgPyBCaWdJbnQoYSkgOiAtQmlnSW50KGEpO1xufVxuXG5mdW5jdGlvbiBkaXYoYSwgYikge1xuICByZXR1cm4gQmlnSW50KGEpIC8gQmlnSW50KGIpO1xufVxuXG5mdW5jdGlvbiBtb2QoYSwgYikge1xuICByZXR1cm4gQmlnSW50KGEpICUgQmlnSW50KGIpO1xufVxuXG5mdW5jdGlvbiBlcShhLCBiKSB7XG4gIHJldHVybiBCaWdJbnQoYSkgPT0gQmlnSW50KGIpO1xufVxuXG5mdW5jdGlvbiBuZXEoYSwgYikge1xuICByZXR1cm4gQmlnSW50KGEpICE9IEJpZ0ludChiKTtcbn1cblxuZnVuY3Rpb24gbHQoYSwgYikge1xuICByZXR1cm4gQmlnSW50KGEpIDwgQmlnSW50KGIpO1xufVxuXG5mdW5jdGlvbiBndChhLCBiKSB7XG4gIHJldHVybiBCaWdJbnQoYSkgPiBCaWdJbnQoYik7XG59XG5cbmZ1bmN0aW9uIGxlcShhLCBiKSB7XG4gIHJldHVybiBCaWdJbnQoYSkgPD0gQmlnSW50KGIpO1xufVxuXG5mdW5jdGlvbiBnZXEoYSwgYikge1xuICByZXR1cm4gQmlnSW50KGEpID49IEJpZ0ludChiKTtcbn1cblxuZnVuY3Rpb24gYmFuZChhLCBiKSB7XG4gIHJldHVybiBCaWdJbnQoYSkgJiBCaWdJbnQoYik7XG59XG5cbmZ1bmN0aW9uIGJvcihhLCBiKSB7XG4gIHJldHVybiBCaWdJbnQoYSkgfCBCaWdJbnQoYik7XG59XG5cbmZ1bmN0aW9uIGJ4b3IoYSwgYikge1xuICByZXR1cm4gQmlnSW50KGEpIF4gQmlnSW50KGIpO1xufVxuXG5mdW5jdGlvbiBsYW5kKGEsIGIpIHtcbiAgcmV0dXJuIEJpZ0ludChhKSAmJiBCaWdJbnQoYik7XG59XG5cbmZ1bmN0aW9uIGxvcihhLCBiKSB7XG4gIHJldHVybiBCaWdJbnQoYSkgfHwgQmlnSW50KGIpO1xufVxuXG5mdW5jdGlvbiBsbm90KGEpIHtcbiAgcmV0dXJuICFCaWdJbnQoYSk7XG59XG5cbi8vIFJldHVybnMgYSBidWZmZXIgd2l0aCBMaXR0bGUgRW5kaWFuIFJlcHJlc2VudGF0aW9uXG5mdW5jdGlvbiB0b1JwckxFKGJ1ZmYsIG8sIGUsIG44KSB7XG4gIGNvbnN0IHMgPSBcIjAwMDAwMDBcIiArIGUudG9TdHJpbmcoMTYpO1xuICBjb25zdCB2ID0gbmV3IFVpbnQzMkFycmF5KGJ1ZmYuYnVmZmVyLCBvLCBuOCAvIDQpO1xuICBjb25zdCBsID0gKCgocy5sZW5ndGggLSA3KSAqIDQgLSAxKSA+PiA1KSArIDE7IC8vIE51bWJlciBvZiAzMmJpdCB3b3JkcztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHZbaV0gPSBwYXJzZUludChzLnN1YnN0cmluZyhzLmxlbmd0aCAtIDggKiBpIC0gOCwgcy5sZW5ndGggLSA4ICogaSksIDE2KTtcbiAgZm9yIChsZXQgaSA9IGw7IGkgPCB2Lmxlbmd0aDsgaSsrKSB2W2ldID0gMDtcbiAgZm9yIChsZXQgaSA9IHYubGVuZ3RoICogNDsgaSA8IG44OyBpKyspIGJ1ZmZbaV0gPSB0b051bWJlcihiYW5kKHNoaWZ0UmlnaHQoZSwgaSAqIDgpLCAweGZmKSk7XG59XG5cbi8vIFJldHVybnMgYSBidWZmZXIgd2l0aCBCaWcgRW5kaWFuIFJlcHJlc2VudGF0aW9uXG5mdW5jdGlvbiB0b1JwckJFKGJ1ZmYsIG8sIGUsIG44KSB7XG4gIGNvbnN0IHMgPSBcIjAwMDAwMDBcIiArIGUudG9TdHJpbmcoMTYpO1xuICBjb25zdCB2ID0gbmV3IERhdGFWaWV3KGJ1ZmYuYnVmZmVyLCBidWZmLmJ5dGVPZmZzZXQgKyBvLCBuOCk7XG4gIGNvbnN0IGwgPSAoKChzLmxlbmd0aCAtIDcpICogNCAtIDEpID4+IDUpICsgMTsgLy8gTnVtYmVyIG9mIDMyYml0IHdvcmRzO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykgdi5zZXRVaW50MzIobjggLSBpICogNCAtIDQsIHBhcnNlSW50KHMuc3Vic3RyaW5nKHMubGVuZ3RoIC0gOCAqIGkgLSA4LCBzLmxlbmd0aCAtIDggKiBpKSwgMTYpLCBmYWxzZSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbjggLyA0IC0gbDsgaSsrKSB2W2ldID0gMDtcbn1cblxuLy8gUGFzZXMgYSBidWZmZXIgd2l0aCBMaXR0bGUgRW5kaWFuIFJlcHJlc2VudGF0aW9uXG5mdW5jdGlvbiBmcm9tUnByTEUoYnVmZiwgbywgbjgpIHtcbiAgbjggPSBuOCB8fCBidWZmLmJ5dGVMZW5ndGg7XG4gIG8gPSBvIHx8IDA7XG4gIGNvbnN0IHYgPSBuZXcgVWludDMyQXJyYXkoYnVmZi5idWZmZXIsIG8sIG44IC8gNCk7XG4gIGNvbnN0IGEgPSBuZXcgQXJyYXkobjggLyA0KTtcbiAgdi5mb3JFYWNoKChjaCwgaSkgPT4gKGFbYS5sZW5ndGggLSBpIC0gMV0gPSBjaC50b1N0cmluZygxNikucGFkU3RhcnQoOCwgXCIwXCIpKSk7XG4gIHJldHVybiBmcm9tU3RyaW5nKGEuam9pbihcIlwiKSwgMTYpO1xufVxuXG4vLyBQYXNlcyBhIGJ1ZmZlciB3aXRoIEJpZyBFbmRpYW4gUmVwcmVzZW50YXRpb25cbmZ1bmN0aW9uIGZyb21ScHJCRShidWZmLCBvLCBuOCkge1xuICBuOCA9IG44IHx8IGJ1ZmYuYnl0ZUxlbmd0aDtcbiAgbyA9IG8gfHwgMDtcbiAgY29uc3QgdiA9IG5ldyBEYXRhVmlldyhidWZmLmJ1ZmZlciwgYnVmZi5ieXRlT2Zmc2V0ICsgbywgbjgpO1xuICBjb25zdCBhID0gbmV3IEFycmF5KG44IC8gNCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbjggLyA0OyBpKyspIHtcbiAgICBhW2ldID0gdlxuICAgICAgLmdldFVpbnQzMihpICogNCwgZmFsc2UpXG4gICAgICAudG9TdHJpbmcoMTYpXG4gICAgICAucGFkU3RhcnQoOCwgXCIwXCIpO1xuICB9XG4gIHJldHVybiBmcm9tU3RyaW5nKGEuam9pbihcIlwiKSwgMTYpO1xufVxuXG5mdW5jdGlvbiB0b1N0cmluZyhhLCByYWRpeCkge1xuICByZXR1cm4gYS50b1N0cmluZyhyYWRpeCk7XG59XG5cbmZ1bmN0aW9uIHRvTEVCdWZmKGEpIHtcbiAgY29uc3QgYnVmZiA9IG5ldyBVaW50OEFycmF5KE1hdGguZmxvb3IoKGJpdExlbmd0aChhKSAtIDEpIC8gOCkgKyAxKTtcbiAgdG9ScHJMRShidWZmLCAwLCBhLCBidWZmLmJ5dGVMZW5ndGgpO1xuICByZXR1cm4gYnVmZjtcbn1cblxuY29uc3QgemVybyA9IGUoMCk7XG5jb25zdCBvbmUgPSBlKDEpO1xuXG52YXIgX1NjYWxhciA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBhYnM6IGFicyxcbiAgYWRkOiBhZGQsXG4gIGJhbmQ6IGJhbmQsXG4gIGJpdExlbmd0aDogYml0TGVuZ3RoLFxuICBiaXRzOiBiaXRzLFxuICBib3I6IGJvcixcbiAgYnhvcjogYnhvcixcbiAgZGl2OiBkaXYsXG4gIGU6IGUsXG4gIGVxOiBlcSxcbiAgZXhwOiBleHAkMSxcbiAgZnJvbUFycmF5OiBmcm9tQXJyYXksXG4gIGZyb21ScHJCRTogZnJvbVJwckJFLFxuICBmcm9tUnByTEU6IGZyb21ScHJMRSxcbiAgZnJvbVN0cmluZzogZnJvbVN0cmluZyxcbiAgZ2VxOiBnZXEsXG4gIGd0OiBndCxcbiAgaXNOZWdhdGl2ZTogaXNOZWdhdGl2ZSxcbiAgaXNPZGQ6IGlzT2RkLFxuICBpc1plcm86IGlzWmVybyxcbiAgbGFuZDogbGFuZCxcbiAgbGVxOiBsZXEsXG4gIGxub3Q6IGxub3QsXG4gIGxvcjogbG9yLFxuICBsdDogbHQsXG4gIG1vZDogbW9kLFxuICBtdWw6IG11bCxcbiAgbmFmOiBuYWYsXG4gIG5lZzogbmVnLFxuICBuZXE6IG5lcSxcbiAgb25lOiBvbmUsXG4gIHBvdzogcG93LFxuICBzaGlmdExlZnQ6IHNoaWZ0TGVmdCxcbiAgc2hpZnRSaWdodDogc2hpZnRSaWdodCxcbiAgc2hsOiBzaGwsXG4gIHNocjogc2hyLFxuICBzcXVhcmU6IHNxdWFyZSxcbiAgc3ViOiBzdWIsXG4gIHRvQXJyYXk6IHRvQXJyYXksXG4gIHRvTEVCdWZmOiB0b0xFQnVmZixcbiAgdG9OdW1iZXI6IHRvTnVtYmVyLFxuICB0b1JwckJFOiB0b1JwckJFLFxuICB0b1JwckxFOiB0b1JwckxFLFxuICB0b1N0cmluZzogdG9TdHJpbmcsXG4gIHplcm86IHplcm9cbn0pO1xuXG4vKlxuICAgIENvcHlyaWdodCAyMDE4IDBraW1zIGFzc29jaWF0aW9uLlxuXG4gICAgVGhpcyBmaWxlIGlzIHBhcnQgb2Ygc25hcmtqcy5cblxuICAgIHNuYXJranMgaXMgYSBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAgICBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlXG4gICAgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pXG4gICAgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICBzbmFya2pzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YgTUVSQ0hBTlRBQklMSVRZXG4gICAgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yXG4gICAgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYWxvbmcgd2l0aFxuICAgIHNuYXJranMuIElmIG5vdCwgc2VlIDxodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuXG5cbi8qXG5leHBvcnRzLm11bFNjYWxhciA9IChGLCBiYXNlLCBlKSA9PntcbiAgICBsZXQgcmVzID0gRi56ZXJvO1xuICAgIGxldCByZW0gPSBiaWdJbnQoZSk7XG4gICAgbGV0IGV4cCA9IGJhc2U7XG5cbiAgICB3aGlsZSAoISByZW0uZXEoYmlnSW50Lnplcm8pKSB7XG4gICAgICAgIGlmIChyZW0uYW5kKGJpZ0ludC5vbmUpLmVxKGJpZ0ludC5vbmUpKSB7XG4gICAgICAgICAgICByZXMgPSBGLmFkZChyZXMsIGV4cCk7XG4gICAgICAgIH1cbiAgICAgICAgZXhwID0gRi5kb3VibGUoZXhwKTtcbiAgICAgICAgcmVtID0gcmVtLnNoaWZ0UmlnaHQoMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbn07XG4qL1xuXG5mdW5jdGlvbiBleHAoRiwgYmFzZSwgZSkge1xuICBpZiAoaXNaZXJvKGUpKSByZXR1cm4gRi5vbmU7XG5cbiAgY29uc3QgbiA9IGJpdHMoZSk7XG5cbiAgaWYgKG4ubGVuZ3RoID09IDApIHJldHVybiBGLm9uZTtcblxuICBsZXQgcmVzID0gYmFzZTtcblxuICBmb3IgKGxldCBpID0gbi5sZW5ndGggLSAyOyBpID49IDA7IGktLSkge1xuICAgIHJlcyA9IEYuc3F1YXJlKHJlcyk7XG5cbiAgICBpZiAobltpXSkge1xuICAgICAgcmVzID0gRi5tdWwocmVzLCBiYXNlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufVxuXG4vLyBDaGVjayBoZXJlOiBodHRwczovL2VwcmludC5pYWNyLm9yZy8yMDEyLzY4NS5wZGZcblxuZnVuY3Rpb24gYnVpbGRTcXJ0KEYpIHtcbiAgaWYgKEYubSAlIDIgPT0gMSkge1xuICAgIGlmIChlcShtb2QoRi5wLCA0KSwgMSkpIHtcbiAgICAgIGlmIChlcShtb2QoRi5wLCA4KSwgMSkpIHtcbiAgICAgICAgaWYgKGVxKG1vZChGLnAsIDE2KSwgMSkpIHtcbiAgICAgICAgICAvLyBhbGc3X211bGxlcihGKTtcbiAgICAgICAgICBhbGc1X3RvbmVsbGlTaGFua3MoRik7XG4gICAgICAgIH0gZWxzZSBpZiAoZXEobW9kKEYucCwgMTYpLCA5KSkge1xuICAgICAgICAgIGFsZzRfa29uZyhGKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGaWVsZCB3aXRob3Qgc3FydFwiKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChlcShtb2QoRi5wLCA4KSwgNSkpIHtcbiAgICAgICAgYWxnM19hdGtpbihGKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZpZWxkIHdpdGhvdCBzcXJ0XCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZXEobW9kKEYucCwgNCksIDMpKSB7XG4gICAgICBhbGcyX3NoYW5rcyhGKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcG0ybW9kNCA9IG1vZChwb3coRi5wLCBGLm0gLyAyKSwgNCk7XG4gICAgaWYgKHBtMm1vZDQgPT0gMSkge1xuICAgICAgYWxnMTBfYWRqKEYpO1xuICAgIH0gZWxzZSBpZiAocG0ybW9kNCA9PSAzKSB7XG4gICAgICBhbGc5X2FkaihGKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWxnOF9jb21wbGV4KEYpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhbGc1X3RvbmVsbGlTaGFua3MoRikge1xuICBGLnNxcnRfcSA9IHBvdyhGLnAsIEYubSk7XG5cbiAgRi5zcXJ0X3MgPSAwO1xuICBGLnNxcnRfdCA9IHN1YihGLnNxcnRfcSwgMSk7XG5cbiAgd2hpbGUgKCFpc09kZChGLnNxcnRfdCkpIHtcbiAgICBGLnNxcnRfcyA9IEYuc3FydF9zICsgMTtcbiAgICBGLnNxcnRfdCA9IGRpdihGLnNxcnRfdCwgMik7XG4gIH1cblxuICBsZXQgYzAgPSBGLm9uZTtcblxuICB3aGlsZSAoRi5lcShjMCwgRi5vbmUpKSB7XG4gICAgY29uc3QgYyA9IEYucmFuZG9tKCk7XG4gICAgRi5zcXJ0X3ogPSBGLnBvdyhjLCBGLnNxcnRfdCk7XG4gICAgYzAgPSBGLnBvdyhGLnNxcnRfeiwgMiAqKiAoRi5zcXJ0X3MgLSAxKSk7XG4gIH1cblxuICBGLnNxcnRfdG0xZDIgPSBkaXYoc3ViKEYuc3FydF90LCAxKSwgMik7XG5cbiAgRi5zcXJ0ID0gZnVuY3Rpb24gKGEpIHtcbiAgICBjb25zdCBGID0gdGhpcztcbiAgICBpZiAoRi5pc1plcm8oYSkpIHJldHVybiBGLnplcm87XG4gICAgbGV0IHcgPSBGLnBvdyhhLCBGLnNxcnRfdG0xZDIpO1xuICAgIGNvbnN0IGEwID0gRi5wb3coRi5tdWwoRi5zcXVhcmUodyksIGEpLCAyICoqIChGLnNxcnRfcyAtIDEpKTtcbiAgICBpZiAoRi5lcShhMCwgRi5uZWdvbmUpKSByZXR1cm4gbnVsbDtcblxuICAgIGxldCB2ID0gRi5zcXJ0X3M7XG4gICAgbGV0IHggPSBGLm11bChhLCB3KTtcbiAgICBsZXQgYiA9IEYubXVsKHgsIHcpO1xuICAgIGxldCB6ID0gRi5zcXJ0X3o7XG4gICAgd2hpbGUgKCFGLmVxKGIsIEYub25lKSkge1xuICAgICAgbGV0IGIyayA9IEYuc3F1YXJlKGIpO1xuICAgICAgbGV0IGsgPSAxO1xuICAgICAgd2hpbGUgKCFGLmVxKGIyaywgRi5vbmUpKSB7XG4gICAgICAgIGIyayA9IEYuc3F1YXJlKGIyayk7XG4gICAgICAgIGsrKztcbiAgICAgIH1cblxuICAgICAgdyA9IHo7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHYgLSBrIC0gMTsgaSsrKSB7XG4gICAgICAgIHcgPSBGLnNxdWFyZSh3KTtcbiAgICAgIH1cbiAgICAgIHogPSBGLnNxdWFyZSh3KTtcbiAgICAgIGIgPSBGLm11bChiLCB6KTtcbiAgICAgIHggPSBGLm11bCh4LCB3KTtcbiAgICAgIHYgPSBrO1xuICAgIH1cbiAgICByZXR1cm4gRi5nZXEoeCwgRi56ZXJvKSA/IHggOiBGLm5lZyh4KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWxnNF9rb25nKEYpIHtcbiAgRi5zcXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlNxcnQgYWxnIDQgbm90IGltcGxlbWVudGVkXCIpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhbGczX2F0a2luKEYpIHtcbiAgRi5zcXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlNxcnQgYWxnIDMgbm90IGltcGxlbWVudGVkXCIpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhbGcyX3NoYW5rcyhGKSB7XG4gIEYuc3FydF9xID0gcG93KEYucCwgRi5tKTtcbiAgRi5zcXJ0X2UxID0gZGl2KHN1YihGLnNxcnRfcSwgMyksIDQpO1xuXG4gIEYuc3FydCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKGEpKSByZXR1cm4gdGhpcy56ZXJvO1xuXG4gICAgLy8gVGVzdCB0aGF0IGhhdmUgc29sdXRpb25cbiAgICBjb25zdCBhMSA9IHRoaXMucG93KGEsIHRoaXMuc3FydF9lMSk7XG5cbiAgICBjb25zdCBhMCA9IHRoaXMubXVsKHRoaXMuc3F1YXJlKGExKSwgYSk7XG5cbiAgICBpZiAodGhpcy5lcShhMCwgdGhpcy5uZWdvbmUpKSByZXR1cm4gbnVsbDtcblxuICAgIGNvbnN0IHggPSB0aGlzLm11bChhMSwgYSk7XG5cbiAgICByZXR1cm4gRi5nZXEoeCwgRi56ZXJvKSA/IHggOiBGLm5lZyh4KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWxnMTBfYWRqKEYpIHtcbiAgRi5zcXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlNxcnQgYWxnIDEwIG5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWxnOV9hZGooRikge1xuICBGLnNxcnRfcSA9IHBvdyhGLnAsIEYubSAvIDIpO1xuICBGLnNxcnRfZTM0ID0gZGl2KHN1YihGLnNxcnRfcSwgMyksIDQpO1xuICBGLnNxcnRfZTEyID0gZGl2KHN1YihGLnNxcnRfcSwgMSksIDIpO1xuXG4gIEYuZnJvYmVuaXVzID0gZnVuY3Rpb24gKG4sIHgpIHtcbiAgICBpZiAobiAlIDIgPT0gMSkge1xuICAgICAgcmV0dXJuIEYuY29uanVnYXRlKHgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9XG4gIH07XG5cbiAgRi5zcXJ0ID0gZnVuY3Rpb24gKGEpIHtcbiAgICBjb25zdCBGID0gdGhpcztcbiAgICBjb25zdCBhMSA9IEYucG93KGEsIEYuc3FydF9lMzQpO1xuICAgIGNvbnN0IGFsZmEgPSBGLm11bChGLnNxdWFyZShhMSksIGEpO1xuICAgIGNvbnN0IGEwID0gRi5tdWwoRi5mcm9iZW5pdXMoMSwgYWxmYSksIGFsZmEpO1xuICAgIGlmIChGLmVxKGEwLCBGLm5lZ29uZSkpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IHgwID0gRi5tdWwoYTEsIGEpO1xuICAgIGxldCB4O1xuICAgIGlmIChGLmVxKGFsZmEsIEYubmVnb25lKSkge1xuICAgICAgeCA9IEYubXVsKHgwLCBbRi5GLnplcm8sIEYuRi5vbmVdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYiA9IEYucG93KEYuYWRkKEYub25lLCBhbGZhKSwgRi5zcXJ0X2UxMik7XG4gICAgICB4ID0gRi5tdWwoYiwgeDApO1xuICAgIH1cbiAgICByZXR1cm4gRi5nZXEoeCwgRi56ZXJvKSA/IHggOiBGLm5lZyh4KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWxnOF9jb21wbGV4KEYpIHtcbiAgRi5zcXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlNxcnQgYWxnIDggbm90IGltcGxlbWVudGVkXCIpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRSYW5kb21CeXRlcyhuKSB7XG4gIGxldCBhcnJheSA9IG5ldyBVaW50OEFycmF5KG4pO1xuICBpZiAocHJvY2Vzcy5icm93c2VyKSB7XG4gICAgLy8gQnJvd3NlclxuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcy5jcnlwdG8gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIC8vIFN1cHBvcnRlZFxuICAgICAgZ2xvYmFsVGhpcy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycmF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZmFsbGJhY2tcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGFycmF5W2ldID0gKE1hdGgucmFuZG9tKCkgKiA0Mjk0OTY3Mjk2KSA+Pj4gMDtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gTm9kZUpTXG4gICAgY3J5cHRvLnJhbmRvbUZpbGxTeW5jKGFycmF5KTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbi8qXG4gICAgQ29weXJpZ2h0IDIwMTggMGtpbXMgYXNzb2NpYXRpb24uXG5cbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiBzbmFya2pzLlxuXG4gICAgc25hcmtqcyBpcyBhIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vclxuICAgIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGVcbiAgICBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbilcbiAgICBhbnkgbGF0ZXIgdmVyc2lvbi5cblxuICAgIHNuYXJranMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFlcbiAgICBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3JcbiAgICBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoXG4gICAgc25hcmtqcy4gSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG5cbi8qXG4gICAgVGhpcyBsaWJyYXJ5IGRvZXMgb3BlcmF0aW9ucyBvbiBwb2x5bm9taWFscyB3aXRoIGNvZWZmaWNpZW50cyBpbiBhIGZpZWxkIEYuXG5cbiAgICBBIHBvbHlub21pYWwgUCh4KSA9IHAwICsgcDEgKiB4ICsgcDIgKiB4XjIgKyAuLi4gKyBwbiAqIHhebiAgaXMgcmVwcmVzZW50ZWRcbiAgICBieSB0aGUgYXJyYXkgWyBwMCwgcDEsIHAyLCAuLi4gLCBwbiBdLlxuICovXG5cbmNsYXNzIEZGVCB7XG4gIGNvbnN0cnVjdG9yKEcsIEYsIG9wTXVsR0YpIHtcbiAgICB0aGlzLkYgPSBGO1xuICAgIHRoaXMuRyA9IEc7XG4gICAgdGhpcy5vcE11bEdGID0gb3BNdWxHRjtcblxuICAgIGxldCByZW0gPSBGLnNxcnRfdCB8fCBGLnQ7XG4gICAgbGV0IHMgPSBGLnNxcnRfcyB8fCBGLnM7XG5cbiAgICBsZXQgbnFyID0gRi5vbmU7XG4gICAgd2hpbGUgKEYuZXEoRi5wb3cobnFyLCBGLmhhbGYpLCBGLm9uZSkpIG5xciA9IEYuYWRkKG5xciwgRi5vbmUpO1xuXG4gICAgdGhpcy53ID0gbmV3IEFycmF5KHMgKyAxKTtcbiAgICB0aGlzLndpID0gbmV3IEFycmF5KHMgKyAxKTtcbiAgICB0aGlzLndbc10gPSB0aGlzLkYucG93KG5xciwgcmVtKTtcbiAgICB0aGlzLndpW3NdID0gdGhpcy5GLmludih0aGlzLndbc10pO1xuXG4gICAgbGV0IG4gPSBzIC0gMTtcbiAgICB3aGlsZSAobiA+PSAwKSB7XG4gICAgICB0aGlzLndbbl0gPSB0aGlzLkYuc3F1YXJlKHRoaXMud1tuICsgMV0pO1xuICAgICAgdGhpcy53aVtuXSA9IHRoaXMuRi5zcXVhcmUodGhpcy53aVtuICsgMV0pO1xuICAgICAgbi0tO1xuICAgIH1cblxuICAgIHRoaXMucm9vdHMgPSBbXTtcbiAgICAvKlxuICAgICAgICBmb3IgKGxldCBpPTA7IGk8MTY7IGkrKykge1xuICAgICAgICAgICAgbGV0IHIgPSB0aGlzLkYub25lO1xuICAgICAgICAgICAgbiA9IDEgPDwgaTtcbiAgICAgICAgICAgIGNvbnN0IHJvb3RzaSA9IG5ldyBBcnJheShuKTtcbiAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajxuOyBqKyspIHtcbiAgICAgICAgICAgICAgICByb290c2lbal0gPSByO1xuICAgICAgICAgICAgICAgIHIgPSB0aGlzLkYubXVsKHIsIHRoaXMud1tpXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucm9vdHMucHVzaChyb290c2kpO1xuICAgICAgICB9XG4gICAgICAgICovXG4gICAgdGhpcy5fc2V0Um9vdHMoTWF0aC5taW4ocywgMTUpKTtcbiAgfVxuXG4gIF9zZXRSb290cyhuKSB7XG4gICAgZm9yIChsZXQgaSA9IG47IGkgPj0gMCAmJiAhdGhpcy5yb290c1tpXTsgaS0tKSB7XG4gICAgICBsZXQgciA9IHRoaXMuRi5vbmU7XG4gICAgICBjb25zdCBucm9vdHMgPSAxIDw8IGk7XG4gICAgICBjb25zdCByb290c2kgPSBuZXcgQXJyYXkobnJvb3RzKTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbnJvb3RzOyBqKyspIHtcbiAgICAgICAgcm9vdHNpW2pdID0gcjtcbiAgICAgICAgciA9IHRoaXMuRi5tdWwociwgdGhpcy53W2ldKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yb290c1tpXSA9IHJvb3RzaTtcbiAgICB9XG4gIH1cblxuICBmZnQocCkge1xuICAgIGlmIChwLmxlbmd0aCA8PSAxKSByZXR1cm4gcDtcbiAgICBjb25zdCBiaXRzID0gbG9nMihwLmxlbmd0aCAtIDEpICsgMTtcbiAgICB0aGlzLl9zZXRSb290cyhiaXRzKTtcblxuICAgIGNvbnN0IG0gPSAxIDw8IGJpdHM7XG4gICAgaWYgKHAubGVuZ3RoICE9IG0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlNpemUgbXVzdCBiZSBtdWx0aXBsZSBvZiAyXCIpO1xuICAgIH1cbiAgICBjb25zdCByZXMgPSBfX2ZmdCh0aGlzLCBwLCBiaXRzLCAwLCAxKTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgaWZmdChwKSB7XG4gICAgaWYgKHAubGVuZ3RoIDw9IDEpIHJldHVybiBwO1xuICAgIGNvbnN0IGJpdHMgPSBsb2cyKHAubGVuZ3RoIC0gMSkgKyAxO1xuICAgIHRoaXMuX3NldFJvb3RzKGJpdHMpO1xuICAgIGNvbnN0IG0gPSAxIDw8IGJpdHM7XG4gICAgaWYgKHAubGVuZ3RoICE9IG0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlNpemUgbXVzdCBiZSBtdWx0aXBsZSBvZiAyXCIpO1xuICAgIH1cbiAgICBjb25zdCByZXMgPSBfX2ZmdCh0aGlzLCBwLCBiaXRzLCAwLCAxKTtcbiAgICBjb25zdCB0d29pbnZtID0gdGhpcy5GLmludih0aGlzLkYubXVsU2NhbGFyKHRoaXMuRi5vbmUsIG0pKTtcbiAgICBjb25zdCByZXNuID0gbmV3IEFycmF5KG0pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbTsgaSsrKSB7XG4gICAgICByZXNuW2ldID0gdGhpcy5vcE11bEdGKHJlc1sobSAtIGkpICUgbV0sIHR3b2ludm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXNuO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxvZzIoVikge1xuICByZXR1cm4gKFxuICAgICgoViAmIDB4ZmZmZjAwMDApICE9PSAwID8gKChWICY9IDB4ZmZmZjAwMDApLCAxNikgOiAwKSB8XG4gICAgKChWICYgMHhmZjAwZmYwMCkgIT09IDAgPyAoKFYgJj0gMHhmZjAwZmYwMCksIDgpIDogMCkgfFxuICAgICgoViAmIDB4ZjBmMGYwZjApICE9PSAwID8gKChWICY9IDB4ZjBmMGYwZjApLCA0KSA6IDApIHxcbiAgICAoKFYgJiAweGNjY2NjY2NjKSAhPT0gMCA/ICgoViAmPSAweGNjY2NjY2NjKSwgMikgOiAwKSB8XG4gICAgKChWICYgMHhhYWFhYWFhYSkgIT09IDApXG4gICk7XG59XG5cbmZ1bmN0aW9uIF9fZmZ0KFBGLCBwYWxsLCBiaXRzLCBvZmZzZXQsIHN0ZXApIHtcbiAgY29uc3QgbiA9IDEgPDwgYml0cztcbiAgaWYgKG4gPT0gMSkge1xuICAgIHJldHVybiBbcGFsbFtvZmZzZXRdXTtcbiAgfSBlbHNlIGlmIChuID09IDIpIHtcbiAgICByZXR1cm4gW1BGLkcuYWRkKHBhbGxbb2Zmc2V0XSwgcGFsbFtvZmZzZXQgKyBzdGVwXSksIFBGLkcuc3ViKHBhbGxbb2Zmc2V0XSwgcGFsbFtvZmZzZXQgKyBzdGVwXSldO1xuICB9XG5cbiAgY29uc3QgbmRpdjIgPSBuID4+IDE7XG4gIGNvbnN0IHAxID0gX19mZnQoUEYsIHBhbGwsIGJpdHMgLSAxLCBvZmZzZXQsIHN0ZXAgKiAyKTtcbiAgY29uc3QgcDIgPSBfX2ZmdChQRiwgcGFsbCwgYml0cyAtIDEsIG9mZnNldCArIHN0ZXAsIHN0ZXAgKiAyKTtcblxuICBjb25zdCBvdXQgPSBuZXcgQXJyYXkobik7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZGl2MjsgaSsrKSB7XG4gICAgb3V0W2ldID0gUEYuRy5hZGQocDFbaV0sIFBGLm9wTXVsR0YocDJbaV0sIFBGLnJvb3RzW2JpdHNdW2ldKSk7XG4gICAgb3V0W2kgKyBuZGl2Ml0gPSBQRi5HLnN1YihwMVtpXSwgUEYub3BNdWxHRihwMltpXSwgUEYucm9vdHNbYml0c11baV0pKTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG5cbi8qIGdsb2JhbCBCaWdJbnQgKi9cblxuY2xhc3MgWnFGaWVsZCB7XG4gIGNvbnN0cnVjdG9yKHApIHtcbiAgICB0aGlzLnR5cGUgPSBcIkYxXCI7XG4gICAgdGhpcy5vbmUgPSBCaWdJbnQoMSk7XG4gICAgdGhpcy56ZXJvID0gQmlnSW50KDApO1xuICAgIHRoaXMucCA9IEJpZ0ludChwKTtcbiAgICB0aGlzLm0gPSAxO1xuICAgIHRoaXMubmVnb25lID0gdGhpcy5wIC0gdGhpcy5vbmU7XG4gICAgdGhpcy50d28gPSBCaWdJbnQoMik7XG4gICAgdGhpcy5oYWxmID0gdGhpcy5wID4+IHRoaXMub25lO1xuICAgIHRoaXMuYml0TGVuZ3RoID0gYml0TGVuZ3RoKHRoaXMucCk7XG4gICAgdGhpcy5tYXNrID0gKHRoaXMub25lIDw8IEJpZ0ludCh0aGlzLmJpdExlbmd0aCkpIC0gdGhpcy5vbmU7XG5cbiAgICB0aGlzLm42NCA9IE1hdGguZmxvb3IoKHRoaXMuYml0TGVuZ3RoIC0gMSkgLyA2NCkgKyAxO1xuICAgIHRoaXMubjMyID0gdGhpcy5uNjQgKiAyO1xuICAgIHRoaXMubjggPSB0aGlzLm42NCAqIDg7XG4gICAgdGhpcy5SID0gdGhpcy5lKHRoaXMub25lIDw8IEJpZ0ludCh0aGlzLm42NCAqIDY0KSk7XG4gICAgdGhpcy5SaSA9IHRoaXMuaW52KHRoaXMuUik7XG5cbiAgICBjb25zdCBlID0gdGhpcy5uZWdvbmUgPj4gdGhpcy5vbmU7XG4gICAgdGhpcy5ucXIgPSB0aGlzLnR3bztcbiAgICBsZXQgciA9IHRoaXMucG93KHRoaXMubnFyLCBlKTtcbiAgICB3aGlsZSAoIXRoaXMuZXEociwgdGhpcy5uZWdvbmUpKSB7XG4gICAgICB0aGlzLm5xciA9IHRoaXMubnFyICsgdGhpcy5vbmU7XG4gICAgICByID0gdGhpcy5wb3codGhpcy5ucXIsIGUpO1xuICAgIH1cblxuICAgIHRoaXMucyA9IDA7XG4gICAgdGhpcy50ID0gdGhpcy5uZWdvbmU7XG5cbiAgICB3aGlsZSAoKHRoaXMudCAmIHRoaXMub25lKSA9PSB0aGlzLnplcm8pIHtcbiAgICAgIHRoaXMucyA9IHRoaXMucyArIDE7XG4gICAgICB0aGlzLnQgPSB0aGlzLnQgPj4gdGhpcy5vbmU7XG4gICAgfVxuXG4gICAgdGhpcy5ucXJfdG9fdCA9IHRoaXMucG93KHRoaXMubnFyLCB0aGlzLnQpO1xuXG4gICAgYnVpbGRTcXJ0KHRoaXMpO1xuXG4gICAgdGhpcy5GRlQgPSBuZXcgRkZUKHRoaXMsIHRoaXMsIHRoaXMubXVsLmJpbmQodGhpcykpO1xuXG4gICAgdGhpcy5mZnQgPSB0aGlzLkZGVC5mZnQuYmluZCh0aGlzLkZGVCk7XG4gICAgdGhpcy5pZmZ0ID0gdGhpcy5GRlQuaWZmdC5iaW5kKHRoaXMuRkZUKTtcbiAgICB0aGlzLncgPSB0aGlzLkZGVC53O1xuICAgIHRoaXMud2kgPSB0aGlzLkZGVC53aTtcblxuICAgIHRoaXMuc2hpZnQgPSB0aGlzLnNxdWFyZSh0aGlzLm5xcik7XG4gICAgdGhpcy5rID0gdGhpcy5leHAodGhpcy5ucXIsIDIgKiogdGhpcy5zKTtcbiAgfVxuXG4gIGUoYSwgYikge1xuICAgIGxldCByZXM7XG4gICAgaWYgKCFiKSB7XG4gICAgICByZXMgPSBCaWdJbnQoYSk7XG4gICAgfSBlbHNlIGlmIChiID09IDE2KSB7XG4gICAgICByZXMgPSBCaWdJbnQoXCIweFwiICsgYSk7XG4gICAgfVxuICAgIGlmIChyZXMgPCAwKSB7XG4gICAgICBsZXQgbnJlcyA9IC1yZXM7XG4gICAgICBpZiAobnJlcyA+PSB0aGlzLnApIG5yZXMgPSBucmVzICUgdGhpcy5wO1xuICAgICAgcmV0dXJuIHRoaXMucCAtIG5yZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXMgPj0gdGhpcy5wID8gcmVzICUgdGhpcy5wIDogcmVzO1xuICAgIH1cbiAgfVxuXG4gIGFkZChhLCBiKSB7XG4gICAgY29uc3QgcmVzID0gYSArIGI7XG4gICAgcmV0dXJuIHJlcyA+PSB0aGlzLnAgPyByZXMgLSB0aGlzLnAgOiByZXM7XG4gIH1cblxuICBzdWIoYSwgYikge1xuICAgIHJldHVybiBhID49IGIgPyBhIC0gYiA6IHRoaXMucCAtIGIgKyBhO1xuICB9XG5cbiAgbmVnKGEpIHtcbiAgICByZXR1cm4gYSA/IHRoaXMucCAtIGEgOiBhO1xuICB9XG5cbiAgbXVsKGEsIGIpIHtcbiAgICByZXR1cm4gKGEgKiBiKSAlIHRoaXMucDtcbiAgfVxuXG4gIG11bFNjYWxhcihiYXNlLCBzKSB7XG4gICAgcmV0dXJuIChiYXNlICogdGhpcy5lKHMpKSAlIHRoaXMucDtcbiAgfVxuXG4gIHNxdWFyZShhKSB7XG4gICAgcmV0dXJuIChhICogYSkgJSB0aGlzLnA7XG4gIH1cblxuICBlcShhLCBiKSB7XG4gICAgcmV0dXJuIGEgPT0gYjtcbiAgfVxuXG4gIG5lcShhLCBiKSB7XG4gICAgcmV0dXJuIGEgIT0gYjtcbiAgfVxuXG4gIGx0KGEsIGIpIHtcbiAgICBjb25zdCBhYSA9IGEgPiB0aGlzLmhhbGYgPyBhIC0gdGhpcy5wIDogYTtcbiAgICBjb25zdCBiYiA9IGIgPiB0aGlzLmhhbGYgPyBiIC0gdGhpcy5wIDogYjtcbiAgICByZXR1cm4gYWEgPCBiYjtcbiAgfVxuXG4gIGd0KGEsIGIpIHtcbiAgICBjb25zdCBhYSA9IGEgPiB0aGlzLmhhbGYgPyBhIC0gdGhpcy5wIDogYTtcbiAgICBjb25zdCBiYiA9IGIgPiB0aGlzLmhhbGYgPyBiIC0gdGhpcy5wIDogYjtcbiAgICByZXR1cm4gYWEgPiBiYjtcbiAgfVxuXG4gIGxlcShhLCBiKSB7XG4gICAgY29uc3QgYWEgPSBhID4gdGhpcy5oYWxmID8gYSAtIHRoaXMucCA6IGE7XG4gICAgY29uc3QgYmIgPSBiID4gdGhpcy5oYWxmID8gYiAtIHRoaXMucCA6IGI7XG4gICAgcmV0dXJuIGFhIDw9IGJiO1xuICB9XG5cbiAgZ2VxKGEsIGIpIHtcbiAgICBjb25zdCBhYSA9IGEgPiB0aGlzLmhhbGYgPyBhIC0gdGhpcy5wIDogYTtcbiAgICBjb25zdCBiYiA9IGIgPiB0aGlzLmhhbGYgPyBiIC0gdGhpcy5wIDogYjtcbiAgICByZXR1cm4gYWEgPj0gYmI7XG4gIH1cblxuICBkaXYoYSwgYikge1xuICAgIHJldHVybiB0aGlzLm11bChhLCB0aGlzLmludihiKSk7XG4gIH1cblxuICBpZGl2KGEsIGIpIHtcbiAgICBpZiAoIWIpIHRocm93IG5ldyBFcnJvcihcIkRpdmlzaW9uIGJ5IHplcm9cIik7XG4gICAgcmV0dXJuIGEgLyBiO1xuICB9XG5cbiAgaW52KGEpIHtcbiAgICBpZiAoIWEpIHRocm93IG5ldyBFcnJvcihcIkRpdmlzaW9uIGJ5IHplcm9cIik7XG5cbiAgICBsZXQgdCA9IHRoaXMuemVybztcbiAgICBsZXQgciA9IHRoaXMucDtcbiAgICBsZXQgbmV3dCA9IHRoaXMub25lO1xuICAgIGxldCBuZXdyID0gYSAlIHRoaXMucDtcbiAgICB3aGlsZSAobmV3cikge1xuICAgICAgbGV0IHEgPSByIC8gbmV3cjtcbiAgICAgIFt0LCBuZXd0XSA9IFtuZXd0LCB0IC0gcSAqIG5ld3RdO1xuICAgICAgW3IsIG5ld3JdID0gW25ld3IsIHIgLSBxICogbmV3cl07XG4gICAgfVxuICAgIGlmICh0IDwgdGhpcy56ZXJvKSB0ICs9IHRoaXMucDtcbiAgICByZXR1cm4gdDtcbiAgfVxuXG4gIG1vZChhLCBiKSB7XG4gICAgcmV0dXJuIGEgJSBiO1xuICB9XG5cbiAgcG93KGIsIGUpIHtcbiAgICByZXR1cm4gZXhwKHRoaXMsIGIsIGUpO1xuICB9XG5cbiAgZXhwKGIsIGUpIHtcbiAgICByZXR1cm4gZXhwKHRoaXMsIGIsIGUpO1xuICB9XG5cbiAgYmFuZChhLCBiKSB7XG4gICAgY29uc3QgcmVzID0gYSAmIGIgJiB0aGlzLm1hc2s7XG4gICAgcmV0dXJuIHJlcyA+PSB0aGlzLnAgPyByZXMgLSB0aGlzLnAgOiByZXM7XG4gIH1cblxuICBib3IoYSwgYikge1xuICAgIGNvbnN0IHJlcyA9IChhIHwgYikgJiB0aGlzLm1hc2s7XG4gICAgcmV0dXJuIHJlcyA+PSB0aGlzLnAgPyByZXMgLSB0aGlzLnAgOiByZXM7XG4gIH1cblxuICBieG9yKGEsIGIpIHtcbiAgICBjb25zdCByZXMgPSAoYSBeIGIpICYgdGhpcy5tYXNrO1xuICAgIHJldHVybiByZXMgPj0gdGhpcy5wID8gcmVzIC0gdGhpcy5wIDogcmVzO1xuICB9XG5cbiAgYm5vdChhKSB7XG4gICAgY29uc3QgcmVzID0gYSBeIHRoaXMubWFzaztcbiAgICByZXR1cm4gcmVzID49IHRoaXMucCA/IHJlcyAtIHRoaXMucCA6IHJlcztcbiAgfVxuXG4gIHNobChhLCBiKSB7XG4gICAgaWYgKE51bWJlcihiKSA8IHRoaXMuYml0TGVuZ3RoKSB7XG4gICAgICBjb25zdCByZXMgPSAoYSA8PCBiKSAmIHRoaXMubWFzaztcbiAgICAgIHJldHVybiByZXMgPj0gdGhpcy5wID8gcmVzIC0gdGhpcy5wIDogcmVzO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBuYiA9IHRoaXMucCAtIGI7XG4gICAgICBpZiAoTnVtYmVyKG5iKSA8IHRoaXMuYml0TGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBhID4+IG5iO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuemVybztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzaHIoYSwgYikge1xuICAgIGlmIChOdW1iZXIoYikgPCB0aGlzLmJpdExlbmd0aCkge1xuICAgICAgcmV0dXJuIGEgPj4gYjtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbmIgPSB0aGlzLnAgLSBiO1xuICAgICAgaWYgKE51bWJlcihuYikgPCB0aGlzLmJpdExlbmd0aCkge1xuICAgICAgICBjb25zdCByZXMgPSAoYSA8PCBuYikgJiB0aGlzLm1hc2s7XG4gICAgICAgIHJldHVybiByZXMgPj0gdGhpcy5wID8gcmVzIC0gdGhpcy5wIDogcmVzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbGFuZChhLCBiKSB7XG4gICAgcmV0dXJuIGEgJiYgYiA/IHRoaXMub25lIDogdGhpcy56ZXJvO1xuICB9XG5cbiAgbG9yKGEsIGIpIHtcbiAgICByZXR1cm4gYSB8fCBiID8gdGhpcy5vbmUgOiB0aGlzLnplcm87XG4gIH1cblxuICBsbm90KGEpIHtcbiAgICByZXR1cm4gYSA/IHRoaXMuemVybyA6IHRoaXMub25lO1xuICB9XG5cbiAgc3FydF9vbGQobikge1xuICAgIGlmIChuID09IHRoaXMuemVybykgcmV0dXJuIHRoaXMuemVybztcblxuICAgIC8vIFRlc3QgdGhhdCBoYXZlIHNvbHV0aW9uXG4gICAgY29uc3QgcmVzID0gdGhpcy5wb3cobiwgdGhpcy5uZWdvbmUgPj4gdGhpcy5vbmUpO1xuICAgIGlmIChyZXMgIT0gdGhpcy5vbmUpIHJldHVybiBudWxsO1xuXG4gICAgbGV0IG0gPSB0aGlzLnM7XG4gICAgbGV0IGMgPSB0aGlzLm5xcl90b190O1xuICAgIGxldCB0ID0gdGhpcy5wb3cobiwgdGhpcy50KTtcbiAgICBsZXQgciA9IHRoaXMucG93KG4sIHRoaXMuYWRkKHRoaXMudCwgdGhpcy5vbmUpID4+IHRoaXMub25lKTtcblxuICAgIHdoaWxlICh0ICE9IHRoaXMub25lKSB7XG4gICAgICBsZXQgc3EgPSB0aGlzLnNxdWFyZSh0KTtcbiAgICAgIGxldCBpID0gMTtcbiAgICAgIHdoaWxlIChzcSAhPSB0aGlzLm9uZSkge1xuICAgICAgICBpKys7XG4gICAgICAgIHNxID0gdGhpcy5zcXVhcmUoc3EpO1xuICAgICAgfVxuXG4gICAgICAvLyBiID0gYyBeIG0taS0xXG4gICAgICBsZXQgYiA9IGM7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG0gLSBpIC0gMTsgaisrKSBiID0gdGhpcy5zcXVhcmUoYik7XG5cbiAgICAgIG0gPSBpO1xuICAgICAgYyA9IHRoaXMuc3F1YXJlKGIpO1xuICAgICAgdCA9IHRoaXMubXVsKHQsIGMpO1xuICAgICAgciA9IHRoaXMubXVsKHIsIGIpO1xuICAgIH1cblxuICAgIGlmIChyID4gdGhpcy5wID4+IHRoaXMub25lKSB7XG4gICAgICByID0gdGhpcy5uZWcocik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBub3JtYWxpemUoYSwgYikge1xuICAgIGEgPSBCaWdJbnQoYSwgYik7XG4gICAgaWYgKGEgPCAwKSB7XG4gICAgICBsZXQgbmEgPSAtYTtcbiAgICAgIGlmIChuYSA+PSB0aGlzLnApIG5hID0gbmEgJSB0aGlzLnA7XG4gICAgICByZXR1cm4gdGhpcy5wIC0gbmE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhID49IHRoaXMucCA/IGEgJSB0aGlzLnAgOiBhO1xuICAgIH1cbiAgfVxuXG4gIHJhbmRvbSgpIHtcbiAgICBjb25zdCBuQnl0ZXMgPSAodGhpcy5iaXRMZW5ndGggKiAyKSAvIDg7XG4gICAgbGV0IHJlcyA9IHRoaXMuemVybztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5CeXRlczsgaSsrKSB7XG4gICAgICByZXMgPSAocmVzIDw8IEJpZ0ludCg4KSkgKyBCaWdJbnQoZ2V0UmFuZG9tQnl0ZXMoMSlbMF0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzICUgdGhpcy5wO1xuICB9XG5cbiAgdG9TdHJpbmcoYSwgYmFzZSkge1xuICAgIGJhc2UgPSBiYXNlIHx8IDEwO1xuICAgIGxldCB2cztcbiAgICBpZiAoYSA+IHRoaXMuaGFsZiAmJiBiYXNlID09IDEwKSB7XG4gICAgICBjb25zdCB2ID0gdGhpcy5wIC0gYTtcbiAgICAgIHZzID0gXCItXCIgKyB2LnRvU3RyaW5nKGJhc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2cyA9IGEudG9TdHJpbmcoYmFzZSk7XG4gICAgfVxuICAgIHJldHVybiB2cztcbiAgfVxuXG4gIGlzWmVybyhhKSB7XG4gICAgcmV0dXJuIGEgPT0gdGhpcy56ZXJvO1xuICB9XG5cbiAgZnJvbVJuZyhybmcpIHtcbiAgICBsZXQgdjtcbiAgICBkbyB7XG4gICAgICB2ID0gdGhpcy56ZXJvO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm42NDsgaSsrKSB7XG4gICAgICAgIHYgKz0gcm5nLm5leHRVNjQoKSA8PCBCaWdJbnQoNjQgKiBpKTtcbiAgICAgIH1cbiAgICAgIHYgJj0gdGhpcy5tYXNrO1xuICAgIH0gd2hpbGUgKHYgPj0gdGhpcy5wKTtcbiAgICB2ID0gKHYgKiB0aGlzLlJpKSAlIHRoaXMucDsgLy8gQ29udmVydCBmcm9tIG1vbnRnb21lcnlcbiAgICByZXR1cm4gdjtcbiAgfVxuXG4gIGZmdChhKSB7XG4gICAgcmV0dXJuIHRoaXMuRkZULmZmdChhKTtcbiAgfVxuXG4gIGlmZnQoYSkge1xuICAgIHJldHVybiB0aGlzLkZGVC5pZmZ0KGEpO1xuICB9XG5cbiAgLy8gUmV0dXJucyBhIGJ1ZmZlciB3aXRoIExpdHRsZSBFbmRpYW4gUmVwcmVzZW50YXRpb25cbiAgdG9ScHJMRShidWZmLCBvLCBlKSB7XG4gICAgdG9ScHJMRShidWZmLCBvLCBlLCB0aGlzLm42NCAqIDgpO1xuICB9XG5cbiAgLy8gUmV0dXJucyBhIGJ1ZmZlciB3aXRoIEJpZyBFbmRpYW4gUmVwcmVzZW50YXRpb25cbiAgdG9ScHJCRShidWZmLCBvLCBlKSB7XG4gICAgdG9ScHJCRShidWZmLCBvLCBlLCB0aGlzLm42NCAqIDgpO1xuICB9XG5cbiAgLy8gUmV0dXJucyBhIGJ1ZmZlciB3aXRoIEJpZyBFbmRpYW4gTW9udGdvbWVyeSBSZXByZXNlbnRhdGlvblxuICB0b1JwckJFTShidWZmLCBvLCBlKSB7XG4gICAgcmV0dXJuIHRoaXMudG9ScHJCRShidWZmLCBvLCB0aGlzLm11bCh0aGlzLlIsIGUpKTtcbiAgfVxuXG4gIHRvUnByTEVNKGJ1ZmYsIG8sIGUpIHtcbiAgICByZXR1cm4gdGhpcy50b1JwckxFKGJ1ZmYsIG8sIHRoaXMubXVsKHRoaXMuUiwgZSkpO1xuICB9XG5cbiAgLy8gUGFzZXMgYSBidWZmZXIgd2l0aCBMaXR0bGUgRW5kaWFuIFJlcHJlc2VudGF0aW9uXG4gIGZyb21ScHJMRShidWZmLCBvKSB7XG4gICAgcmV0dXJuIGZyb21ScHJMRShidWZmLCBvLCB0aGlzLm44KTtcbiAgfVxuXG4gIC8vIFBhc2VzIGEgYnVmZmVyIHdpdGggQmlnIEVuZGlhbiBSZXByZXNlbnRhdGlvblxuICBmcm9tUnByQkUoYnVmZiwgbykge1xuICAgIHJldHVybiBmcm9tUnByQkUoYnVmZiwgbywgdGhpcy5uOCk7XG4gIH1cblxuICBmcm9tUnByTEVNKGJ1ZmYsIG8pIHtcbiAgICByZXR1cm4gdGhpcy5tdWwodGhpcy5mcm9tUnByTEUoYnVmZiwgbyksIHRoaXMuUmkpO1xuICB9XG5cbiAgZnJvbVJwckJFTShidWZmLCBvKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsKHRoaXMuZnJvbVJwckJFKGJ1ZmYsIG8pLCB0aGlzLlJpKTtcbiAgfVxuXG4gIHRvT2JqZWN0KGEpIHtcbiAgICByZXR1cm4gYTtcbiAgfVxufVxuXG5jb25zdCBTY2FsYXIgPSBfU2NhbGFyO1xuXG5leHBvcnQgeyBacUZpZWxkIGFzIEYxRmllbGQsIFNjYWxhciwgWnFGaWVsZCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/ffjavascript/build/main.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/_assert.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/_assert.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bool: () => (/* binding */ bool),\n/* harmony export */   bytes: () => (/* binding */ bytes),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   output: () => (/* binding */ output)\n/* harmony export */ });\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\n// copied from utils\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\n\nconst assert = { number, bool, bytes, hash, exists, output };\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assert);\n//# sourceMappingURL=_assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9tZXRhZGF0YS1oZWxwZXJzL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fYXNzZXJ0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0EsbURBQW1ELEVBQUU7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsaURBQWlELEVBQUU7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsUUFBUSxrQkFBa0IsU0FBUztBQUM1RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLElBQUk7QUFDckY7QUFDQTtBQUNxRDtBQUNyRCxpQkFBaUI7QUFDakIsaUVBQWUsTUFBTSxFQUFDO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0Ly4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvbWV0YWRhdGEtaGVscGVycy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX2Fzc2VydC5qcz8xZmE1Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIG51bWJlcihuKSB7XG4gICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihuKSB8fCBuIDwgMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBXcm9uZyBwb3NpdGl2ZSBpbnRlZ2VyOiAke259YCk7XG59XG5mdW5jdGlvbiBib29sKGIpIHtcbiAgICBpZiAodHlwZW9mIGIgIT09ICdib29sZWFuJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBib29sZWFuLCBub3QgJHtifWApO1xufVxuLy8gY29waWVkIGZyb20gdXRpbHNcbmZ1bmN0aW9uIGlzQnl0ZXMoYSkge1xuICAgIHJldHVybiAoYSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHxcbiAgICAgICAgKGEgIT0gbnVsbCAmJiB0eXBlb2YgYSA9PT0gJ29iamVjdCcgJiYgYS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnVWludDhBcnJheScpKTtcbn1cbmZ1bmN0aW9uIGJ5dGVzKGIsIC4uLmxlbmd0aHMpIHtcbiAgICBpZiAoIWlzQnl0ZXMoYikpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgVWludDhBcnJheScpO1xuICAgIGlmIChsZW5ndGhzLmxlbmd0aCA+IDAgJiYgIWxlbmd0aHMuaW5jbHVkZXMoYi5sZW5ndGgpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIFVpbnQ4QXJyYXkgb2YgbGVuZ3RoICR7bGVuZ3Roc30sIG5vdCBvZiBsZW5ndGg9JHtiLmxlbmd0aH1gKTtcbn1cbmZ1bmN0aW9uIGhhc2goaGFzaCkge1xuICAgIGlmICh0eXBlb2YgaGFzaCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgaGFzaC5jcmVhdGUgIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCBzaG91bGQgYmUgd3JhcHBlZCBieSB1dGlscy53cmFwQ29uc3RydWN0b3InKTtcbiAgICBudW1iZXIoaGFzaC5vdXRwdXRMZW4pO1xuICAgIG51bWJlcihoYXNoLmJsb2NrTGVuKTtcbn1cbmZ1bmN0aW9uIGV4aXN0cyhpbnN0YW5jZSwgY2hlY2tGaW5pc2hlZCA9IHRydWUpIHtcbiAgICBpZiAoaW5zdGFuY2UuZGVzdHJveWVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hhc2ggaW5zdGFuY2UgaGFzIGJlZW4gZGVzdHJveWVkJyk7XG4gICAgaWYgKGNoZWNrRmluaXNoZWQgJiYgaW5zdGFuY2UuZmluaXNoZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCNkaWdlc3QoKSBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZCcpO1xufVxuZnVuY3Rpb24gb3V0cHV0KG91dCwgaW5zdGFuY2UpIHtcbiAgICBieXRlcyhvdXQpO1xuICAgIGNvbnN0IG1pbiA9IGluc3RhbmNlLm91dHB1dExlbjtcbiAgICBpZiAob3V0Lmxlbmd0aCA8IG1pbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGRpZ2VzdEludG8oKSBleHBlY3RzIG91dHB1dCBidWZmZXIgb2YgbGVuZ3RoIGF0IGxlYXN0ICR7bWlufWApO1xuICAgIH1cbn1cbmV4cG9ydCB7IG51bWJlciwgYm9vbCwgYnl0ZXMsIGhhc2gsIGV4aXN0cywgb3V0cHV0IH07XG5jb25zdCBhc3NlcnQgPSB7IG51bWJlciwgYm9vbCwgYnl0ZXMsIGhhc2gsIGV4aXN0cywgb3V0cHV0IH07XG5leHBvcnQgZGVmYXVsdCBhc3NlcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fYXNzZXJ0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/_assert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/_u64.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/_u64.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   add3H: () => (/* binding */ add3H),\n/* harmony export */   add3L: () => (/* binding */ add3L),\n/* harmony export */   add4H: () => (/* binding */ add4H),\n/* harmony export */   add4L: () => (/* binding */ add4L),\n/* harmony export */   add5H: () => (/* binding */ add5H),\n/* harmony export */   add5L: () => (/* binding */ add5L),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fromBig: () => (/* binding */ fromBig),\n/* harmony export */   rotlBH: () => (/* binding */ rotlBH),\n/* harmony export */   rotlBL: () => (/* binding */ rotlBL),\n/* harmony export */   rotlSH: () => (/* binding */ rotlSH),\n/* harmony export */   rotlSL: () => (/* binding */ rotlSL),\n/* harmony export */   rotr32H: () => (/* binding */ rotr32H),\n/* harmony export */   rotr32L: () => (/* binding */ rotr32L),\n/* harmony export */   rotrBH: () => (/* binding */ rotrBH),\n/* harmony export */   rotrBL: () => (/* binding */ rotrBL),\n/* harmony export */   rotrSH: () => (/* binding */ rotrSH),\n/* harmony export */   rotrSL: () => (/* binding */ rotrSL),\n/* harmony export */   shrSH: () => (/* binding */ shrSH),\n/* harmony export */   shrSL: () => (/* binding */ shrSL),\n/* harmony export */   split: () => (/* binding */ split),\n/* harmony export */   toBig: () => (/* binding */ toBig)\n/* harmony export */ });\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\n\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (u64);\n//# sourceMappingURL=_u64.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9tZXRhZGF0YS1oZWxwZXJzL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fdTY0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDaUw7QUFDakw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsR0FBRyxFQUFDO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0Ly4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvbWV0YWRhdGEtaGVscGVycy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX3U2NC5qcz85NDQ3Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFUzMl9NQVNLNjQgPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDIgKiogMzIgLSAxKTtcbmNvbnN0IF8zMm4gPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDMyKTtcbi8vIFdlIGFyZSBub3QgdXNpbmcgQmlnVWludDY0QXJyYXksIGJlY2F1c2UgdGhleSBhcmUgZXh0cmVtZWx5IHNsb3cgYXMgcGVyIDIwMjJcbmZ1bmN0aW9uIGZyb21CaWcobiwgbGUgPSBmYWxzZSkge1xuICAgIGlmIChsZSlcbiAgICAgICAgcmV0dXJuIHsgaDogTnVtYmVyKG4gJiBVMzJfTUFTSzY0KSwgbDogTnVtYmVyKChuID4+IF8zMm4pICYgVTMyX01BU0s2NCkgfTtcbiAgICByZXR1cm4geyBoOiBOdW1iZXIoKG4gPj4gXzMybikgJiBVMzJfTUFTSzY0KSB8IDAsIGw6IE51bWJlcihuICYgVTMyX01BU0s2NCkgfCAwIH07XG59XG5mdW5jdGlvbiBzcGxpdChsc3QsIGxlID0gZmFsc2UpIHtcbiAgICBsZXQgQWggPSBuZXcgVWludDMyQXJyYXkobHN0Lmxlbmd0aCk7XG4gICAgbGV0IEFsID0gbmV3IFVpbnQzMkFycmF5KGxzdC5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbHN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHsgaCwgbCB9ID0gZnJvbUJpZyhsc3RbaV0sIGxlKTtcbiAgICAgICAgW0FoW2ldLCBBbFtpXV0gPSBbaCwgbF07XG4gICAgfVxuICAgIHJldHVybiBbQWgsIEFsXTtcbn1cbmNvbnN0IHRvQmlnID0gKGgsIGwpID0+IChCaWdJbnQoaCA+Pj4gMCkgPDwgXzMybikgfCBCaWdJbnQobCA+Pj4gMCk7XG4vLyBmb3IgU2hpZnQgaW4gWzAsIDMyKVxuY29uc3Qgc2hyU0ggPSAoaCwgX2wsIHMpID0+IGggPj4+IHM7XG5jb25zdCBzaHJTTCA9IChoLCBsLCBzKSA9PiAoaCA8PCAoMzIgLSBzKSkgfCAobCA+Pj4gcyk7XG4vLyBSaWdodCByb3RhdGUgZm9yIFNoaWZ0IGluIFsxLCAzMilcbmNvbnN0IHJvdHJTSCA9IChoLCBsLCBzKSA9PiAoaCA+Pj4gcykgfCAobCA8PCAoMzIgLSBzKSk7XG5jb25zdCByb3RyU0wgPSAoaCwgbCwgcykgPT4gKGggPDwgKDMyIC0gcykpIHwgKGwgPj4+IHMpO1xuLy8gUmlnaHQgcm90YXRlIGZvciBTaGlmdCBpbiAoMzIsIDY0KSwgTk9URTogMzIgaXMgc3BlY2lhbCBjYXNlLlxuY29uc3Qgcm90ckJIID0gKGgsIGwsIHMpID0+IChoIDw8ICg2NCAtIHMpKSB8IChsID4+PiAocyAtIDMyKSk7XG5jb25zdCByb3RyQkwgPSAoaCwgbCwgcykgPT4gKGggPj4+IChzIC0gMzIpKSB8IChsIDw8ICg2NCAtIHMpKTtcbi8vIFJpZ2h0IHJvdGF0ZSBmb3Igc2hpZnQ9PT0zMiAoanVzdCBzd2FwcyBsJmgpXG5jb25zdCByb3RyMzJIID0gKF9oLCBsKSA9PiBsO1xuY29uc3Qgcm90cjMyTCA9IChoLCBfbCkgPT4gaDtcbi8vIExlZnQgcm90YXRlIGZvciBTaGlmdCBpbiBbMSwgMzIpXG5jb25zdCByb3RsU0ggPSAoaCwgbCwgcykgPT4gKGggPDwgcykgfCAobCA+Pj4gKDMyIC0gcykpO1xuY29uc3Qgcm90bFNMID0gKGgsIGwsIHMpID0+IChsIDw8IHMpIHwgKGggPj4+ICgzMiAtIHMpKTtcbi8vIExlZnQgcm90YXRlIGZvciBTaGlmdCBpbiAoMzIsIDY0KSwgTk9URTogMzIgaXMgc3BlY2lhbCBjYXNlLlxuY29uc3Qgcm90bEJIID0gKGgsIGwsIHMpID0+IChsIDw8IChzIC0gMzIpKSB8IChoID4+PiAoNjQgLSBzKSk7XG5jb25zdCByb3RsQkwgPSAoaCwgbCwgcykgPT4gKGggPDwgKHMgLSAzMikpIHwgKGwgPj4+ICg2NCAtIHMpKTtcbi8vIEpTIHVzZXMgMzItYml0IHNpZ25lZCBpbnRlZ2VycyBmb3IgYml0d2lzZSBvcGVyYXRpb25zIHdoaWNoIG1lYW5zIHdlIGNhbm5vdFxuLy8gc2ltcGxlIHRha2UgY2Fycnkgb3V0IG9mIGxvdyBiaXQgc3VtIGJ5IHNoaWZ0LCB3ZSBuZWVkIHRvIHVzZSBkaXZpc2lvbi5cbmZ1bmN0aW9uIGFkZChBaCwgQWwsIEJoLCBCbCkge1xuICAgIGNvbnN0IGwgPSAoQWwgPj4+IDApICsgKEJsID4+PiAwKTtcbiAgICByZXR1cm4geyBoOiAoQWggKyBCaCArICgobCAvIDIgKiogMzIpIHwgMCkpIHwgMCwgbDogbCB8IDAgfTtcbn1cbi8vIEFkZGl0aW9uIHdpdGggbW9yZSB0aGFuIDIgZWxlbWVudHNcbmNvbnN0IGFkZDNMID0gKEFsLCBCbCwgQ2wpID0+IChBbCA+Pj4gMCkgKyAoQmwgPj4+IDApICsgKENsID4+PiAwKTtcbmNvbnN0IGFkZDNIID0gKGxvdywgQWgsIEJoLCBDaCkgPT4gKEFoICsgQmggKyBDaCArICgobG93IC8gMiAqKiAzMikgfCAwKSkgfCAwO1xuY29uc3QgYWRkNEwgPSAoQWwsIEJsLCBDbCwgRGwpID0+IChBbCA+Pj4gMCkgKyAoQmwgPj4+IDApICsgKENsID4+PiAwKSArIChEbCA+Pj4gMCk7XG5jb25zdCBhZGQ0SCA9IChsb3csIEFoLCBCaCwgQ2gsIERoKSA9PiAoQWggKyBCaCArIENoICsgRGggKyAoKGxvdyAvIDIgKiogMzIpIHwgMCkpIHwgMDtcbmNvbnN0IGFkZDVMID0gKEFsLCBCbCwgQ2wsIERsLCBFbCkgPT4gKEFsID4+PiAwKSArIChCbCA+Pj4gMCkgKyAoQ2wgPj4+IDApICsgKERsID4+PiAwKSArIChFbCA+Pj4gMCk7XG5jb25zdCBhZGQ1SCA9IChsb3csIEFoLCBCaCwgQ2gsIERoLCBFaCkgPT4gKEFoICsgQmggKyBDaCArIERoICsgRWggKyAoKGxvdyAvIDIgKiogMzIpIHwgMCkpIHwgMDtcbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0IHsgZnJvbUJpZywgc3BsaXQsIHRvQmlnLCBzaHJTSCwgc2hyU0wsIHJvdHJTSCwgcm90clNMLCByb3RyQkgsIHJvdHJCTCwgcm90cjMySCwgcm90cjMyTCwgcm90bFNILCByb3RsU0wsIHJvdGxCSCwgcm90bEJMLCBhZGQsIGFkZDNMLCBhZGQzSCwgYWRkNEwsIGFkZDRILCBhZGQ1SCwgYWRkNUwsIH07XG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IHU2NCA9IHtcbiAgICBmcm9tQmlnLCBzcGxpdCwgdG9CaWcsXG4gICAgc2hyU0gsIHNoclNMLFxuICAgIHJvdHJTSCwgcm90clNMLCByb3RyQkgsIHJvdHJCTCxcbiAgICByb3RyMzJILCByb3RyMzJMLFxuICAgIHJvdGxTSCwgcm90bFNMLCByb3RsQkgsIHJvdGxCTCxcbiAgICBhZGQsIGFkZDNMLCBhZGQzSCwgYWRkNEwsIGFkZDRILCBhZGQ1SCwgYWRkNUwsXG59O1xuZXhwb3J0IGRlZmF1bHQgdTY0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X3U2NC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/_u64.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/cryptoNode.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/cryptoNode.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   crypto: () => (/* binding */ crypto)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\n// The file will throw on node.js 14 and earlier.\n// @ts-ignore\n\nconst crypto = /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) && typeof /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) === 'object' && \"webcrypto\" in /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) ? node_crypto__WEBPACK_IMPORTED_MODULE_0__.webcrypto : undefined;\n//# sourceMappingURL=cryptoNode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9tZXRhZGF0YS1oZWxwZXJzL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9jcnlwdG9Ob2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ2tDO0FBQzNCLGVBQWUsMk1BQUUsV0FBVywyTUFBRSxpQkFBaUIsME5BQWlCLEdBQUcsa0RBQVk7QUFDdEYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC13YWxsZXQvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9tZXRhZGF0YS1oZWxwZXJzL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9jcnlwdG9Ob2RlLmpzP2RkMWUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gV2UgdXNlIFdlYkNyeXB0byBha2EgZ2xvYmFsVGhpcy5jcnlwdG8sIHdoaWNoIGV4aXN0cyBpbiBicm93c2VycyBhbmQgbm9kZS5qcyAxNisuXG4vLyBTZWUgdXRpbHMudHMgZm9yIGRldGFpbHMuXG4vLyBUaGUgZmlsZSB3aWxsIHRocm93IG9uIG5vZGUuanMgMTQgYW5kIGVhcmxpZXIuXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgKiBhcyBuYyBmcm9tICdub2RlOmNyeXB0byc7XG5leHBvcnQgY29uc3QgY3J5cHRvID0gbmMgJiYgdHlwZW9mIG5jID09PSAnb2JqZWN0JyAmJiAnd2ViY3J5cHRvJyBpbiBuYyA/IG5jLndlYmNyeXB0byA6IHVuZGVmaW5lZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyeXB0b05vZGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/cryptoNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/sha3.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/sha3.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Keccak: () => (/* binding */ Keccak),\n/* harmony export */   keccakP: () => (/* binding */ keccakP),\n/* harmony export */   keccak_224: () => (/* binding */ keccak_224),\n/* harmony export */   keccak_256: () => (/* binding */ keccak_256),\n/* harmony export */   keccak_384: () => (/* binding */ keccak_384),\n/* harmony export */   keccak_512: () => (/* binding */ keccak_512),\n/* harmony export */   sha3_224: () => (/* binding */ sha3_224),\n/* harmony export */   sha3_256: () => (/* binding */ sha3_256),\n/* harmony export */   sha3_384: () => (/* binding */ sha3_384),\n/* harmony export */   sha3_512: () => (/* binding */ sha3_512),\n/* harmony export */   shake128: () => (/* binding */ shake128),\n/* harmony export */   shake256: () => (/* binding */ shake256)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _u64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_u64.js */ \"(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/_u64.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/utils.js\");\n\n\n\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.split)(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlBH)(h, l, s) : (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlSH)(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlBL)(h, l, s) : (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlSL)(h, l, s));\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nclass Keccak extends _utils_js__WEBPACK_IMPORTED_MODULE_1__.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.number)(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.exists)(this);\n        const { blockLen, state } = this;\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.exists)(this, false);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.bytes)(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.number)(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.output)(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\nconst sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nconst sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nconst sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nconst sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nconst keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nconst keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nconst keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nconst keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nconst shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nconst shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9tZXRhZGF0YS1oZWxwZXJzL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9zaGEzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE2RDtBQUNLO0FBQzRCO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFlBQVk7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsOENBQUs7QUFDeEQ7QUFDQSxxQ0FBcUMsK0NBQU0sWUFBWSwrQ0FBTTtBQUM3RCxxQ0FBcUMsK0NBQU0sWUFBWSwrQ0FBTTtBQUM3RDtBQUNPO0FBQ1A7QUFDQTtBQUNBLGtDQUFrQyxZQUFZO0FBQzlDO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsUUFBUTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixRQUFRO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEMsNEJBQTRCLFFBQVE7QUFDcEM7QUFDQSw0QkFBNEIsUUFBUTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08scUJBQXFCLDJDQUFJO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxrREFBTTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDhDQUFHO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxrREFBTTtBQUNkLGdCQUFnQixrQkFBa0I7QUFDbEMsZUFBZSxrREFBTztBQUN0QjtBQUNBLDBCQUEwQixVQUFVO0FBQ3BDO0FBQ0EsNEJBQTRCLFVBQVU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsK0JBQStCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGtEQUFNO0FBQ2QsUUFBUSxpREFBSztBQUNiO0FBQ0E7QUFDQSxnQkFBZ0IsV0FBVztBQUMzQiw0Q0FBNEMsVUFBVTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsa0RBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGtEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixpREFBaUQ7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QywwREFBZTtBQUNyRDtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDQTtBQUNBO0FBQ0E7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ0E7QUFDQTtBQUNQLGtEQUFrRCxxRUFBMEIsV0FBVztBQUNoRjtBQUNBO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC13YWxsZXQvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9tZXRhZGF0YS1oZWxwZXJzL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9zaGEzLmpzPzkwODAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnl0ZXMsIGV4aXN0cywgbnVtYmVyLCBvdXRwdXQgfSBmcm9tICcuL19hc3NlcnQuanMnO1xuaW1wb3J0IHsgcm90bEJILCByb3RsQkwsIHJvdGxTSCwgcm90bFNMLCBzcGxpdCB9IGZyb20gJy4vX3U2NC5qcyc7XG5pbXBvcnQgeyBIYXNoLCB1MzIsIHRvQnl0ZXMsIHdyYXBDb25zdHJ1Y3Rvciwgd3JhcFhPRkNvbnN0cnVjdG9yV2l0aE9wdHMsIH0gZnJvbSAnLi91dGlscy5qcyc7XG4vLyBTSEEzIChrZWNjYWspIGlzIGJhc2VkIG9uIGEgbmV3IGRlc2lnbjogYmFzaWNhbGx5LCB0aGUgaW50ZXJuYWwgc3RhdGUgaXMgYmlnZ2VyIHRoYW4gb3V0cHV0IHNpemUuXG4vLyBJdCdzIGNhbGxlZCBhIHNwb25nZSBmdW5jdGlvbi5cbi8vIFZhcmlvdXMgcGVyIHJvdW5kIGNvbnN0YW50cyBjYWxjdWxhdGlvbnNcbmNvbnN0IFtTSEEzX1BJLCBTSEEzX1JPVEwsIF9TSEEzX0lPVEFdID0gW1tdLCBbXSwgW11dO1xuY29uc3QgXzBuID0gLyogQF9fUFVSRV9fICovIEJpZ0ludCgwKTtcbmNvbnN0IF8xbiA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoMSk7XG5jb25zdCBfMm4gPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDIpO1xuY29uc3QgXzduID0gLyogQF9fUFVSRV9fICovIEJpZ0ludCg3KTtcbmNvbnN0IF8yNTZuID0gLyogQF9fUFVSRV9fICovIEJpZ0ludCgyNTYpO1xuY29uc3QgXzB4NzFuID0gLyogQF9fUFVSRV9fICovIEJpZ0ludCgweDcxKTtcbmZvciAobGV0IHJvdW5kID0gMCwgUiA9IF8xbiwgeCA9IDEsIHkgPSAwOyByb3VuZCA8IDI0OyByb3VuZCsrKSB7XG4gICAgLy8gUGlcbiAgICBbeCwgeV0gPSBbeSwgKDIgKiB4ICsgMyAqIHkpICUgNV07XG4gICAgU0hBM19QSS5wdXNoKDIgKiAoNSAqIHkgKyB4KSk7XG4gICAgLy8gUm90YXRpb25hbFxuICAgIFNIQTNfUk9UTC5wdXNoKCgoKHJvdW5kICsgMSkgKiAocm91bmQgKyAyKSkgLyAyKSAlIDY0KTtcbiAgICAvLyBJb3RhXG4gICAgbGV0IHQgPSBfMG47XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCA3OyBqKyspIHtcbiAgICAgICAgUiA9ICgoUiA8PCBfMW4pIF4gKChSID4+IF83bikgKiBfMHg3MW4pKSAlIF8yNTZuO1xuICAgICAgICBpZiAoUiAmIF8ybilcbiAgICAgICAgICAgIHQgXj0gXzFuIDw8ICgoXzFuIDw8IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoaikpIC0gXzFuKTtcbiAgICB9XG4gICAgX1NIQTNfSU9UQS5wdXNoKHQpO1xufVxuY29uc3QgW1NIQTNfSU9UQV9ILCBTSEEzX0lPVEFfTF0gPSAvKiBAX19QVVJFX18gKi8gc3BsaXQoX1NIQTNfSU9UQSwgdHJ1ZSk7XG4vLyBMZWZ0IHJvdGF0aW9uICh3aXRob3V0IDAsIDMyLCA2NClcbmNvbnN0IHJvdGxIID0gKGgsIGwsIHMpID0+IChzID4gMzIgPyByb3RsQkgoaCwgbCwgcykgOiByb3RsU0goaCwgbCwgcykpO1xuY29uc3Qgcm90bEwgPSAoaCwgbCwgcykgPT4gKHMgPiAzMiA/IHJvdGxCTChoLCBsLCBzKSA6IHJvdGxTTChoLCBsLCBzKSk7XG4vLyBTYW1lIGFzIGtlY2Nha2YxNjAwLCBidXQgYWxsb3dzIHRvIHNraXAgc29tZSByb3VuZHNcbmV4cG9ydCBmdW5jdGlvbiBrZWNjYWtQKHMsIHJvdW5kcyA9IDI0KSB7XG4gICAgY29uc3QgQiA9IG5ldyBVaW50MzJBcnJheSg1ICogMik7XG4gICAgLy8gTk9URTogYWxsIGluZGljZXMgYXJlIHgyIHNpbmNlIHdlIHN0b3JlIHN0YXRlIGFzIHUzMiBpbnN0ZWFkIG9mIHU2NCAoYmlnaW50cyB0byBzbG93IGluIGpzKVxuICAgIGZvciAobGV0IHJvdW5kID0gMjQgLSByb3VuZHM7IHJvdW5kIDwgMjQ7IHJvdW5kKyspIHtcbiAgICAgICAgLy8gVGhldGEgzrhcbiAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCAxMDsgeCsrKVxuICAgICAgICAgICAgQlt4XSA9IHNbeF0gXiBzW3ggKyAxMF0gXiBzW3ggKyAyMF0gXiBzW3ggKyAzMF0gXiBzW3ggKyA0MF07XG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgMTA7IHggKz0gMikge1xuICAgICAgICAgICAgY29uc3QgaWR4MSA9ICh4ICsgOCkgJSAxMDtcbiAgICAgICAgICAgIGNvbnN0IGlkeDAgPSAoeCArIDIpICUgMTA7XG4gICAgICAgICAgICBjb25zdCBCMCA9IEJbaWR4MF07XG4gICAgICAgICAgICBjb25zdCBCMSA9IEJbaWR4MCArIDFdO1xuICAgICAgICAgICAgY29uc3QgVGggPSByb3RsSChCMCwgQjEsIDEpIF4gQltpZHgxXTtcbiAgICAgICAgICAgIGNvbnN0IFRsID0gcm90bEwoQjAsIEIxLCAxKSBeIEJbaWR4MSArIDFdO1xuICAgICAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCA1MDsgeSArPSAxMCkge1xuICAgICAgICAgICAgICAgIHNbeCArIHldIF49IFRoO1xuICAgICAgICAgICAgICAgIHNbeCArIHkgKyAxXSBePSBUbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBSaG8gKM+BKSBhbmQgUGkgKM+AKVxuICAgICAgICBsZXQgY3VySCA9IHNbMl07XG4gICAgICAgIGxldCBjdXJMID0gc1szXTtcbiAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCAyNDsgdCsrKSB7XG4gICAgICAgICAgICBjb25zdCBzaGlmdCA9IFNIQTNfUk9UTFt0XTtcbiAgICAgICAgICAgIGNvbnN0IFRoID0gcm90bEgoY3VySCwgY3VyTCwgc2hpZnQpO1xuICAgICAgICAgICAgY29uc3QgVGwgPSByb3RsTChjdXJILCBjdXJMLCBzaGlmdCk7XG4gICAgICAgICAgICBjb25zdCBQSSA9IFNIQTNfUElbdF07XG4gICAgICAgICAgICBjdXJIID0gc1tQSV07XG4gICAgICAgICAgICBjdXJMID0gc1tQSSArIDFdO1xuICAgICAgICAgICAgc1tQSV0gPSBUaDtcbiAgICAgICAgICAgIHNbUEkgKyAxXSA9IFRsO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoaSAoz4cpXG4gICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgNTA7IHkgKz0gMTApIHtcbiAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgMTA7IHgrKylcbiAgICAgICAgICAgICAgICBCW3hdID0gc1t5ICsgeF07XG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IDEwOyB4KyspXG4gICAgICAgICAgICAgICAgc1t5ICsgeF0gXj0gfkJbKHggKyAyKSAlIDEwXSAmIEJbKHggKyA0KSAlIDEwXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJb3RhICjOuSlcbiAgICAgICAgc1swXSBePSBTSEEzX0lPVEFfSFtyb3VuZF07XG4gICAgICAgIHNbMV0gXj0gU0hBM19JT1RBX0xbcm91bmRdO1xuICAgIH1cbiAgICBCLmZpbGwoMCk7XG59XG5leHBvcnQgY2xhc3MgS2VjY2FrIGV4dGVuZHMgSGFzaCB7XG4gICAgLy8gTk9URTogd2UgYWNjZXB0IGFyZ3VtZW50cyBpbiBieXRlcyBpbnN0ZWFkIG9mIGJpdHMgaGVyZS5cbiAgICBjb25zdHJ1Y3RvcihibG9ja0xlbiwgc3VmZml4LCBvdXRwdXRMZW4sIGVuYWJsZVhPRiA9IGZhbHNlLCByb3VuZHMgPSAyNCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmJsb2NrTGVuID0gYmxvY2tMZW47XG4gICAgICAgIHRoaXMuc3VmZml4ID0gc3VmZml4O1xuICAgICAgICB0aGlzLm91dHB1dExlbiA9IG91dHB1dExlbjtcbiAgICAgICAgdGhpcy5lbmFibGVYT0YgPSBlbmFibGVYT0Y7XG4gICAgICAgIHRoaXMucm91bmRzID0gcm91bmRzO1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIHRoaXMucG9zT3V0ID0gMDtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgICAvLyBDYW4gYmUgcGFzc2VkIGZyb20gdXNlciBhcyBka0xlblxuICAgICAgICBudW1iZXIob3V0cHV0TGVuKTtcbiAgICAgICAgLy8gMTYwMCA9IDV4NSBtYXRyaXggb2YgNjRiaXQuICAxNjAwIGJpdHMgPT09IDIwMCBieXRlc1xuICAgICAgICBpZiAoMCA+PSB0aGlzLmJsb2NrTGVuIHx8IHRoaXMuYmxvY2tMZW4gPj0gMjAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaGEzIHN1cHBvcnRzIG9ubHkga2VjY2FrLWYxNjAwIGZ1bmN0aW9uJyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBuZXcgVWludDhBcnJheSgyMDApO1xuICAgICAgICB0aGlzLnN0YXRlMzIgPSB1MzIodGhpcy5zdGF0ZSk7XG4gICAgfVxuICAgIGtlY2NhaygpIHtcbiAgICAgICAga2VjY2FrUCh0aGlzLnN0YXRlMzIsIHRoaXMucm91bmRzKTtcbiAgICAgICAgdGhpcy5wb3NPdXQgPSAwO1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgfVxuICAgIHVwZGF0ZShkYXRhKSB7XG4gICAgICAgIGV4aXN0cyh0aGlzKTtcbiAgICAgICAgY29uc3QgeyBibG9ja0xlbiwgc3RhdGUgfSA9IHRoaXM7XG4gICAgICAgIGRhdGEgPSB0b0J5dGVzKGRhdGEpO1xuICAgICAgICBjb25zdCBsZW4gPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgcG9zID0gMDsgcG9zIDwgbGVuOykge1xuICAgICAgICAgICAgY29uc3QgdGFrZSA9IE1hdGgubWluKGJsb2NrTGVuIC0gdGhpcy5wb3MsIGxlbiAtIHBvcyk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRha2U7IGkrKylcbiAgICAgICAgICAgICAgICBzdGF0ZVt0aGlzLnBvcysrXSBePSBkYXRhW3BvcysrXTtcbiAgICAgICAgICAgIGlmICh0aGlzLnBvcyA9PT0gYmxvY2tMZW4pXG4gICAgICAgICAgICAgICAgdGhpcy5rZWNjYWsoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZmluaXNoKCkge1xuICAgICAgICBpZiAodGhpcy5maW5pc2hlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIGNvbnN0IHsgc3RhdGUsIHN1ZmZpeCwgcG9zLCBibG9ja0xlbiB9ID0gdGhpcztcbiAgICAgICAgLy8gRG8gdGhlIHBhZGRpbmdcbiAgICAgICAgc3RhdGVbcG9zXSBePSBzdWZmaXg7XG4gICAgICAgIGlmICgoc3VmZml4ICYgMHg4MCkgIT09IDAgJiYgcG9zID09PSBibG9ja0xlbiAtIDEpXG4gICAgICAgICAgICB0aGlzLmtlY2NhaygpO1xuICAgICAgICBzdGF0ZVtibG9ja0xlbiAtIDFdIF49IDB4ODA7XG4gICAgICAgIHRoaXMua2VjY2FrKCk7XG4gICAgfVxuICAgIHdyaXRlSW50byhvdXQpIHtcbiAgICAgICAgZXhpc3RzKHRoaXMsIGZhbHNlKTtcbiAgICAgICAgYnl0ZXMob3V0KTtcbiAgICAgICAgdGhpcy5maW5pc2goKTtcbiAgICAgICAgY29uc3QgYnVmZmVyT3V0ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgeyBibG9ja0xlbiB9ID0gdGhpcztcbiAgICAgICAgZm9yIChsZXQgcG9zID0gMCwgbGVuID0gb3V0Lmxlbmd0aDsgcG9zIDwgbGVuOykge1xuICAgICAgICAgICAgaWYgKHRoaXMucG9zT3V0ID49IGJsb2NrTGVuKVxuICAgICAgICAgICAgICAgIHRoaXMua2VjY2FrKCk7XG4gICAgICAgICAgICBjb25zdCB0YWtlID0gTWF0aC5taW4oYmxvY2tMZW4gLSB0aGlzLnBvc091dCwgbGVuIC0gcG9zKTtcbiAgICAgICAgICAgIG91dC5zZXQoYnVmZmVyT3V0LnN1YmFycmF5KHRoaXMucG9zT3V0LCB0aGlzLnBvc091dCArIHRha2UpLCBwb3MpO1xuICAgICAgICAgICAgdGhpcy5wb3NPdXQgKz0gdGFrZTtcbiAgICAgICAgICAgIHBvcyArPSB0YWtlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIHhvZkludG8ob3V0KSB7XG4gICAgICAgIC8vIFNoYTMvS2VjY2FrIHVzYWdlIHdpdGggWE9GIGlzIHByb2JhYmx5IG1pc3Rha2UsIG9ubHkgU0hBS0UgaW5zdGFuY2VzIGNhbiBkbyBYT0ZcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZVhPRilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignWE9GIGlzIG5vdCBwb3NzaWJsZSBmb3IgdGhpcyBpbnN0YW5jZScpO1xuICAgICAgICByZXR1cm4gdGhpcy53cml0ZUludG8ob3V0KTtcbiAgICB9XG4gICAgeG9mKGJ5dGVzKSB7XG4gICAgICAgIG51bWJlcihieXRlcyk7XG4gICAgICAgIHJldHVybiB0aGlzLnhvZkludG8obmV3IFVpbnQ4QXJyYXkoYnl0ZXMpKTtcbiAgICB9XG4gICAgZGlnZXN0SW50byhvdXQpIHtcbiAgICAgICAgb3V0cHV0KG91dCwgdGhpcyk7XG4gICAgICAgIGlmICh0aGlzLmZpbmlzaGVkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkaWdlc3QoKSB3YXMgYWxyZWFkeSBjYWxsZWQnKTtcbiAgICAgICAgdGhpcy53cml0ZUludG8ob3V0KTtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGRpZ2VzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlnZXN0SW50byhuZXcgVWludDhBcnJheSh0aGlzLm91dHB1dExlbikpO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgICAgIHRoaXMuc3RhdGUuZmlsbCgwKTtcbiAgICB9XG4gICAgX2Nsb25lSW50byh0bykge1xuICAgICAgICBjb25zdCB7IGJsb2NrTGVuLCBzdWZmaXgsIG91dHB1dExlbiwgcm91bmRzLCBlbmFibGVYT0YgfSA9IHRoaXM7XG4gICAgICAgIHRvIHx8ICh0byA9IG5ldyBLZWNjYWsoYmxvY2tMZW4sIHN1ZmZpeCwgb3V0cHV0TGVuLCBlbmFibGVYT0YsIHJvdW5kcykpO1xuICAgICAgICB0by5zdGF0ZTMyLnNldCh0aGlzLnN0YXRlMzIpO1xuICAgICAgICB0by5wb3MgPSB0aGlzLnBvcztcbiAgICAgICAgdG8ucG9zT3V0ID0gdGhpcy5wb3NPdXQ7XG4gICAgICAgIHRvLmZpbmlzaGVkID0gdGhpcy5maW5pc2hlZDtcbiAgICAgICAgdG8ucm91bmRzID0gcm91bmRzO1xuICAgICAgICAvLyBTdWZmaXggY2FuIGNoYW5nZSBpbiBjU0hBS0VcbiAgICAgICAgdG8uc3VmZml4ID0gc3VmZml4O1xuICAgICAgICB0by5vdXRwdXRMZW4gPSBvdXRwdXRMZW47XG4gICAgICAgIHRvLmVuYWJsZVhPRiA9IGVuYWJsZVhPRjtcbiAgICAgICAgdG8uZGVzdHJveWVkID0gdGhpcy5kZXN0cm95ZWQ7XG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG59XG5jb25zdCBnZW4gPSAoc3VmZml4LCBibG9ja0xlbiwgb3V0cHV0TGVuKSA9PiB3cmFwQ29uc3RydWN0b3IoKCkgPT4gbmV3IEtlY2NhayhibG9ja0xlbiwgc3VmZml4LCBvdXRwdXRMZW4pKTtcbmV4cG9ydCBjb25zdCBzaGEzXzIyNCA9IC8qIEBfX1BVUkVfXyAqLyBnZW4oMHgwNiwgMTQ0LCAyMjQgLyA4KTtcbi8qKlxuICogU0hBMy0yNTYgaGFzaCBmdW5jdGlvblxuICogQHBhcmFtIG1lc3NhZ2UgLSB0aGF0IHdvdWxkIGJlIGhhc2hlZFxuICovXG5leHBvcnQgY29uc3Qgc2hhM18yNTYgPSAvKiBAX19QVVJFX18gKi8gZ2VuKDB4MDYsIDEzNiwgMjU2IC8gOCk7XG5leHBvcnQgY29uc3Qgc2hhM18zODQgPSAvKiBAX19QVVJFX18gKi8gZ2VuKDB4MDYsIDEwNCwgMzg0IC8gOCk7XG5leHBvcnQgY29uc3Qgc2hhM181MTIgPSAvKiBAX19QVVJFX18gKi8gZ2VuKDB4MDYsIDcyLCA1MTIgLyA4KTtcbmV4cG9ydCBjb25zdCBrZWNjYWtfMjI0ID0gLyogQF9fUFVSRV9fICovIGdlbigweDAxLCAxNDQsIDIyNCAvIDgpO1xuLyoqXG4gKiBrZWNjYWstMjU2IGhhc2ggZnVuY3Rpb24uIERpZmZlcmVudCBmcm9tIFNIQTMtMjU2LlxuICogQHBhcmFtIG1lc3NhZ2UgLSB0aGF0IHdvdWxkIGJlIGhhc2hlZFxuICovXG5leHBvcnQgY29uc3Qga2VjY2FrXzI1NiA9IC8qIEBfX1BVUkVfXyAqLyBnZW4oMHgwMSwgMTM2LCAyNTYgLyA4KTtcbmV4cG9ydCBjb25zdCBrZWNjYWtfMzg0ID0gLyogQF9fUFVSRV9fICovIGdlbigweDAxLCAxMDQsIDM4NCAvIDgpO1xuZXhwb3J0IGNvbnN0IGtlY2Nha181MTIgPSAvKiBAX19QVVJFX18gKi8gZ2VuKDB4MDEsIDcyLCA1MTIgLyA4KTtcbmNvbnN0IGdlblNoYWtlID0gKHN1ZmZpeCwgYmxvY2tMZW4sIG91dHB1dExlbikgPT4gd3JhcFhPRkNvbnN0cnVjdG9yV2l0aE9wdHMoKG9wdHMgPSB7fSkgPT4gbmV3IEtlY2NhayhibG9ja0xlbiwgc3VmZml4LCBvcHRzLmRrTGVuID09PSB1bmRlZmluZWQgPyBvdXRwdXRMZW4gOiBvcHRzLmRrTGVuLCB0cnVlKSk7XG5leHBvcnQgY29uc3Qgc2hha2UxMjggPSAvKiBAX19QVVJFX18gKi8gZ2VuU2hha2UoMHgxZiwgMTY4LCAxMjggLyA4KTtcbmV4cG9ydCBjb25zdCBzaGFrZTI1NiA9IC8qIEBfX1BVUkVfXyAqLyBnZW5TaGFrZSgweDFmLCAxMzYsIDI1NiAvIDgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhMy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/sha3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/utils.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/utils.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hash: () => (/* binding */ Hash),\n/* harmony export */   asyncLoop: () => (/* binding */ asyncLoop),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   checkOpts: () => (/* binding */ checkOpts),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createView: () => (/* binding */ createView),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   isLE: () => (/* binding */ isLE),\n/* harmony export */   nextTick: () => (/* binding */ nextTick),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   rotr: () => (/* binding */ rotr),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   u32: () => (/* binding */ u32),\n/* harmony export */   u8: () => (/* binding */ u8),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   wrapConstructor: () => (/* binding */ wrapConstructor),\n/* harmony export */   wrapConstructorWithOpts: () => (/* binding */ wrapConstructorWithOpts),\n/* harmony export */   wrapXOFConstructorWithOpts: () => (/* binding */ wrapXOFConstructorWithOpts)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/crypto */ \"(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/cryptoNode.js\");\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\n\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\n// Other libraries would silently corrupt the data instead of throwing an error,\n// when they don't support it.\nconst isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    if (!isBytes(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!isBytes(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        if (!isBytes(a))\n            throw new Error('Uint8Array expected');\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nfunction randomBytes(bytesLength = 32) {\n    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.getRandomValues === 'function') {\n        return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/ethereum-cryptography/esm/keccak.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/metadata-helpers/node_modules/ethereum-cryptography/esm/keccak.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keccak224: () => (/* binding */ keccak224),\n/* harmony export */   keccak256: () => (/* binding */ keccak256),\n/* harmony export */   keccak384: () => (/* binding */ keccak384),\n/* harmony export */   keccak512: () => (/* binding */ keccak512)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/sha3 */ \"(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/sha3.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/ethereum-cryptography/esm/utils.js\");\n\n\nconst keccak224 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapHash)(_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_1__.keccak_224);\nconst keccak256 = (() => {\n    const k = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapHash)(_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_1__.keccak_256);\n    k.create = _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_1__.keccak_256.create;\n    return k;\n})();\nconst keccak384 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapHash)(_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_1__.keccak_384);\nconst keccak512 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapHash)(_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_1__.keccak_512);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9tZXRhZGF0YS1oZWxwZXJzL25vZGVfbW9kdWxlcy9ldGhlcmV1bS1jcnlwdG9ncmFwaHkvZXNtL2tlY2Nhay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBb0Y7QUFDOUM7QUFDL0Isa0JBQWtCLG1EQUFRLENBQUMsMERBQVU7QUFDckM7QUFDUCxjQUFjLG1EQUFRLENBQUMsMERBQVU7QUFDakMsZUFBZSwwREFBVTtBQUN6QjtBQUNBLENBQUM7QUFDTSxrQkFBa0IsbURBQVEsQ0FBQywwREFBVTtBQUNyQyxrQkFBa0IsbURBQVEsQ0FBQywwREFBVSIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXdhbGxldC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL21ldGFkYXRhLWhlbHBlcnMvbm9kZV9tb2R1bGVzL2V0aGVyZXVtLWNyeXB0b2dyYXBoeS9lc20va2VjY2FrLmpzPzFiMDEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsga2VjY2FrXzIyNCwga2VjY2FrXzI1Niwga2VjY2FrXzM4NCwga2VjY2FrXzUxMiB9IGZyb20gXCJAbm9ibGUvaGFzaGVzL3NoYTNcIjtcbmltcG9ydCB7IHdyYXBIYXNoIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmV4cG9ydCBjb25zdCBrZWNjYWsyMjQgPSB3cmFwSGFzaChrZWNjYWtfMjI0KTtcbmV4cG9ydCBjb25zdCBrZWNjYWsyNTYgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGsgPSB3cmFwSGFzaChrZWNjYWtfMjU2KTtcbiAgICBrLmNyZWF0ZSA9IGtlY2Nha18yNTYuY3JlYXRlO1xuICAgIHJldHVybiBrO1xufSkoKTtcbmV4cG9ydCBjb25zdCBrZWNjYWszODQgPSB3cmFwSGFzaChrZWNjYWtfMzg0KTtcbmV4cG9ydCBjb25zdCBrZWNjYWs1MTIgPSB3cmFwSGFzaChrZWNjYWtfNTEyKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/ethereum-cryptography/esm/keccak.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/ethereum-cryptography/esm/utils.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/metadata-helpers/node_modules/ethereum-cryptography/esm/utils.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertBool: () => (/* binding */ assertBool),\n/* harmony export */   assertBytes: () => (/* binding */ assertBytes),\n/* harmony export */   bytesToHex: () => (/* reexport safe */ _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.bytesToHex),\n/* harmony export */   bytesToUtf8: () => (/* binding */ bytesToUtf8),\n/* harmony export */   concatBytes: () => (/* reexport safe */ _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes),\n/* harmony export */   createView: () => (/* reexport safe */ _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.createView),\n/* harmony export */   crypto: () => (/* binding */ crypto),\n/* harmony export */   equalsBytes: () => (/* binding */ equalsBytes),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   toHex: () => (/* reexport safe */ _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.bytesToHex),\n/* harmony export */   utf8ToBytes: () => (/* reexport safe */ _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes),\n/* harmony export */   wrapHash: () => (/* binding */ wrapHash)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/_assert */ \"(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/@noble/hashes/esm/utils.js\");\n\n\nconst assertBool = _noble_hashes_assert__WEBPACK_IMPORTED_MODULE_0__[\"default\"].bool;\nconst assertBytes = _noble_hashes_assert__WEBPACK_IMPORTED_MODULE_0__[\"default\"].bytes;\n\n\n// buf.toString('utf8') -> bytesToUtf8(buf)\nfunction bytesToUtf8(data) {\n    if (!(data instanceof Uint8Array)) {\n        throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);\n    }\n    return new TextDecoder().decode(data);\n}\nfunction hexToBytes(data) {\n    const sliced = data.startsWith(\"0x\") ? data.substring(2) : data;\n    return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(sliced);\n}\n// buf.equals(buf2) -> equalsBytes(buf, buf2)\nfunction equalsBytes(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n// Internal utils\nfunction wrapHash(hash) {\n    return (msg) => {\n        _noble_hashes_assert__WEBPACK_IMPORTED_MODULE_0__[\"default\"].bytes(msg);\n        return hash(msg);\n    };\n}\n// TODO(v3): switch away from node crypto, remove this unnecessary variable.\nconst crypto = (() => {\n    const webCrypto = typeof globalThis === \"object\" && \"crypto\" in globalThis ? globalThis.crypto : undefined;\n    const nodeRequire = typeof module !== \"undefined\" &&\n        typeof module.require === \"function\" &&\n        module.require.bind(module);\n    return {\n        node: nodeRequire && !webCrypto ? nodeRequire(\"crypto\") : undefined,\n        web: webCrypto\n    };\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9tZXRhZGF0YS1oZWxwZXJzL25vZGVfbW9kdWxlcy9ldGhlcmV1bS1jcnlwdG9ncmFwaHkvZXNtL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTJDO0FBQ3FCO0FBQ2hFLG1CQUFtQixpRUFBVztBQUM5QixvQkFBb0Isa0VBQVk7QUFDRztBQUN5RTtBQUM1RztBQUNPO0FBQ1A7QUFDQSxvRUFBb0UsWUFBWTtBQUNoRjtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsV0FBVywrREFBVztBQUN0QjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsY0FBYztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxRQUFRLGtFQUFZO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXdhbGxldC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL21ldGFkYXRhLWhlbHBlcnMvbm9kZV9tb2R1bGVzL2V0aGVyZXVtLWNyeXB0b2dyYXBoeS9lc20vdXRpbHMuanM/MjU2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gXCJAbm9ibGUvaGFzaGVzL19hc3NlcnRcIjtcbmltcG9ydCB7IGhleFRvQnl0ZXMgYXMgX2hleFRvQnl0ZXMgfSBmcm9tIFwiQG5vYmxlL2hhc2hlcy91dGlsc1wiO1xuY29uc3QgYXNzZXJ0Qm9vbCA9IGFzc2VydC5ib29sO1xuY29uc3QgYXNzZXJ0Qnl0ZXMgPSBhc3NlcnQuYnl0ZXM7XG5leHBvcnQgeyBhc3NlcnRCb29sLCBhc3NlcnRCeXRlcyB9O1xuZXhwb3J0IHsgYnl0ZXNUb0hleCwgYnl0ZXNUb0hleCBhcyB0b0hleCwgY29uY2F0Qnl0ZXMsIGNyZWF0ZVZpZXcsIHV0ZjhUb0J5dGVzIH0gZnJvbSBcIkBub2JsZS9oYXNoZXMvdXRpbHNcIjtcbi8vIGJ1Zi50b1N0cmluZygndXRmOCcpIC0+IGJ5dGVzVG9VdGY4KGJ1ZilcbmV4cG9ydCBmdW5jdGlvbiBieXRlc1RvVXRmOChkYXRhKSB7XG4gICAgaWYgKCEoZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGJ5dGVzVG9VdGY4IGV4cGVjdGVkIFVpbnQ4QXJyYXksIGdvdCAke3R5cGVvZiBkYXRhfWApO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKGRhdGEpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhleFRvQnl0ZXMoZGF0YSkge1xuICAgIGNvbnN0IHNsaWNlZCA9IGRhdGEuc3RhcnRzV2l0aChcIjB4XCIpID8gZGF0YS5zdWJzdHJpbmcoMikgOiBkYXRhO1xuICAgIHJldHVybiBfaGV4VG9CeXRlcyhzbGljZWQpO1xufVxuLy8gYnVmLmVxdWFscyhidWYyKSAtPiBlcXVhbHNCeXRlcyhidWYsIGJ1ZjIpXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzQnl0ZXMoYSwgYikge1xuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8vIEludGVybmFsIHV0aWxzXG5leHBvcnQgZnVuY3Rpb24gd3JhcEhhc2goaGFzaCkge1xuICAgIHJldHVybiAobXNnKSA9PiB7XG4gICAgICAgIGFzc2VydC5ieXRlcyhtc2cpO1xuICAgICAgICByZXR1cm4gaGFzaChtc2cpO1xuICAgIH07XG59XG4vLyBUT0RPKHYzKTogc3dpdGNoIGF3YXkgZnJvbSBub2RlIGNyeXB0bywgcmVtb3ZlIHRoaXMgdW5uZWNlc3NhcnkgdmFyaWFibGUuXG5leHBvcnQgY29uc3QgY3J5cHRvID0gKCgpID0+IHtcbiAgICBjb25zdCB3ZWJDcnlwdG8gPSB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJvYmplY3RcIiAmJiBcImNyeXB0b1wiIGluIGdsb2JhbFRoaXMgPyBnbG9iYWxUaGlzLmNyeXB0byA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBub2RlUmVxdWlyZSA9IHR5cGVvZiBtb2R1bGUgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdHlwZW9mIG1vZHVsZS5yZXF1aXJlID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgbW9kdWxlLnJlcXVpcmUuYmluZChtb2R1bGUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5vZGU6IG5vZGVSZXF1aXJlICYmICF3ZWJDcnlwdG8gPyBub2RlUmVxdWlyZShcImNyeXB0b1wiKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgd2ViOiB3ZWJDcnlwdG9cbiAgICB9O1xufSkoKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/metadata-helpers/node_modules/ethereum-cryptography/esm/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/_assert.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/_assert.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bool: () => (/* binding */ bool),\n/* harmony export */   bytes: () => (/* binding */ bytes),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   output: () => (/* binding */ output)\n/* harmony export */ });\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\n// copied from utils\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\n\nconst assert = { number, bool, bytes, hash, exists, output };\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assert);\n//# sourceMappingURL=_assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy90b3J1cy5qcy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX2Fzc2VydC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBLG1EQUFtRCxFQUFFO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxFQUFFO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELFFBQVEsa0JBQWtCLFNBQVM7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRixJQUFJO0FBQ3JGO0FBQ0E7QUFDcUQ7QUFDckQsaUJBQWlCO0FBQ2pCLGlFQUFlLE1BQU0sRUFBQztBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXdhbGxldC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL3RvcnVzLmpzL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fYXNzZXJ0LmpzPzI0YjMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gbnVtYmVyKG4pIHtcbiAgICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKG4pIHx8IG4gPCAwKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFdyb25nIHBvc2l0aXZlIGludGVnZXI6ICR7bn1gKTtcbn1cbmZ1bmN0aW9uIGJvb2woYikge1xuICAgIGlmICh0eXBlb2YgYiAhPT0gJ2Jvb2xlYW4nKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGJvb2xlYW4sIG5vdCAke2J9YCk7XG59XG4vLyBjb3BpZWQgZnJvbSB1dGlsc1xuZnVuY3Rpb24gaXNCeXRlcyhhKSB7XG4gICAgcmV0dXJuIChhIGluc3RhbmNlb2YgVWludDhBcnJheSB8fFxuICAgICAgICAoYSAhPSBudWxsICYmIHR5cGVvZiBhID09PSAnb2JqZWN0JyAmJiBhLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdVaW50OEFycmF5JykpO1xufVxuZnVuY3Rpb24gYnl0ZXMoYiwgLi4ubGVuZ3Rocykge1xuICAgIGlmICghaXNCeXRlcyhiKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBVaW50OEFycmF5Jyk7XG4gICAgaWYgKGxlbmd0aHMubGVuZ3RoID4gMCAmJiAhbGVuZ3Rocy5pbmNsdWRlcyhiLmxlbmd0aCkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgVWludDhBcnJheSBvZiBsZW5ndGggJHtsZW5ndGhzfSwgbm90IG9mIGxlbmd0aD0ke2IubGVuZ3RofWApO1xufVxuZnVuY3Rpb24gaGFzaChoYXNoKSB7XG4gICAgaWYgKHR5cGVvZiBoYXNoICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBoYXNoLmNyZWF0ZSAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYXNoIHNob3VsZCBiZSB3cmFwcGVkIGJ5IHV0aWxzLndyYXBDb25zdHJ1Y3RvcicpO1xuICAgIG51bWJlcihoYXNoLm91dHB1dExlbik7XG4gICAgbnVtYmVyKGhhc2guYmxvY2tMZW4pO1xufVxuZnVuY3Rpb24gZXhpc3RzKGluc3RhbmNlLCBjaGVja0ZpbmlzaGVkID0gdHJ1ZSkge1xuICAgIGlmIChpbnN0YW5jZS5kZXN0cm95ZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCBpbnN0YW5jZSBoYXMgYmVlbiBkZXN0cm95ZWQnKTtcbiAgICBpZiAoY2hlY2tGaW5pc2hlZCAmJiBpbnN0YW5jZS5maW5pc2hlZClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYXNoI2RpZ2VzdCgpIGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkJyk7XG59XG5mdW5jdGlvbiBvdXRwdXQob3V0LCBpbnN0YW5jZSkge1xuICAgIGJ5dGVzKG91dCk7XG4gICAgY29uc3QgbWluID0gaW5zdGFuY2Uub3V0cHV0TGVuO1xuICAgIGlmIChvdXQubGVuZ3RoIDwgbWluKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZGlnZXN0SW50bygpIGV4cGVjdHMgb3V0cHV0IGJ1ZmZlciBvZiBsZW5ndGggYXQgbGVhc3QgJHttaW59YCk7XG4gICAgfVxufVxuZXhwb3J0IHsgbnVtYmVyLCBib29sLCBieXRlcywgaGFzaCwgZXhpc3RzLCBvdXRwdXQgfTtcbmNvbnN0IGFzc2VydCA9IHsgbnVtYmVyLCBib29sLCBieXRlcywgaGFzaCwgZXhpc3RzLCBvdXRwdXQgfTtcbmV4cG9ydCBkZWZhdWx0IGFzc2VydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9hc3NlcnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/_assert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/_u64.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/_u64.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   add3H: () => (/* binding */ add3H),\n/* harmony export */   add3L: () => (/* binding */ add3L),\n/* harmony export */   add4H: () => (/* binding */ add4H),\n/* harmony export */   add4L: () => (/* binding */ add4L),\n/* harmony export */   add5H: () => (/* binding */ add5H),\n/* harmony export */   add5L: () => (/* binding */ add5L),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fromBig: () => (/* binding */ fromBig),\n/* harmony export */   rotlBH: () => (/* binding */ rotlBH),\n/* harmony export */   rotlBL: () => (/* binding */ rotlBL),\n/* harmony export */   rotlSH: () => (/* binding */ rotlSH),\n/* harmony export */   rotlSL: () => (/* binding */ rotlSL),\n/* harmony export */   rotr32H: () => (/* binding */ rotr32H),\n/* harmony export */   rotr32L: () => (/* binding */ rotr32L),\n/* harmony export */   rotrBH: () => (/* binding */ rotrBH),\n/* harmony export */   rotrBL: () => (/* binding */ rotrBL),\n/* harmony export */   rotrSH: () => (/* binding */ rotrSH),\n/* harmony export */   rotrSL: () => (/* binding */ rotrSL),\n/* harmony export */   shrSH: () => (/* binding */ shrSH),\n/* harmony export */   shrSL: () => (/* binding */ shrSL),\n/* harmony export */   split: () => (/* binding */ split),\n/* harmony export */   toBig: () => (/* binding */ toBig)\n/* harmony export */ });\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\n\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (u64);\n//# sourceMappingURL=_u64.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy90b3J1cy5qcy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX3U2NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQyxnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2lMO0FBQ2pMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLEdBQUcsRUFBQztBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXdhbGxldC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL3RvcnVzLmpzL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fdTY0LmpzP2Q4MzUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVTMyX01BU0s2NCA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoMiAqKiAzMiAtIDEpO1xuY29uc3QgXzMybiA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoMzIpO1xuLy8gV2UgYXJlIG5vdCB1c2luZyBCaWdVaW50NjRBcnJheSwgYmVjYXVzZSB0aGV5IGFyZSBleHRyZW1lbHkgc2xvdyBhcyBwZXIgMjAyMlxuZnVuY3Rpb24gZnJvbUJpZyhuLCBsZSA9IGZhbHNlKSB7XG4gICAgaWYgKGxlKVxuICAgICAgICByZXR1cm4geyBoOiBOdW1iZXIobiAmIFUzMl9NQVNLNjQpLCBsOiBOdW1iZXIoKG4gPj4gXzMybikgJiBVMzJfTUFTSzY0KSB9O1xuICAgIHJldHVybiB7IGg6IE51bWJlcigobiA+PiBfMzJuKSAmIFUzMl9NQVNLNjQpIHwgMCwgbDogTnVtYmVyKG4gJiBVMzJfTUFTSzY0KSB8IDAgfTtcbn1cbmZ1bmN0aW9uIHNwbGl0KGxzdCwgbGUgPSBmYWxzZSkge1xuICAgIGxldCBBaCA9IG5ldyBVaW50MzJBcnJheShsc3QubGVuZ3RoKTtcbiAgICBsZXQgQWwgPSBuZXcgVWludDMyQXJyYXkobHN0Lmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgeyBoLCBsIH0gPSBmcm9tQmlnKGxzdFtpXSwgbGUpO1xuICAgICAgICBbQWhbaV0sIEFsW2ldXSA9IFtoLCBsXTtcbiAgICB9XG4gICAgcmV0dXJuIFtBaCwgQWxdO1xufVxuY29uc3QgdG9CaWcgPSAoaCwgbCkgPT4gKEJpZ0ludChoID4+PiAwKSA8PCBfMzJuKSB8IEJpZ0ludChsID4+PiAwKTtcbi8vIGZvciBTaGlmdCBpbiBbMCwgMzIpXG5jb25zdCBzaHJTSCA9IChoLCBfbCwgcykgPT4gaCA+Pj4gcztcbmNvbnN0IHNoclNMID0gKGgsIGwsIHMpID0+IChoIDw8ICgzMiAtIHMpKSB8IChsID4+PiBzKTtcbi8vIFJpZ2h0IHJvdGF0ZSBmb3IgU2hpZnQgaW4gWzEsIDMyKVxuY29uc3Qgcm90clNIID0gKGgsIGwsIHMpID0+IChoID4+PiBzKSB8IChsIDw8ICgzMiAtIHMpKTtcbmNvbnN0IHJvdHJTTCA9IChoLCBsLCBzKSA9PiAoaCA8PCAoMzIgLSBzKSkgfCAobCA+Pj4gcyk7XG4vLyBSaWdodCByb3RhdGUgZm9yIFNoaWZ0IGluICgzMiwgNjQpLCBOT1RFOiAzMiBpcyBzcGVjaWFsIGNhc2UuXG5jb25zdCByb3RyQkggPSAoaCwgbCwgcykgPT4gKGggPDwgKDY0IC0gcykpIHwgKGwgPj4+IChzIC0gMzIpKTtcbmNvbnN0IHJvdHJCTCA9IChoLCBsLCBzKSA9PiAoaCA+Pj4gKHMgLSAzMikpIHwgKGwgPDwgKDY0IC0gcykpO1xuLy8gUmlnaHQgcm90YXRlIGZvciBzaGlmdD09PTMyIChqdXN0IHN3YXBzIGwmaClcbmNvbnN0IHJvdHIzMkggPSAoX2gsIGwpID0+IGw7XG5jb25zdCByb3RyMzJMID0gKGgsIF9sKSA9PiBoO1xuLy8gTGVmdCByb3RhdGUgZm9yIFNoaWZ0IGluIFsxLCAzMilcbmNvbnN0IHJvdGxTSCA9IChoLCBsLCBzKSA9PiAoaCA8PCBzKSB8IChsID4+PiAoMzIgLSBzKSk7XG5jb25zdCByb3RsU0wgPSAoaCwgbCwgcykgPT4gKGwgPDwgcykgfCAoaCA+Pj4gKDMyIC0gcykpO1xuLy8gTGVmdCByb3RhdGUgZm9yIFNoaWZ0IGluICgzMiwgNjQpLCBOT1RFOiAzMiBpcyBzcGVjaWFsIGNhc2UuXG5jb25zdCByb3RsQkggPSAoaCwgbCwgcykgPT4gKGwgPDwgKHMgLSAzMikpIHwgKGggPj4+ICg2NCAtIHMpKTtcbmNvbnN0IHJvdGxCTCA9IChoLCBsLCBzKSA9PiAoaCA8PCAocyAtIDMyKSkgfCAobCA+Pj4gKDY0IC0gcykpO1xuLy8gSlMgdXNlcyAzMi1iaXQgc2lnbmVkIGludGVnZXJzIGZvciBiaXR3aXNlIG9wZXJhdGlvbnMgd2hpY2ggbWVhbnMgd2UgY2Fubm90XG4vLyBzaW1wbGUgdGFrZSBjYXJyeSBvdXQgb2YgbG93IGJpdCBzdW0gYnkgc2hpZnQsIHdlIG5lZWQgdG8gdXNlIGRpdmlzaW9uLlxuZnVuY3Rpb24gYWRkKEFoLCBBbCwgQmgsIEJsKSB7XG4gICAgY29uc3QgbCA9IChBbCA+Pj4gMCkgKyAoQmwgPj4+IDApO1xuICAgIHJldHVybiB7IGg6IChBaCArIEJoICsgKChsIC8gMiAqKiAzMikgfCAwKSkgfCAwLCBsOiBsIHwgMCB9O1xufVxuLy8gQWRkaXRpb24gd2l0aCBtb3JlIHRoYW4gMiBlbGVtZW50c1xuY29uc3QgYWRkM0wgPSAoQWwsIEJsLCBDbCkgPT4gKEFsID4+PiAwKSArIChCbCA+Pj4gMCkgKyAoQ2wgPj4+IDApO1xuY29uc3QgYWRkM0ggPSAobG93LCBBaCwgQmgsIENoKSA9PiAoQWggKyBCaCArIENoICsgKChsb3cgLyAyICoqIDMyKSB8IDApKSB8IDA7XG5jb25zdCBhZGQ0TCA9IChBbCwgQmwsIENsLCBEbCkgPT4gKEFsID4+PiAwKSArIChCbCA+Pj4gMCkgKyAoQ2wgPj4+IDApICsgKERsID4+PiAwKTtcbmNvbnN0IGFkZDRIID0gKGxvdywgQWgsIEJoLCBDaCwgRGgpID0+IChBaCArIEJoICsgQ2ggKyBEaCArICgobG93IC8gMiAqKiAzMikgfCAwKSkgfCAwO1xuY29uc3QgYWRkNUwgPSAoQWwsIEJsLCBDbCwgRGwsIEVsKSA9PiAoQWwgPj4+IDApICsgKEJsID4+PiAwKSArIChDbCA+Pj4gMCkgKyAoRGwgPj4+IDApICsgKEVsID4+PiAwKTtcbmNvbnN0IGFkZDVIID0gKGxvdywgQWgsIEJoLCBDaCwgRGgsIEVoKSA9PiAoQWggKyBCaCArIENoICsgRGggKyBFaCArICgobG93IC8gMiAqKiAzMikgfCAwKSkgfCAwO1xuLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnQgeyBmcm9tQmlnLCBzcGxpdCwgdG9CaWcsIHNoclNILCBzaHJTTCwgcm90clNILCByb3RyU0wsIHJvdHJCSCwgcm90ckJMLCByb3RyMzJILCByb3RyMzJMLCByb3RsU0gsIHJvdGxTTCwgcm90bEJILCByb3RsQkwsIGFkZCwgYWRkM0wsIGFkZDNILCBhZGQ0TCwgYWRkNEgsIGFkZDVILCBhZGQ1TCwgfTtcbi8vIHByZXR0aWVyLWlnbm9yZVxuY29uc3QgdTY0ID0ge1xuICAgIGZyb21CaWcsIHNwbGl0LCB0b0JpZyxcbiAgICBzaHJTSCwgc2hyU0wsXG4gICAgcm90clNILCByb3RyU0wsIHJvdHJCSCwgcm90ckJMLFxuICAgIHJvdHIzMkgsIHJvdHIzMkwsXG4gICAgcm90bFNILCByb3RsU0wsIHJvdGxCSCwgcm90bEJMLFxuICAgIGFkZCwgYWRkM0wsIGFkZDNILCBhZGQ0TCwgYWRkNEgsIGFkZDVILCBhZGQ1TCxcbn07XG5leHBvcnQgZGVmYXVsdCB1NjQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdTY0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/_u64.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/cryptoNode.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/cryptoNode.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   crypto: () => (/* binding */ crypto)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\n// The file will throw on node.js 14 and earlier.\n// @ts-ignore\n\nconst crypto = /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) && typeof /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) === 'object' && \"webcrypto\" in /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) ? node_crypto__WEBPACK_IMPORTED_MODULE_0__.webcrypto : undefined;\n//# sourceMappingURL=cryptoNode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy90b3J1cy5qcy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vY3J5cHRvTm9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNrQztBQUMzQixlQUFlLDJNQUFFLFdBQVcsMk1BQUUsaUJBQWlCLDBOQUFpQixHQUFHLGtEQUFZO0FBQ3RGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0Ly4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvdG9ydXMuanMvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL2NyeXB0b05vZGUuanM/Mzc3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXZSB1c2UgV2ViQ3J5cHRvIGFrYSBnbG9iYWxUaGlzLmNyeXB0bywgd2hpY2ggZXhpc3RzIGluIGJyb3dzZXJzIGFuZCBub2RlLmpzIDE2Ky5cbi8vIFNlZSB1dGlscy50cyBmb3IgZGV0YWlscy5cbi8vIFRoZSBmaWxlIHdpbGwgdGhyb3cgb24gbm9kZS5qcyAxNCBhbmQgZWFybGllci5cbi8vIEB0cy1pZ25vcmVcbmltcG9ydCAqIGFzIG5jIGZyb20gJ25vZGU6Y3J5cHRvJztcbmV4cG9ydCBjb25zdCBjcnlwdG8gPSBuYyAmJiB0eXBlb2YgbmMgPT09ICdvYmplY3QnICYmICd3ZWJjcnlwdG8nIGluIG5jID8gbmMud2ViY3J5cHRvIDogdW5kZWZpbmVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3J5cHRvTm9kZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/cryptoNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/sha3.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/sha3.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Keccak: () => (/* binding */ Keccak),\n/* harmony export */   keccakP: () => (/* binding */ keccakP),\n/* harmony export */   keccak_224: () => (/* binding */ keccak_224),\n/* harmony export */   keccak_256: () => (/* binding */ keccak_256),\n/* harmony export */   keccak_384: () => (/* binding */ keccak_384),\n/* harmony export */   keccak_512: () => (/* binding */ keccak_512),\n/* harmony export */   sha3_224: () => (/* binding */ sha3_224),\n/* harmony export */   sha3_256: () => (/* binding */ sha3_256),\n/* harmony export */   sha3_384: () => (/* binding */ sha3_384),\n/* harmony export */   sha3_512: () => (/* binding */ sha3_512),\n/* harmony export */   shake128: () => (/* binding */ shake128),\n/* harmony export */   shake256: () => (/* binding */ shake256)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _u64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_u64.js */ \"(ssr)/./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/_u64.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/utils.js\");\n\n\n\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.split)(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlBH)(h, l, s) : (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlSH)(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlBL)(h, l, s) : (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlSL)(h, l, s));\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nclass Keccak extends _utils_js__WEBPACK_IMPORTED_MODULE_1__.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.number)(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.exists)(this);\n        const { blockLen, state } = this;\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.exists)(this, false);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.bytes)(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.number)(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.output)(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\nconst sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nconst sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nconst sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nconst sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nconst keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nconst keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nconst keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nconst keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nconst shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nconst shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/sha3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/utils.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/utils.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hash: () => (/* binding */ Hash),\n/* harmony export */   asyncLoop: () => (/* binding */ asyncLoop),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   checkOpts: () => (/* binding */ checkOpts),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createView: () => (/* binding */ createView),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   isLE: () => (/* binding */ isLE),\n/* harmony export */   nextTick: () => (/* binding */ nextTick),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   rotr: () => (/* binding */ rotr),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   u32: () => (/* binding */ u32),\n/* harmony export */   u8: () => (/* binding */ u8),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   wrapConstructor: () => (/* binding */ wrapConstructor),\n/* harmony export */   wrapConstructorWithOpts: () => (/* binding */ wrapConstructorWithOpts),\n/* harmony export */   wrapXOFConstructorWithOpts: () => (/* binding */ wrapXOFConstructorWithOpts)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/crypto */ \"(ssr)/./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/cryptoNode.js\");\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\n\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\n// Other libraries would silently corrupt the data instead of throwing an error,\n// when they don't support it.\nconst isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    if (!isBytes(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!isBytes(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        if (!isBytes(a))\n            throw new Error('Uint8Array expected');\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nfunction randomBytes(bytesLength = 32) {\n    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.getRandomValues === 'function') {\n        return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/torus.js/node_modules/ethereum-cryptography/esm/keccak.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@toruslabs/torus.js/node_modules/ethereum-cryptography/esm/keccak.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keccak224: () => (/* binding */ keccak224),\n/* harmony export */   keccak256: () => (/* binding */ keccak256),\n/* harmony export */   keccak384: () => (/* binding */ keccak384),\n/* harmony export */   keccak512: () => (/* binding */ keccak512)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/sha3 */ \"(ssr)/./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/sha3.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@toruslabs/torus.js/node_modules/ethereum-cryptography/esm/utils.js\");\n\n\nconst keccak224 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapHash)(_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_1__.keccak_224);\nconst keccak256 = (() => {\n    const k = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapHash)(_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_1__.keccak_256);\n    k.create = _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_1__.keccak_256.create;\n    return k;\n})();\nconst keccak384 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapHash)(_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_1__.keccak_384);\nconst keccak512 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapHash)(_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_1__.keccak_512);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy90b3J1cy5qcy9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L2VzbS9rZWNjYWsuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQW9GO0FBQzlDO0FBQy9CLGtCQUFrQixtREFBUSxDQUFDLDBEQUFVO0FBQ3JDO0FBQ1AsY0FBYyxtREFBUSxDQUFDLDBEQUFVO0FBQ2pDLGVBQWUsMERBQVU7QUFDekI7QUFDQSxDQUFDO0FBQ00sa0JBQWtCLG1EQUFRLENBQUMsMERBQVU7QUFDckMsa0JBQWtCLG1EQUFRLENBQUMsMERBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC13YWxsZXQvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy90b3J1cy5qcy9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L2VzbS9rZWNjYWsuanM/ODg2MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBrZWNjYWtfMjI0LCBrZWNjYWtfMjU2LCBrZWNjYWtfMzg0LCBrZWNjYWtfNTEyIH0gZnJvbSBcIkBub2JsZS9oYXNoZXMvc2hhM1wiO1xuaW1wb3J0IHsgd3JhcEhhc2ggfSBmcm9tIFwiLi91dGlscy5qc1wiO1xuZXhwb3J0IGNvbnN0IGtlY2NhazIyNCA9IHdyYXBIYXNoKGtlY2Nha18yMjQpO1xuZXhwb3J0IGNvbnN0IGtlY2NhazI1NiA9ICgoKSA9PiB7XG4gICAgY29uc3QgayA9IHdyYXBIYXNoKGtlY2Nha18yNTYpO1xuICAgIGsuY3JlYXRlID0ga2VjY2FrXzI1Ni5jcmVhdGU7XG4gICAgcmV0dXJuIGs7XG59KSgpO1xuZXhwb3J0IGNvbnN0IGtlY2NhazM4NCA9IHdyYXBIYXNoKGtlY2Nha18zODQpO1xuZXhwb3J0IGNvbnN0IGtlY2NhazUxMiA9IHdyYXBIYXNoKGtlY2Nha181MTIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/torus.js/node_modules/ethereum-cryptography/esm/keccak.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/torus.js/node_modules/ethereum-cryptography/esm/utils.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@toruslabs/torus.js/node_modules/ethereum-cryptography/esm/utils.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertBool: () => (/* binding */ assertBool),\n/* harmony export */   assertBytes: () => (/* binding */ assertBytes),\n/* harmony export */   bytesToHex: () => (/* reexport safe */ _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.bytesToHex),\n/* harmony export */   bytesToUtf8: () => (/* binding */ bytesToUtf8),\n/* harmony export */   concatBytes: () => (/* reexport safe */ _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes),\n/* harmony export */   createView: () => (/* reexport safe */ _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.createView),\n/* harmony export */   crypto: () => (/* binding */ crypto),\n/* harmony export */   equalsBytes: () => (/* binding */ equalsBytes),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   toHex: () => (/* reexport safe */ _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.bytesToHex),\n/* harmony export */   utf8ToBytes: () => (/* reexport safe */ _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes),\n/* harmony export */   wrapHash: () => (/* binding */ wrapHash)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/_assert */ \"(ssr)/./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@toruslabs/torus.js/node_modules/@noble/hashes/esm/utils.js\");\n\n\nconst assertBool = _noble_hashes_assert__WEBPACK_IMPORTED_MODULE_0__[\"default\"].bool;\nconst assertBytes = _noble_hashes_assert__WEBPACK_IMPORTED_MODULE_0__[\"default\"].bytes;\n\n\n// buf.toString('utf8') -> bytesToUtf8(buf)\nfunction bytesToUtf8(data) {\n    if (!(data instanceof Uint8Array)) {\n        throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);\n    }\n    return new TextDecoder().decode(data);\n}\nfunction hexToBytes(data) {\n    const sliced = data.startsWith(\"0x\") ? data.substring(2) : data;\n    return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(sliced);\n}\n// buf.equals(buf2) -> equalsBytes(buf, buf2)\nfunction equalsBytes(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n// Internal utils\nfunction wrapHash(hash) {\n    return (msg) => {\n        _noble_hashes_assert__WEBPACK_IMPORTED_MODULE_0__[\"default\"].bytes(msg);\n        return hash(msg);\n    };\n}\n// TODO(v3): switch away from node crypto, remove this unnecessary variable.\nconst crypto = (() => {\n    const webCrypto = typeof globalThis === \"object\" && \"crypto\" in globalThis ? globalThis.crypto : undefined;\n    const nodeRequire = typeof module !== \"undefined\" &&\n        typeof module.require === \"function\" &&\n        module.require.bind(module);\n    return {\n        node: nodeRequire && !webCrypto ? nodeRequire(\"crypto\") : undefined,\n        web: webCrypto\n    };\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy90b3J1cy5qcy9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L2VzbS91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUEyQztBQUNxQjtBQUNoRSxtQkFBbUIsaUVBQVc7QUFDOUIsb0JBQW9CLGtFQUFZO0FBQ0c7QUFDeUU7QUFDNUc7QUFDTztBQUNQO0FBQ0Esb0VBQW9FLFlBQVk7QUFDaEY7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLFdBQVcsK0RBQVc7QUFDdEI7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGNBQWM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsUUFBUSxrRUFBWTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC13YWxsZXQvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy90b3J1cy5qcy9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L2VzbS91dGlscy5qcz80Y2M5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSBcIkBub2JsZS9oYXNoZXMvX2Fzc2VydFwiO1xuaW1wb3J0IHsgaGV4VG9CeXRlcyBhcyBfaGV4VG9CeXRlcyB9IGZyb20gXCJAbm9ibGUvaGFzaGVzL3V0aWxzXCI7XG5jb25zdCBhc3NlcnRCb29sID0gYXNzZXJ0LmJvb2w7XG5jb25zdCBhc3NlcnRCeXRlcyA9IGFzc2VydC5ieXRlcztcbmV4cG9ydCB7IGFzc2VydEJvb2wsIGFzc2VydEJ5dGVzIH07XG5leHBvcnQgeyBieXRlc1RvSGV4LCBieXRlc1RvSGV4IGFzIHRvSGV4LCBjb25jYXRCeXRlcywgY3JlYXRlVmlldywgdXRmOFRvQnl0ZXMgfSBmcm9tIFwiQG5vYmxlL2hhc2hlcy91dGlsc1wiO1xuLy8gYnVmLnRvU3RyaW5nKCd1dGY4JykgLT4gYnl0ZXNUb1V0ZjgoYnVmKVxuZXhwb3J0IGZ1bmN0aW9uIGJ5dGVzVG9VdGY4KGRhdGEpIHtcbiAgICBpZiAoIShkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgYnl0ZXNUb1V0ZjggZXhwZWN0ZWQgVWludDhBcnJheSwgZ290ICR7dHlwZW9mIGRhdGF9YCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoZGF0YSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaGV4VG9CeXRlcyhkYXRhKSB7XG4gICAgY29uc3Qgc2xpY2VkID0gZGF0YS5zdGFydHNXaXRoKFwiMHhcIikgPyBkYXRhLnN1YnN0cmluZygyKSA6IGRhdGE7XG4gICAgcmV0dXJuIF9oZXhUb0J5dGVzKHNsaWNlZCk7XG59XG4vLyBidWYuZXF1YWxzKGJ1ZjIpIC0+IGVxdWFsc0J5dGVzKGJ1ZiwgYnVmMilcbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHNCeXRlcyhhLCBiKSB7XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLy8gSW50ZXJuYWwgdXRpbHNcbmV4cG9ydCBmdW5jdGlvbiB3cmFwSGFzaChoYXNoKSB7XG4gICAgcmV0dXJuIChtc2cpID0+IHtcbiAgICAgICAgYXNzZXJ0LmJ5dGVzKG1zZyk7XG4gICAgICAgIHJldHVybiBoYXNoKG1zZyk7XG4gICAgfTtcbn1cbi8vIFRPRE8odjMpOiBzd2l0Y2ggYXdheSBmcm9tIG5vZGUgY3J5cHRvLCByZW1vdmUgdGhpcyB1bm5lY2Vzc2FyeSB2YXJpYWJsZS5cbmV4cG9ydCBjb25zdCBjcnlwdG8gPSAoKCkgPT4ge1xuICAgIGNvbnN0IHdlYkNyeXB0byA9IHR5cGVvZiBnbG9iYWxUaGlzID09PSBcIm9iamVjdFwiICYmIFwiY3J5cHRvXCIgaW4gZ2xvYmFsVGhpcyA/IGdsb2JhbFRoaXMuY3J5cHRvIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IG5vZGVSZXF1aXJlID0gdHlwZW9mIG1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICB0eXBlb2YgbW9kdWxlLnJlcXVpcmUgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICBtb2R1bGUucmVxdWlyZS5iaW5kKG1vZHVsZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbm9kZTogbm9kZVJlcXVpcmUgJiYgIXdlYkNyeXB0byA/IG5vZGVSZXF1aXJlKFwiY3J5cHRvXCIpIDogdW5kZWZpbmVkLFxuICAgICAgICB3ZWI6IHdlYkNyeXB0b1xuICAgIH07XG59KSgpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/torus.js/node_modules/ethereum-cryptography/esm/utils.js\n");

/***/ })

};
;