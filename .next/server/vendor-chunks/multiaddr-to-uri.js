/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/multiaddr-to-uri";
exports.ids = ["vendor-chunks/multiaddr-to-uri"];
exports.modules = {

/***/ "(ssr)/./node_modules/multiaddr-to-uri/index.js":
/*!************************************************!*\
  !*** ./node_modules/multiaddr-to-uri/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { Multiaddr } = __webpack_require__(/*! multiaddr */ \"(ssr)/./node_modules/multiaddr/src/index.js\")\n\nconst reduceValue = (_, v) => v\nconst tcpUri = (str, port, parts, opts) => {\n  // return tcp when explicitly requested\n  if (opts && opts.assumeHttp === false) return `tcp://${str}:${port}`\n  // check if tcp is the last protocol in multiaddr\n  let protocol = 'tcp'\n  let explicitPort = `:${port}`\n  const last = parts[parts.length - 1]\n  if (last.protocol === 'tcp') {\n    // assume http and produce clean urls\n    protocol = port === '443' ? 'https' : 'http'\n    explicitPort = port === '443' || port === '80' ? '' : explicitPort\n  }\n  return `${protocol}://${str}${explicitPort}`\n}\n\nconst Reducers = {\n  ip4: reduceValue,\n  ip6: (str, content, i, parts) => (\n    parts.length === 1 && parts[0].protocol === 'ip6'\n      ? content\n      : `[${content}]`\n  ),\n  tcp: (str, content, i, parts, opts) => (\n    parts.some(p => ['http', 'https', 'ws', 'wss'].includes(p.protocol))\n      ? `${str}:${content}`\n      : tcpUri(str, content, parts, opts)\n  ),\n  udp: (str, content) => `udp://${str}:${content}`,\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: (str, content) => `${str}/ipfs/${content}`,\n  p2p: (str, content) => `${str}/p2p/${content}`,\n  http: str => `http://${str}`,\n  https: str => `https://${str}`,\n  ws: str => `ws://${str}`,\n  wss: str => `wss://${str}`,\n  'p2p-websocket-star': str => `${str}/p2p-websocket-star`,\n  'p2p-webrtc-star': str => `${str}/p2p-webrtc-star`,\n  'p2p-webrtc-direct': str => `${str}/p2p-webrtc-direct`\n}\n\nmodule.exports = (multiaddr, opts) => {\n  const ma = new Multiaddr(multiaddr)\n  const parts = multiaddr.toString().split('/').slice(1)\n  return ma\n    .tuples()\n    .map(tuple => ({\n      protocol: parts.shift(),\n      content: tuple[1] ? parts.shift() : null\n    }))\n    .reduce((str, part, i, parts) => {\n      const reduce = Reducers[part.protocol]\n      if (!reduce) throw new Error(`Unsupported protocol ${part.protocol}`)\n      return reduce(str, part.content, i, parts, opts)\n    }, '')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGlhZGRyLXRvLXVyaS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxRQUFRLFlBQVksRUFBRSxtQkFBTyxDQUFDLDhEQUFXOztBQUV6QztBQUNBO0FBQ0E7QUFDQSx5REFBeUQsSUFBSSxHQUFHLEtBQUs7QUFDckU7QUFDQTtBQUNBLHlCQUF5QixLQUFLO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksU0FBUyxLQUFLLElBQUksRUFBRSxhQUFhO0FBQzdDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0EsV0FBVyxJQUFJLEdBQUcsUUFBUTtBQUMxQjtBQUNBO0FBQ0Esa0NBQWtDLElBQUksR0FBRyxRQUFRO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixJQUFJLFFBQVEsUUFBUTtBQUNqRCw0QkFBNEIsSUFBSSxPQUFPLFFBQVE7QUFDL0MseUJBQXlCLElBQUk7QUFDN0IsMkJBQTJCLElBQUk7QUFDL0IscUJBQXFCLElBQUk7QUFDekIsdUJBQXVCLElBQUk7QUFDM0Isa0NBQWtDLElBQUk7QUFDdEMsK0JBQStCLElBQUk7QUFDbkMsaUNBQWlDLElBQUk7QUFDckM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsMkRBQTJELGNBQWM7QUFDekU7QUFDQSxLQUFLO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC13YWxsZXQvLi9ub2RlX21vZHVsZXMvbXVsdGlhZGRyLXRvLXVyaS9pbmRleC5qcz9iN2Y0Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgTXVsdGlhZGRyIH0gPSByZXF1aXJlKCdtdWx0aWFkZHInKVxuXG5jb25zdCByZWR1Y2VWYWx1ZSA9IChfLCB2KSA9PiB2XG5jb25zdCB0Y3BVcmkgPSAoc3RyLCBwb3J0LCBwYXJ0cywgb3B0cykgPT4ge1xuICAvLyByZXR1cm4gdGNwIHdoZW4gZXhwbGljaXRseSByZXF1ZXN0ZWRcbiAgaWYgKG9wdHMgJiYgb3B0cy5hc3N1bWVIdHRwID09PSBmYWxzZSkgcmV0dXJuIGB0Y3A6Ly8ke3N0cn06JHtwb3J0fWBcbiAgLy8gY2hlY2sgaWYgdGNwIGlzIHRoZSBsYXN0IHByb3RvY29sIGluIG11bHRpYWRkclxuICBsZXQgcHJvdG9jb2wgPSAndGNwJ1xuICBsZXQgZXhwbGljaXRQb3J0ID0gYDoke3BvcnR9YFxuICBjb25zdCBsYXN0ID0gcGFydHNbcGFydHMubGVuZ3RoIC0gMV1cbiAgaWYgKGxhc3QucHJvdG9jb2wgPT09ICd0Y3AnKSB7XG4gICAgLy8gYXNzdW1lIGh0dHAgYW5kIHByb2R1Y2UgY2xlYW4gdXJsc1xuICAgIHByb3RvY29sID0gcG9ydCA9PT0gJzQ0MycgPyAnaHR0cHMnIDogJ2h0dHAnXG4gICAgZXhwbGljaXRQb3J0ID0gcG9ydCA9PT0gJzQ0MycgfHwgcG9ydCA9PT0gJzgwJyA/ICcnIDogZXhwbGljaXRQb3J0XG4gIH1cbiAgcmV0dXJuIGAke3Byb3RvY29sfTovLyR7c3RyfSR7ZXhwbGljaXRQb3J0fWBcbn1cblxuY29uc3QgUmVkdWNlcnMgPSB7XG4gIGlwNDogcmVkdWNlVmFsdWUsXG4gIGlwNjogKHN0ciwgY29udGVudCwgaSwgcGFydHMpID0+IChcbiAgICBwYXJ0cy5sZW5ndGggPT09IDEgJiYgcGFydHNbMF0ucHJvdG9jb2wgPT09ICdpcDYnXG4gICAgICA/IGNvbnRlbnRcbiAgICAgIDogYFske2NvbnRlbnR9XWBcbiAgKSxcbiAgdGNwOiAoc3RyLCBjb250ZW50LCBpLCBwYXJ0cywgb3B0cykgPT4gKFxuICAgIHBhcnRzLnNvbWUocCA9PiBbJ2h0dHAnLCAnaHR0cHMnLCAnd3MnLCAnd3NzJ10uaW5jbHVkZXMocC5wcm90b2NvbCkpXG4gICAgICA/IGAke3N0cn06JHtjb250ZW50fWBcbiAgICAgIDogdGNwVXJpKHN0ciwgY29udGVudCwgcGFydHMsIG9wdHMpXG4gICksXG4gIHVkcDogKHN0ciwgY29udGVudCkgPT4gYHVkcDovLyR7c3RyfToke2NvbnRlbnR9YCxcbiAgZG5zYWRkcjogcmVkdWNlVmFsdWUsXG4gIGRuczQ6IHJlZHVjZVZhbHVlLFxuICBkbnM2OiByZWR1Y2VWYWx1ZSxcbiAgaXBmczogKHN0ciwgY29udGVudCkgPT4gYCR7c3RyfS9pcGZzLyR7Y29udGVudH1gLFxuICBwMnA6IChzdHIsIGNvbnRlbnQpID0+IGAke3N0cn0vcDJwLyR7Y29udGVudH1gLFxuICBodHRwOiBzdHIgPT4gYGh0dHA6Ly8ke3N0cn1gLFxuICBodHRwczogc3RyID0+IGBodHRwczovLyR7c3RyfWAsXG4gIHdzOiBzdHIgPT4gYHdzOi8vJHtzdHJ9YCxcbiAgd3NzOiBzdHIgPT4gYHdzczovLyR7c3RyfWAsXG4gICdwMnAtd2Vic29ja2V0LXN0YXInOiBzdHIgPT4gYCR7c3RyfS9wMnAtd2Vic29ja2V0LXN0YXJgLFxuICAncDJwLXdlYnJ0Yy1zdGFyJzogc3RyID0+IGAke3N0cn0vcDJwLXdlYnJ0Yy1zdGFyYCxcbiAgJ3AycC13ZWJydGMtZGlyZWN0Jzogc3RyID0+IGAke3N0cn0vcDJwLXdlYnJ0Yy1kaXJlY3RgXG59XG5cbm1vZHVsZS5leHBvcnRzID0gKG11bHRpYWRkciwgb3B0cykgPT4ge1xuICBjb25zdCBtYSA9IG5ldyBNdWx0aWFkZHIobXVsdGlhZGRyKVxuICBjb25zdCBwYXJ0cyA9IG11bHRpYWRkci50b1N0cmluZygpLnNwbGl0KCcvJykuc2xpY2UoMSlcbiAgcmV0dXJuIG1hXG4gICAgLnR1cGxlcygpXG4gICAgLm1hcCh0dXBsZSA9PiAoe1xuICAgICAgcHJvdG9jb2w6IHBhcnRzLnNoaWZ0KCksXG4gICAgICBjb250ZW50OiB0dXBsZVsxXSA/IHBhcnRzLnNoaWZ0KCkgOiBudWxsXG4gICAgfSkpXG4gICAgLnJlZHVjZSgoc3RyLCBwYXJ0LCBpLCBwYXJ0cykgPT4ge1xuICAgICAgY29uc3QgcmVkdWNlID0gUmVkdWNlcnNbcGFydC5wcm90b2NvbF1cbiAgICAgIGlmICghcmVkdWNlKSB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIHByb3RvY29sICR7cGFydC5wcm90b2NvbH1gKVxuICAgICAgcmV0dXJuIHJlZHVjZShzdHIsIHBhcnQuY29udGVudCwgaSwgcGFydHMsIG9wdHMpXG4gICAgfSwgJycpXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multiaddr-to-uri/index.js\n");

/***/ })

};
;