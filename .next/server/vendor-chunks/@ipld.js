"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ipld";
exports.ids = ["vendor-chunks/@ipld"];
exports.modules = {

/***/ "(ssr)/./node_modules/@ipld/dag-cbor/cjs/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@ipld/dag-cbor/cjs/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar cborg = __webpack_require__(/*! cborg */ \"(ssr)/./node_modules/cborg/cjs/cborg.js\");\nvar cid = __webpack_require__(/*! multiformats/cid */ \"(ssr)/./node_modules/multiformats/cjs/src/cid.js\");\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar cborg__namespace = /*#__PURE__*/_interopNamespace(cborg);\n\nconst CID_CBOR_TAG = 42;\nfunction cidEncoder(obj) {\n  if (obj.asCID !== obj) {\n    return null;\n  }\n  const cid$1 = cid.CID.asCID(obj);\n  if (!cid$1) {\n    return null;\n  }\n  const bytes = new Uint8Array(cid$1.bytes.byteLength + 1);\n  bytes.set(cid$1.bytes, 1);\n  return [\n    new cborg__namespace.Token(cborg__namespace.Type.tag, CID_CBOR_TAG),\n    new cborg__namespace.Token(cborg__namespace.Type.bytes, bytes)\n  ];\n}\nfunction undefinedEncoder() {\n  throw new Error('`undefined` is not supported by the IPLD Data Model and cannot be encoded');\n}\nfunction numberEncoder(num) {\n  if (Number.isNaN(num)) {\n    throw new Error('`NaN` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n  if (num === Infinity || num === -Infinity) {\n    throw new Error('`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n  return null;\n}\nconst encodeOptions = {\n  float64: true,\n  typeEncoders: {\n    Object: cidEncoder,\n    undefined: undefinedEncoder,\n    number: numberEncoder\n  }\n};\nfunction cidDecoder(bytes) {\n  if (bytes[0] !== 0) {\n    throw new Error('Invalid CID for CBOR tag 42; expected leading 0x00');\n  }\n  return cid.CID.decode(bytes.subarray(1));\n}\nconst decodeOptions = {\n  allowIndefinite: false,\n  coerceUndefinedToNull: true,\n  allowNaN: false,\n  allowInfinity: false,\n  allowBigInt: true,\n  strict: true,\n  useMaps: false,\n  tags: []\n};\ndecodeOptions.tags[CID_CBOR_TAG] = cidDecoder;\nconst name = 'dag-cbor';\nconst code = 113;\nconst encode = node => cborg__namespace.encode(node, encodeOptions);\nconst decode = data => cborg__namespace.decode(data, decodeOptions);\n\nexports.code = code;\nexports.decode = decode;\nexports.encode = encode;\nexports.name = name;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGlwbGQvZGFnLWNib3IvY2pzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsWUFBWSxtQkFBTyxDQUFDLHNEQUFPO0FBQzNCLFVBQVUsbUJBQU8sQ0FBQywwRUFBa0I7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QixTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsWUFBWTtBQUNaLGNBQWM7QUFDZCxjQUFjO0FBQ2QsWUFBWSIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXdhbGxldC8uL25vZGVfbW9kdWxlcy9AaXBsZC9kYWctY2Jvci9janMvaW5kZXguanM/MGEyYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBjYm9yZyA9IHJlcXVpcmUoJ2Nib3JnJyk7XG52YXIgY2lkID0gcmVxdWlyZSgnbXVsdGlmb3JtYXRzL2NpZCcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcE5hbWVzcGFjZShlKSB7XG4gIGlmIChlICYmIGUuX19lc01vZHVsZSkgcmV0dXJuIGU7XG4gIHZhciBuID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKGUpIHtcbiAgICBPYmplY3Qua2V5cyhlKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICBpZiAoayAhPT0gJ2RlZmF1bHQnKSB7XG4gICAgICAgIHZhciBkID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBrKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIGssIGQuZ2V0ID8gZCA6IHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZVtrXTsgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBuW1wiZGVmYXVsdFwiXSA9IGU7XG4gIHJldHVybiBPYmplY3QuZnJlZXplKG4pO1xufVxuXG52YXIgY2JvcmdfX25hbWVzcGFjZSA9IC8qI19fUFVSRV9fKi9faW50ZXJvcE5hbWVzcGFjZShjYm9yZyk7XG5cbmNvbnN0IENJRF9DQk9SX1RBRyA9IDQyO1xuZnVuY3Rpb24gY2lkRW5jb2RlcihvYmopIHtcbiAgaWYgKG9iai5hc0NJRCAhPT0gb2JqKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgY2lkJDEgPSBjaWQuQ0lELmFzQ0lEKG9iaik7XG4gIGlmICghY2lkJDEpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGNpZCQxLmJ5dGVzLmJ5dGVMZW5ndGggKyAxKTtcbiAgYnl0ZXMuc2V0KGNpZCQxLmJ5dGVzLCAxKTtcbiAgcmV0dXJuIFtcbiAgICBuZXcgY2JvcmdfX25hbWVzcGFjZS5Ub2tlbihjYm9yZ19fbmFtZXNwYWNlLlR5cGUudGFnLCBDSURfQ0JPUl9UQUcpLFxuICAgIG5ldyBjYm9yZ19fbmFtZXNwYWNlLlRva2VuKGNib3JnX19uYW1lc3BhY2UuVHlwZS5ieXRlcywgYnl0ZXMpXG4gIF07XG59XG5mdW5jdGlvbiB1bmRlZmluZWRFbmNvZGVyKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ2B1bmRlZmluZWRgIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIElQTEQgRGF0YSBNb2RlbCBhbmQgY2Fubm90IGJlIGVuY29kZWQnKTtcbn1cbmZ1bmN0aW9uIG51bWJlckVuY29kZXIobnVtKSB7XG4gIGlmIChOdW1iZXIuaXNOYU4obnVtKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignYE5hTmAgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgSVBMRCBEYXRhIE1vZGVsIGFuZCBjYW5ub3QgYmUgZW5jb2RlZCcpO1xuICB9XG4gIGlmIChudW0gPT09IEluZmluaXR5IHx8IG51bSA9PT0gLUluZmluaXR5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgSW5maW5pdHlgIGFuZCBgLUluZmluaXR5YCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBJUExEIERhdGEgTW9kZWwgYW5kIGNhbm5vdCBiZSBlbmNvZGVkJyk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5jb25zdCBlbmNvZGVPcHRpb25zID0ge1xuICBmbG9hdDY0OiB0cnVlLFxuICB0eXBlRW5jb2RlcnM6IHtcbiAgICBPYmplY3Q6IGNpZEVuY29kZXIsXG4gICAgdW5kZWZpbmVkOiB1bmRlZmluZWRFbmNvZGVyLFxuICAgIG51bWJlcjogbnVtYmVyRW5jb2RlclxuICB9XG59O1xuZnVuY3Rpb24gY2lkRGVjb2RlcihieXRlcykge1xuICBpZiAoYnl0ZXNbMF0gIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgQ0lEIGZvciBDQk9SIHRhZyA0MjsgZXhwZWN0ZWQgbGVhZGluZyAweDAwJyk7XG4gIH1cbiAgcmV0dXJuIGNpZC5DSUQuZGVjb2RlKGJ5dGVzLnN1YmFycmF5KDEpKTtcbn1cbmNvbnN0IGRlY29kZU9wdGlvbnMgPSB7XG4gIGFsbG93SW5kZWZpbml0ZTogZmFsc2UsXG4gIGNvZXJjZVVuZGVmaW5lZFRvTnVsbDogdHJ1ZSxcbiAgYWxsb3dOYU46IGZhbHNlLFxuICBhbGxvd0luZmluaXR5OiBmYWxzZSxcbiAgYWxsb3dCaWdJbnQ6IHRydWUsXG4gIHN0cmljdDogdHJ1ZSxcbiAgdXNlTWFwczogZmFsc2UsXG4gIHRhZ3M6IFtdXG59O1xuZGVjb2RlT3B0aW9ucy50YWdzW0NJRF9DQk9SX1RBR10gPSBjaWREZWNvZGVyO1xuY29uc3QgbmFtZSA9ICdkYWctY2Jvcic7XG5jb25zdCBjb2RlID0gMTEzO1xuY29uc3QgZW5jb2RlID0gbm9kZSA9PiBjYm9yZ19fbmFtZXNwYWNlLmVuY29kZShub2RlLCBlbmNvZGVPcHRpb25zKTtcbmNvbnN0IGRlY29kZSA9IGRhdGEgPT4gY2JvcmdfX25hbWVzcGFjZS5kZWNvZGUoZGF0YSwgZGVjb2RlT3B0aW9ucyk7XG5cbmV4cG9ydHMuY29kZSA9IGNvZGU7XG5leHBvcnRzLmRlY29kZSA9IGRlY29kZTtcbmV4cG9ydHMuZW5jb2RlID0gZW5jb2RlO1xuZXhwb3J0cy5uYW1lID0gbmFtZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ipld/dag-cbor/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ipld/dag-json/cjs/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@ipld/dag-json/cjs/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar multiformats = __webpack_require__(/*! multiformats */ \"(ssr)/./node_modules/multiformats/cjs/src/index.js\");\nvar base64 = __webpack_require__(/*! multiformats/bases/base64 */ \"(ssr)/./node_modules/multiformats/cjs/src/bases/base64.js\");\nvar cborg = __webpack_require__(/*! cborg */ \"(ssr)/./node_modules/cborg/cjs/cborg.js\");\nvar cborgJson = __webpack_require__(/*! cborg/json */ \"(ssr)/./node_modules/cborg/cjs/lib/json/json.js\");\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar cborgJson__namespace = /*#__PURE__*/_interopNamespace(cborgJson);\n\nfunction cidEncoder(obj) {\n  if (obj.asCID !== obj) {\n    return null;\n  }\n  const cid = multiformats.CID.asCID(obj);\n  if (!cid) {\n    return null;\n  }\n  const cidString = cid.toString();\n  return [\n    new cborg.Token(cborg.Type.map, Infinity, 1),\n    new cborg.Token(cborg.Type.string, '/', 1),\n    new cborg.Token(cborg.Type.string, cidString, cidString.length),\n    new cborg.Token(cborg.Type.break, undefined, 1)\n  ];\n}\nfunction bytesEncoder(bytes) {\n  const bytesString = base64.base64.encode(bytes).slice(1);\n  return [\n    new cborg.Token(cborg.Type.map, Infinity, 1),\n    new cborg.Token(cborg.Type.string, '/', 1),\n    new cborg.Token(cborg.Type.map, Infinity, 1),\n    new cborg.Token(cborg.Type.string, 'bytes', 5),\n    new cborg.Token(cborg.Type.string, bytesString, bytesString.length),\n    new cborg.Token(cborg.Type.break, undefined, 1),\n    new cborg.Token(cborg.Type.break, undefined, 1)\n  ];\n}\nfunction undefinedEncoder() {\n  throw new Error('`undefined` is not supported by the IPLD Data Model and cannot be encoded');\n}\nfunction numberEncoder(num) {\n  if (Number.isNaN(num)) {\n    throw new Error('`NaN` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n  if (num === Infinity || num === -Infinity) {\n    throw new Error('`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n  return null;\n}\nconst encodeOptions = {\n  typeEncoders: {\n    Object: cidEncoder,\n    Uint8Array: bytesEncoder,\n    Buffer: bytesEncoder,\n    undefined: undefinedEncoder,\n    number: numberEncoder\n  }\n};\nclass DagJsonTokenizer extends cborgJson__namespace.Tokenizer {\n  constructor(data, options) {\n    super(data, options);\n    this.tokenBuffer = [];\n  }\n  done() {\n    return this.tokenBuffer.length === 0 && super.done();\n  }\n  _next() {\n    if (this.tokenBuffer.length > 0) {\n      return this.tokenBuffer.pop();\n    }\n    return super.next();\n  }\n  next() {\n    const token = this._next();\n    if (token.type === cborg.Type.map) {\n      const keyToken = this._next();\n      if (keyToken.type === cborg.Type.string && keyToken.value === '/') {\n        const valueToken = this._next();\n        if (valueToken.type === cborg.Type.string) {\n          const breakToken = this._next();\n          if (breakToken.type !== cborg.Type.break) {\n            throw new Error('Invalid encoded CID form');\n          }\n          this.tokenBuffer.push(valueToken);\n          return new cborg.Token(cborg.Type.tag, 42, 0);\n        }\n        if (valueToken.type === cborg.Type.map) {\n          const innerKeyToken = this._next();\n          if (innerKeyToken.type === cborg.Type.string && innerKeyToken.value === 'bytes') {\n            const innerValueToken = this._next();\n            if (innerValueToken.type === cborg.Type.string) {\n              for (let i = 0; i < 2; i++) {\n                const breakToken = this._next();\n                if (breakToken.type !== cborg.Type.break) {\n                  throw new Error('Invalid encoded Bytes form');\n                }\n              }\n              const bytes = base64.base64.decode(`m${ innerValueToken.value }`);\n              return new cborg.Token(cborg.Type.bytes, bytes, innerValueToken.value.length);\n            }\n            this.tokenBuffer.push(innerValueToken);\n          }\n          this.tokenBuffer.push(innerKeyToken);\n        }\n        this.tokenBuffer.push(valueToken);\n      }\n      this.tokenBuffer.push(keyToken);\n    }\n    return token;\n  }\n}\nconst decodeOptions = {\n  allowIndefinite: false,\n  allowUndefined: false,\n  allowNaN: false,\n  allowInfinity: false,\n  allowBigInt: true,\n  strict: true,\n  useMaps: false,\n  tags: []\n};\ndecodeOptions.tags[42] = multiformats.CID.parse;\nconst name = 'dag-json';\nconst code = 297;\nconst encode = node => cborgJson__namespace.encode(node, encodeOptions);\nconst decode = data => {\n  const options = Object.assign(decodeOptions, { tokenizer: new DagJsonTokenizer(data, decodeOptions) });\n  return cborgJson__namespace.decode(data, options);\n};\n\nexports.code = code;\nexports.decode = decode;\nexports.encode = encode;\nexports.name = name;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ipld/dag-json/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ipld/dag-pb/cjs/src/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@ipld/dag-pb/cjs/src/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar cid = __webpack_require__(/*! multiformats/cid */ \"(ssr)/./node_modules/multiformats/cjs/src/cid.js\");\nvar pbDecode = __webpack_require__(/*! ./pb-decode.js */ \"(ssr)/./node_modules/@ipld/dag-pb/cjs/src/pb-decode.js\");\nvar pbEncode = __webpack_require__(/*! ./pb-encode.js */ \"(ssr)/./node_modules/@ipld/dag-pb/cjs/src/pb-encode.js\");\nvar util = __webpack_require__(/*! ./util.js */ \"(ssr)/./node_modules/@ipld/dag-pb/cjs/src/util.js\");\n\nconst name = 'dag-pb';\nconst code = 112;\nfunction encode(node) {\n  util.validate(node);\n  const pbn = {};\n  if (node.Links) {\n    pbn.Links = node.Links.map(l => {\n      const link = {};\n      if (l.Hash) {\n        link.Hash = l.Hash.bytes;\n      }\n      if (l.Name !== undefined) {\n        link.Name = l.Name;\n      }\n      if (l.Tsize !== undefined) {\n        link.Tsize = l.Tsize;\n      }\n      return link;\n    });\n  }\n  if (node.Data) {\n    pbn.Data = node.Data;\n  }\n  return pbEncode.encodeNode(pbn);\n}\nfunction decode(bytes) {\n  const pbn = pbDecode.decodeNode(bytes);\n  const node = {};\n  if (pbn.Data) {\n    node.Data = pbn.Data;\n  }\n  if (pbn.Links) {\n    node.Links = pbn.Links.map(l => {\n      const link = {};\n      try {\n        link.Hash = cid.CID.decode(l.Hash);\n      } catch (e) {\n      }\n      if (!link.Hash) {\n        throw new Error('Invalid Hash field found in link, expected CID');\n      }\n      if (l.Name !== undefined) {\n        link.Name = l.Name;\n      }\n      if (l.Tsize !== undefined) {\n        link.Tsize = l.Tsize;\n      }\n      return link;\n    });\n  }\n  return node;\n}\n\nexports.createLink = util.createLink;\nexports.createNode = util.createNode;\nexports.prepare = util.prepare;\nexports.validate = util.validate;\nexports.code = code;\nexports.decode = decode;\nexports.encode = encode;\nexports.name = name;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGlwbGQvZGFnLXBiL2Nqcy9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxVQUFVLG1CQUFPLENBQUMsMEVBQWtCO0FBQ3BDLGVBQWUsbUJBQU8sQ0FBQyw4RUFBZ0I7QUFDdkMsZUFBZSxtQkFBTyxDQUFDLDhFQUFnQjtBQUN2QyxXQUFXLG1CQUFPLENBQUMsb0VBQVc7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQixrQkFBa0I7QUFDbEIsZUFBZTtBQUNmLGdCQUFnQjtBQUNoQixZQUFZO0FBQ1osY0FBYztBQUNkLGNBQWM7QUFDZCxZQUFZIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0Ly4vbm9kZV9tb2R1bGVzL0BpcGxkL2RhZy1wYi9janMvc3JjL2luZGV4LmpzPzI3ZTMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgY2lkID0gcmVxdWlyZSgnbXVsdGlmb3JtYXRzL2NpZCcpO1xudmFyIHBiRGVjb2RlID0gcmVxdWlyZSgnLi9wYi1kZWNvZGUuanMnKTtcbnZhciBwYkVuY29kZSA9IHJlcXVpcmUoJy4vcGItZW5jb2RlLmpzJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbC5qcycpO1xuXG5jb25zdCBuYW1lID0gJ2RhZy1wYic7XG5jb25zdCBjb2RlID0gMTEyO1xuZnVuY3Rpb24gZW5jb2RlKG5vZGUpIHtcbiAgdXRpbC52YWxpZGF0ZShub2RlKTtcbiAgY29uc3QgcGJuID0ge307XG4gIGlmIChub2RlLkxpbmtzKSB7XG4gICAgcGJuLkxpbmtzID0gbm9kZS5MaW5rcy5tYXAobCA9PiB7XG4gICAgICBjb25zdCBsaW5rID0ge307XG4gICAgICBpZiAobC5IYXNoKSB7XG4gICAgICAgIGxpbmsuSGFzaCA9IGwuSGFzaC5ieXRlcztcbiAgICAgIH1cbiAgICAgIGlmIChsLk5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsaW5rLk5hbWUgPSBsLk5hbWU7XG4gICAgICB9XG4gICAgICBpZiAobC5Uc2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxpbmsuVHNpemUgPSBsLlRzaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxpbms7XG4gICAgfSk7XG4gIH1cbiAgaWYgKG5vZGUuRGF0YSkge1xuICAgIHBibi5EYXRhID0gbm9kZS5EYXRhO1xuICB9XG4gIHJldHVybiBwYkVuY29kZS5lbmNvZGVOb2RlKHBibik7XG59XG5mdW5jdGlvbiBkZWNvZGUoYnl0ZXMpIHtcbiAgY29uc3QgcGJuID0gcGJEZWNvZGUuZGVjb2RlTm9kZShieXRlcyk7XG4gIGNvbnN0IG5vZGUgPSB7fTtcbiAgaWYgKHBibi5EYXRhKSB7XG4gICAgbm9kZS5EYXRhID0gcGJuLkRhdGE7XG4gIH1cbiAgaWYgKHBibi5MaW5rcykge1xuICAgIG5vZGUuTGlua3MgPSBwYm4uTGlua3MubWFwKGwgPT4ge1xuICAgICAgY29uc3QgbGluayA9IHt9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGluay5IYXNoID0gY2lkLkNJRC5kZWNvZGUobC5IYXNoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIH1cbiAgICAgIGlmICghbGluay5IYXNoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBIYXNoIGZpZWxkIGZvdW5kIGluIGxpbmssIGV4cGVjdGVkIENJRCcpO1xuICAgICAgfVxuICAgICAgaWYgKGwuTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxpbmsuTmFtZSA9IGwuTmFtZTtcbiAgICAgIH1cbiAgICAgIGlmIChsLlRzaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGluay5Uc2l6ZSA9IGwuVHNpemU7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGluaztcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cblxuZXhwb3J0cy5jcmVhdGVMaW5rID0gdXRpbC5jcmVhdGVMaW5rO1xuZXhwb3J0cy5jcmVhdGVOb2RlID0gdXRpbC5jcmVhdGVOb2RlO1xuZXhwb3J0cy5wcmVwYXJlID0gdXRpbC5wcmVwYXJlO1xuZXhwb3J0cy52YWxpZGF0ZSA9IHV0aWwudmFsaWRhdGU7XG5leHBvcnRzLmNvZGUgPSBjb2RlO1xuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG5leHBvcnRzLmVuY29kZSA9IGVuY29kZTtcbmV4cG9ydHMubmFtZSA9IG5hbWU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ipld/dag-pb/cjs/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ipld/dag-pb/cjs/src/pb-decode.js":
/*!********************************************************!*\
  !*** ./node_modules/@ipld/dag-pb/cjs/src/pb-decode.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst textDecoder = new TextDecoder();\nfunction decodeVarint(bytes, offset) {\n  let v = 0;\n  for (let shift = 0;; shift += 7) {\n    if (shift >= 64) {\n      throw new Error('protobuf: varint overflow');\n    }\n    if (offset >= bytes.length) {\n      throw new Error('protobuf: unexpected end of data');\n    }\n    const b = bytes[offset++];\n    v += shift < 28 ? (b & 127) << shift : (b & 127) * 2 ** shift;\n    if (b < 128) {\n      break;\n    }\n  }\n  return [\n    v,\n    offset\n  ];\n}\nfunction decodeBytes(bytes, offset) {\n  let byteLen;\n  [byteLen, offset] = decodeVarint(bytes, offset);\n  const postOffset = offset + byteLen;\n  if (byteLen < 0 || postOffset < 0) {\n    throw new Error('protobuf: invalid length');\n  }\n  if (postOffset > bytes.length) {\n    throw new Error('protobuf: unexpected end of data');\n  }\n  return [\n    bytes.subarray(offset, postOffset),\n    postOffset\n  ];\n}\nfunction decodeKey(bytes, index) {\n  let wire;\n  [wire, index] = decodeVarint(bytes, index);\n  return [\n    wire & 7,\n    wire >> 3,\n    index\n  ];\n}\nfunction decodeLink(bytes) {\n  const link = {};\n  const l = bytes.length;\n  let index = 0;\n  while (index < l) {\n    let wireType, fieldNum;\n    [wireType, fieldNum, index] = decodeKey(bytes, index);\n    if (fieldNum === 1) {\n      if (link.Hash) {\n        throw new Error('protobuf: (PBLink) duplicate Hash section');\n      }\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${ wireType }) for Hash`);\n      }\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Name before Hash');\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Hash');\n      }\n      ;\n      [link.Hash, index] = decodeBytes(bytes, index);\n    } else if (fieldNum === 2) {\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Name section');\n      }\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${ wireType }) for Name`);\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Name');\n      }\n      let byts;\n      [byts, index] = decodeBytes(bytes, index);\n      link.Name = textDecoder.decode(byts);\n    } else if (fieldNum === 3) {\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Tsize section');\n      }\n      if (wireType !== 0) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${ wireType }) for Tsize`);\n      }\n      ;\n      [link.Tsize, index] = decodeVarint(bytes, index);\n    } else {\n      throw new Error(`protobuf: (PBLink) invalid fieldNumber, expected 1, 2 or 3, got ${ fieldNum }`);\n    }\n  }\n  if (index > l) {\n    throw new Error('protobuf: (PBLink) unexpected end of data');\n  }\n  return link;\n}\nfunction decodeNode(bytes) {\n  const l = bytes.length;\n  let index = 0;\n  let links;\n  let linksBeforeData = false;\n  let data;\n  while (index < l) {\n    let wireType, fieldNum;\n    [wireType, fieldNum, index] = decodeKey(bytes, index);\n    if (wireType !== 2) {\n      throw new Error(`protobuf: (PBNode) invalid wireType, expected 2, got ${ wireType }`);\n    }\n    if (fieldNum === 1) {\n      if (data) {\n        throw new Error('protobuf: (PBNode) duplicate Data section');\n      }\n      ;\n      [data, index] = decodeBytes(bytes, index);\n      if (links) {\n        linksBeforeData = true;\n      }\n    } else if (fieldNum === 2) {\n      if (linksBeforeData) {\n        throw new Error('protobuf: (PBNode) duplicate Links section');\n      } else if (!links) {\n        links = [];\n      }\n      let byts;\n      [byts, index] = decodeBytes(bytes, index);\n      links.push(decodeLink(byts));\n    } else {\n      throw new Error(`protobuf: (PBNode) invalid fieldNumber, expected 1 or 2, got ${ fieldNum }`);\n    }\n  }\n  if (index > l) {\n    throw new Error('protobuf: (PBNode) unexpected end of data');\n  }\n  const node = {};\n  if (data) {\n    node.Data = data;\n  }\n  node.Links = links || [];\n  return node;\n}\n\nexports.decodeNode = decodeNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGlwbGQvZGFnLXBiL2Nqcy9zcmMvcGItZGVjb2RlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0QsVUFBVTtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0QsVUFBVTtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCxVQUFVO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTiwwRkFBMEYsVUFBVTtBQUNwRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLFVBQVU7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLHVGQUF1RixVQUFVO0FBQ2pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC13YWxsZXQvLi9ub2RlX21vZHVsZXMvQGlwbGQvZGFnLXBiL2Nqcy9zcmMvcGItZGVjb2RlLmpzPzBiNTQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCB0ZXh0RGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuZnVuY3Rpb24gZGVjb2RlVmFyaW50KGJ5dGVzLCBvZmZzZXQpIHtcbiAgbGV0IHYgPSAwO1xuICBmb3IgKGxldCBzaGlmdCA9IDA7OyBzaGlmdCArPSA3KSB7XG4gICAgaWYgKHNoaWZ0ID49IDY0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb3RvYnVmOiB2YXJpbnQgb3ZlcmZsb3cnKTtcbiAgICB9XG4gICAgaWYgKG9mZnNldCA+PSBieXRlcy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigncHJvdG9idWY6IHVuZXhwZWN0ZWQgZW5kIG9mIGRhdGEnKTtcbiAgICB9XG4gICAgY29uc3QgYiA9IGJ5dGVzW29mZnNldCsrXTtcbiAgICB2ICs9IHNoaWZ0IDwgMjggPyAoYiAmIDEyNykgPDwgc2hpZnQgOiAoYiAmIDEyNykgKiAyICoqIHNoaWZ0O1xuICAgIGlmIChiIDwgMTI4KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtcbiAgICB2LFxuICAgIG9mZnNldFxuICBdO1xufVxuZnVuY3Rpb24gZGVjb2RlQnl0ZXMoYnl0ZXMsIG9mZnNldCkge1xuICBsZXQgYnl0ZUxlbjtcbiAgW2J5dGVMZW4sIG9mZnNldF0gPSBkZWNvZGVWYXJpbnQoYnl0ZXMsIG9mZnNldCk7XG4gIGNvbnN0IHBvc3RPZmZzZXQgPSBvZmZzZXQgKyBieXRlTGVuO1xuICBpZiAoYnl0ZUxlbiA8IDAgfHwgcG9zdE9mZnNldCA8IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb3RvYnVmOiBpbnZhbGlkIGxlbmd0aCcpO1xuICB9XG4gIGlmIChwb3N0T2Zmc2V0ID4gYnl0ZXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm90b2J1ZjogdW5leHBlY3RlZCBlbmQgb2YgZGF0YScpO1xuICB9XG4gIHJldHVybiBbXG4gICAgYnl0ZXMuc3ViYXJyYXkob2Zmc2V0LCBwb3N0T2Zmc2V0KSxcbiAgICBwb3N0T2Zmc2V0XG4gIF07XG59XG5mdW5jdGlvbiBkZWNvZGVLZXkoYnl0ZXMsIGluZGV4KSB7XG4gIGxldCB3aXJlO1xuICBbd2lyZSwgaW5kZXhdID0gZGVjb2RlVmFyaW50KGJ5dGVzLCBpbmRleCk7XG4gIHJldHVybiBbXG4gICAgd2lyZSAmIDcsXG4gICAgd2lyZSA+PiAzLFxuICAgIGluZGV4XG4gIF07XG59XG5mdW5jdGlvbiBkZWNvZGVMaW5rKGJ5dGVzKSB7XG4gIGNvbnN0IGxpbmsgPSB7fTtcbiAgY29uc3QgbCA9IGJ5dGVzLmxlbmd0aDtcbiAgbGV0IGluZGV4ID0gMDtcbiAgd2hpbGUgKGluZGV4IDwgbCkge1xuICAgIGxldCB3aXJlVHlwZSwgZmllbGROdW07XG4gICAgW3dpcmVUeXBlLCBmaWVsZE51bSwgaW5kZXhdID0gZGVjb2RlS2V5KGJ5dGVzLCBpbmRleCk7XG4gICAgaWYgKGZpZWxkTnVtID09PSAxKSB7XG4gICAgICBpZiAobGluay5IYXNoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncHJvdG9idWY6IChQQkxpbmspIGR1cGxpY2F0ZSBIYXNoIHNlY3Rpb24nKTtcbiAgICAgIH1cbiAgICAgIGlmICh3aXJlVHlwZSAhPT0gMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHByb3RvYnVmOiAoUEJMaW5rKSB3cm9uZyB3aXJlVHlwZSAoJHsgd2lyZVR5cGUgfSkgZm9yIEhhc2hgKTtcbiAgICAgIH1cbiAgICAgIGlmIChsaW5rLk5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb3RvYnVmOiAoUEJMaW5rKSBpbnZhbGlkIG9yZGVyLCBmb3VuZCBOYW1lIGJlZm9yZSBIYXNoJyk7XG4gICAgICB9XG4gICAgICBpZiAobGluay5Uc2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncHJvdG9idWY6IChQQkxpbmspIGludmFsaWQgb3JkZXIsIGZvdW5kIFRzaXplIGJlZm9yZSBIYXNoJyk7XG4gICAgICB9XG4gICAgICA7XG4gICAgICBbbGluay5IYXNoLCBpbmRleF0gPSBkZWNvZGVCeXRlcyhieXRlcywgaW5kZXgpO1xuICAgIH0gZWxzZSBpZiAoZmllbGROdW0gPT09IDIpIHtcbiAgICAgIGlmIChsaW5rLk5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb3RvYnVmOiAoUEJMaW5rKSBkdXBsaWNhdGUgTmFtZSBzZWN0aW9uJyk7XG4gICAgICB9XG4gICAgICBpZiAod2lyZVR5cGUgIT09IDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBwcm90b2J1ZjogKFBCTGluaykgd3Jvbmcgd2lyZVR5cGUgKCR7IHdpcmVUeXBlIH0pIGZvciBOYW1lYCk7XG4gICAgICB9XG4gICAgICBpZiAobGluay5Uc2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncHJvdG9idWY6IChQQkxpbmspIGludmFsaWQgb3JkZXIsIGZvdW5kIFRzaXplIGJlZm9yZSBOYW1lJyk7XG4gICAgICB9XG4gICAgICBsZXQgYnl0cztcbiAgICAgIFtieXRzLCBpbmRleF0gPSBkZWNvZGVCeXRlcyhieXRlcywgaW5kZXgpO1xuICAgICAgbGluay5OYW1lID0gdGV4dERlY29kZXIuZGVjb2RlKGJ5dHMpO1xuICAgIH0gZWxzZSBpZiAoZmllbGROdW0gPT09IDMpIHtcbiAgICAgIGlmIChsaW5rLlRzaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcm90b2J1ZjogKFBCTGluaykgZHVwbGljYXRlIFRzaXplIHNlY3Rpb24nKTtcbiAgICAgIH1cbiAgICAgIGlmICh3aXJlVHlwZSAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHByb3RvYnVmOiAoUEJMaW5rKSB3cm9uZyB3aXJlVHlwZSAoJHsgd2lyZVR5cGUgfSkgZm9yIFRzaXplYCk7XG4gICAgICB9XG4gICAgICA7XG4gICAgICBbbGluay5Uc2l6ZSwgaW5kZXhdID0gZGVjb2RlVmFyaW50KGJ5dGVzLCBpbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgcHJvdG9idWY6IChQQkxpbmspIGludmFsaWQgZmllbGROdW1iZXIsIGV4cGVjdGVkIDEsIDIgb3IgMywgZ290ICR7IGZpZWxkTnVtIH1gKTtcbiAgICB9XG4gIH1cbiAgaWYgKGluZGV4ID4gbCkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvdG9idWY6IChQQkxpbmspIHVuZXhwZWN0ZWQgZW5kIG9mIGRhdGEnKTtcbiAgfVxuICByZXR1cm4gbGluaztcbn1cbmZ1bmN0aW9uIGRlY29kZU5vZGUoYnl0ZXMpIHtcbiAgY29uc3QgbCA9IGJ5dGVzLmxlbmd0aDtcbiAgbGV0IGluZGV4ID0gMDtcbiAgbGV0IGxpbmtzO1xuICBsZXQgbGlua3NCZWZvcmVEYXRhID0gZmFsc2U7XG4gIGxldCBkYXRhO1xuICB3aGlsZSAoaW5kZXggPCBsKSB7XG4gICAgbGV0IHdpcmVUeXBlLCBmaWVsZE51bTtcbiAgICBbd2lyZVR5cGUsIGZpZWxkTnVtLCBpbmRleF0gPSBkZWNvZGVLZXkoYnl0ZXMsIGluZGV4KTtcbiAgICBpZiAod2lyZVR5cGUgIT09IDIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgcHJvdG9idWY6IChQQk5vZGUpIGludmFsaWQgd2lyZVR5cGUsIGV4cGVjdGVkIDIsIGdvdCAkeyB3aXJlVHlwZSB9YCk7XG4gICAgfVxuICAgIGlmIChmaWVsZE51bSA9PT0gMSkge1xuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcm90b2J1ZjogKFBCTm9kZSkgZHVwbGljYXRlIERhdGEgc2VjdGlvbicpO1xuICAgICAgfVxuICAgICAgO1xuICAgICAgW2RhdGEsIGluZGV4XSA9IGRlY29kZUJ5dGVzKGJ5dGVzLCBpbmRleCk7XG4gICAgICBpZiAobGlua3MpIHtcbiAgICAgICAgbGlua3NCZWZvcmVEYXRhID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGZpZWxkTnVtID09PSAyKSB7XG4gICAgICBpZiAobGlua3NCZWZvcmVEYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncHJvdG9idWY6IChQQk5vZGUpIGR1cGxpY2F0ZSBMaW5rcyBzZWN0aW9uJyk7XG4gICAgICB9IGVsc2UgaWYgKCFsaW5rcykge1xuICAgICAgICBsaW5rcyA9IFtdO1xuICAgICAgfVxuICAgICAgbGV0IGJ5dHM7XG4gICAgICBbYnl0cywgaW5kZXhdID0gZGVjb2RlQnl0ZXMoYnl0ZXMsIGluZGV4KTtcbiAgICAgIGxpbmtzLnB1c2goZGVjb2RlTGluayhieXRzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgcHJvdG9idWY6IChQQk5vZGUpIGludmFsaWQgZmllbGROdW1iZXIsIGV4cGVjdGVkIDEgb3IgMiwgZ290ICR7IGZpZWxkTnVtIH1gKTtcbiAgICB9XG4gIH1cbiAgaWYgKGluZGV4ID4gbCkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvdG9idWY6IChQQk5vZGUpIHVuZXhwZWN0ZWQgZW5kIG9mIGRhdGEnKTtcbiAgfVxuICBjb25zdCBub2RlID0ge307XG4gIGlmIChkYXRhKSB7XG4gICAgbm9kZS5EYXRhID0gZGF0YTtcbiAgfVxuICBub2RlLkxpbmtzID0gbGlua3MgfHwgW107XG4gIHJldHVybiBub2RlO1xufVxuXG5leHBvcnRzLmRlY29kZU5vZGUgPSBkZWNvZGVOb2RlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ipld/dag-pb/cjs/src/pb-decode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ipld/dag-pb/cjs/src/pb-encode.js":
/*!********************************************************!*\
  !*** ./node_modules/@ipld/dag-pb/cjs/src/pb-encode.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst textEncoder = new TextEncoder();\nconst maxInt32 = 2 ** 32;\nconst maxUInt32 = 2 ** 31;\nfunction encodeLink(link, bytes) {\n  let i = bytes.length;\n  if (typeof link.Tsize === 'number') {\n    if (link.Tsize < 0) {\n      throw new Error('Tsize cannot be negative');\n    }\n    if (!Number.isSafeInteger(link.Tsize)) {\n      throw new Error('Tsize too large for encoding');\n    }\n    i = encodeVarint(bytes, i, link.Tsize) - 1;\n    bytes[i] = 24;\n  }\n  if (typeof link.Name === 'string') {\n    const nameBytes = textEncoder.encode(link.Name);\n    i -= nameBytes.length;\n    bytes.set(nameBytes, i);\n    i = encodeVarint(bytes, i, nameBytes.length) - 1;\n    bytes[i] = 18;\n  }\n  if (link.Hash) {\n    i -= link.Hash.length;\n    bytes.set(link.Hash, i);\n    i = encodeVarint(bytes, i, link.Hash.length) - 1;\n    bytes[i] = 10;\n  }\n  return bytes.length - i;\n}\nfunction encodeNode(node) {\n  const size = sizeNode(node);\n  const bytes = new Uint8Array(size);\n  let i = size;\n  if (node.Data) {\n    i -= node.Data.length;\n    bytes.set(node.Data, i);\n    i = encodeVarint(bytes, i, node.Data.length) - 1;\n    bytes[i] = 10;\n  }\n  if (node.Links) {\n    for (let index = node.Links.length - 1; index >= 0; index--) {\n      const size = encodeLink(node.Links[index], bytes.subarray(0, i));\n      i -= size;\n      i = encodeVarint(bytes, i, size) - 1;\n      bytes[i] = 18;\n    }\n  }\n  return bytes;\n}\nfunction sizeLink(link) {\n  let n = 0;\n  if (link.Hash) {\n    const l = link.Hash.length;\n    n += 1 + l + sov(l);\n  }\n  if (typeof link.Name === 'string') {\n    const l = textEncoder.encode(link.Name).length;\n    n += 1 + l + sov(l);\n  }\n  if (typeof link.Tsize === 'number') {\n    n += 1 + sov(link.Tsize);\n  }\n  return n;\n}\nfunction sizeNode(node) {\n  let n = 0;\n  if (node.Data) {\n    const l = node.Data.length;\n    n += 1 + l + sov(l);\n  }\n  if (node.Links) {\n    for (const link of node.Links) {\n      const l = sizeLink(link);\n      n += 1 + l + sov(l);\n    }\n  }\n  return n;\n}\nfunction encodeVarint(bytes, offset, v) {\n  offset -= sov(v);\n  const base = offset;\n  while (v >= maxUInt32) {\n    bytes[offset++] = v & 127 | 128;\n    v /= 128;\n  }\n  while (v >= 128) {\n    bytes[offset++] = v & 127 | 128;\n    v >>>= 7;\n  }\n  bytes[offset] = v;\n  return base;\n}\nfunction sov(x) {\n  if (x % 2 === 0) {\n    x++;\n  }\n  return Math.floor((len64(x) + 6) / 7);\n}\nfunction len64(x) {\n  let n = 0;\n  if (x >= maxInt32) {\n    x = Math.floor(x / maxInt32);\n    n = 32;\n  }\n  if (x >= 1 << 16) {\n    x >>>= 16;\n    n += 16;\n  }\n  if (x >= 1 << 8) {\n    x >>>= 8;\n    n += 8;\n  }\n  return n + len8tab[x];\n}\nconst len8tab = [\n  0,\n  1,\n  2,\n  2,\n  3,\n  3,\n  3,\n  3,\n  4,\n  4,\n  4,\n  4,\n  4,\n  4,\n  4,\n  4,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8\n];\n\nexports.encodeNode = encodeNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ipld/dag-pb/cjs/src/pb-encode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ipld/dag-pb/cjs/src/util.js":
/*!***************************************************!*\
  !*** ./node_modules/@ipld/dag-pb/cjs/src/util.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar cid = __webpack_require__(/*! multiformats/cid */ \"(ssr)/./node_modules/multiformats/cjs/src/cid.js\");\n\nconst pbNodeProperties = [\n  'Data',\n  'Links'\n];\nconst pbLinkProperties = [\n  'Hash',\n  'Name',\n  'Tsize'\n];\nconst textEncoder = new TextEncoder();\nfunction linkComparator(a, b) {\n  if (a === b) {\n    return 0;\n  }\n  const abuf = a.Name ? textEncoder.encode(a.Name) : [];\n  const bbuf = b.Name ? textEncoder.encode(b.Name) : [];\n  let x = abuf.length;\n  let y = bbuf.length;\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (abuf[i] !== bbuf[i]) {\n      x = abuf[i];\n      y = bbuf[i];\n      break;\n    }\n  }\n  return x < y ? -1 : y < x ? 1 : 0;\n}\nfunction hasOnlyProperties(node, properties) {\n  return !Object.keys(node).some(p => !properties.includes(p));\n}\nfunction asLink(link) {\n  if (typeof link.asCID === 'object') {\n    const Hash = cid.CID.asCID(link);\n    if (!Hash) {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n    return { Hash };\n  }\n  if (typeof link !== 'object' || Array.isArray(link)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  const pbl = {};\n  if (link.Hash) {\n    let cid$1 = cid.CID.asCID(link.Hash);\n    try {\n      if (!cid$1) {\n        if (typeof link.Hash === 'string') {\n          cid$1 = cid.CID.parse(link.Hash);\n        } else if (link.Hash instanceof Uint8Array) {\n          cid$1 = cid.CID.decode(link.Hash);\n        }\n      }\n    } catch (e) {\n      throw new TypeError(`Invalid DAG-PB form: ${ e.message }`);\n    }\n    if (cid$1) {\n      pbl.Hash = cid$1;\n    }\n  }\n  if (!pbl.Hash) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  if (typeof link.Name === 'string') {\n    pbl.Name = link.Name;\n  }\n  if (typeof link.Tsize === 'number') {\n    pbl.Tsize = link.Tsize;\n  }\n  return pbl;\n}\nfunction prepare(node) {\n  if (node instanceof Uint8Array || typeof node === 'string') {\n    node = { Data: node };\n  }\n  if (typeof node !== 'object' || Array.isArray(node)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  const pbn = {};\n  if (node.Data !== undefined) {\n    if (typeof node.Data === 'string') {\n      pbn.Data = textEncoder.encode(node.Data);\n    } else if (node.Data instanceof Uint8Array) {\n      pbn.Data = node.Data;\n    } else {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n  }\n  if (node.Links !== undefined) {\n    if (Array.isArray(node.Links)) {\n      pbn.Links = node.Links.map(asLink);\n      pbn.Links.sort(linkComparator);\n    } else {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n  } else {\n    pbn.Links = [];\n  }\n  return pbn;\n}\nfunction validate(node) {\n  if (!node || typeof node !== 'object' || Array.isArray(node)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  if (!hasOnlyProperties(node, pbNodeProperties)) {\n    throw new TypeError('Invalid DAG-PB form (extraneous properties)');\n  }\n  if (node.Data !== undefined && !(node.Data instanceof Uint8Array)) {\n    throw new TypeError('Invalid DAG-PB form (Data must be a Uint8Array)');\n  }\n  if (!Array.isArray(node.Links)) {\n    throw new TypeError('Invalid DAG-PB form (Links must be an array)');\n  }\n  for (let i = 0; i < node.Links.length; i++) {\n    const link = node.Links[i];\n    if (!link || typeof link !== 'object' || Array.isArray(link)) {\n      throw new TypeError('Invalid DAG-PB form (bad link object)');\n    }\n    if (!hasOnlyProperties(link, pbLinkProperties)) {\n      throw new TypeError('Invalid DAG-PB form (extraneous properties on link object)');\n    }\n    if (!link.Hash) {\n      throw new TypeError('Invalid DAG-PB form (link must have a Hash)');\n    }\n    if (link.Hash.asCID !== link.Hash) {\n      throw new TypeError('Invalid DAG-PB form (link Hash must be a CID)');\n    }\n    if (link.Name !== undefined && typeof link.Name !== 'string') {\n      throw new TypeError('Invalid DAG-PB form (link Name must be a string)');\n    }\n    if (link.Tsize !== undefined && (typeof link.Tsize !== 'number' || link.Tsize % 1 !== 0)) {\n      throw new TypeError('Invalid DAG-PB form (link Tsize must be an integer)');\n    }\n    if (i > 0 && linkComparator(link, node.Links[i - 1]) === -1) {\n      throw new TypeError('Invalid DAG-PB form (links must be sorted by Name bytes)');\n    }\n  }\n}\nfunction createNode(data, links = []) {\n  return prepare({\n    Data: data,\n    Links: links\n  });\n}\nfunction createLink(name, size, cid) {\n  return asLink({\n    Hash: cid,\n    Name: name,\n    Tsize: size\n  });\n}\n\nexports.createLink = createLink;\nexports.createNode = createNode;\nexports.prepare = prepare;\nexports.validate = validate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGlwbGQvZGFnLXBiL2Nqcy9zcmMvdXRpbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELFVBQVUsbUJBQU8sQ0FBQywwRUFBa0I7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxTQUFTO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sbURBQW1ELFdBQVc7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHVCQUF1QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQixlQUFlO0FBQ2YsZ0JBQWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtd2FsbGV0Ly4vbm9kZV9tb2R1bGVzL0BpcGxkL2RhZy1wYi9janMvc3JjL3V0aWwuanM/OTUxNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBjaWQgPSByZXF1aXJlKCdtdWx0aWZvcm1hdHMvY2lkJyk7XG5cbmNvbnN0IHBiTm9kZVByb3BlcnRpZXMgPSBbXG4gICdEYXRhJyxcbiAgJ0xpbmtzJ1xuXTtcbmNvbnN0IHBiTGlua1Byb3BlcnRpZXMgPSBbXG4gICdIYXNoJyxcbiAgJ05hbWUnLFxuICAnVHNpemUnXG5dO1xuY29uc3QgdGV4dEVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcbmZ1bmN0aW9uIGxpbmtDb21wYXJhdG9yKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBjb25zdCBhYnVmID0gYS5OYW1lID8gdGV4dEVuY29kZXIuZW5jb2RlKGEuTmFtZSkgOiBbXTtcbiAgY29uc3QgYmJ1ZiA9IGIuTmFtZSA/IHRleHRFbmNvZGVyLmVuY29kZShiLk5hbWUpIDogW107XG4gIGxldCB4ID0gYWJ1Zi5sZW5ndGg7XG4gIGxldCB5ID0gYmJ1Zi5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFidWZbaV0gIT09IGJidWZbaV0pIHtcbiAgICAgIHggPSBhYnVmW2ldO1xuICAgICAgeSA9IGJidWZbaV07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHggPCB5ID8gLTEgOiB5IDwgeCA/IDEgOiAwO1xufVxuZnVuY3Rpb24gaGFzT25seVByb3BlcnRpZXMobm9kZSwgcHJvcGVydGllcykge1xuICByZXR1cm4gIU9iamVjdC5rZXlzKG5vZGUpLnNvbWUocCA9PiAhcHJvcGVydGllcy5pbmNsdWRlcyhwKSk7XG59XG5mdW5jdGlvbiBhc0xpbmsobGluaykge1xuICBpZiAodHlwZW9mIGxpbmsuYXNDSUQgPT09ICdvYmplY3QnKSB7XG4gICAgY29uc3QgSGFzaCA9IGNpZC5DSUQuYXNDSUQobGluayk7XG4gICAgaWYgKCFIYXNoKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIERBRy1QQiBmb3JtJyk7XG4gICAgfVxuICAgIHJldHVybiB7IEhhc2ggfTtcbiAgfVxuICBpZiAodHlwZW9mIGxpbmsgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkobGluaykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIERBRy1QQiBmb3JtJyk7XG4gIH1cbiAgY29uc3QgcGJsID0ge307XG4gIGlmIChsaW5rLkhhc2gpIHtcbiAgICBsZXQgY2lkJDEgPSBjaWQuQ0lELmFzQ0lEKGxpbmsuSGFzaCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghY2lkJDEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBsaW5rLkhhc2ggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgY2lkJDEgPSBjaWQuQ0lELnBhcnNlKGxpbmsuSGFzaCk7XG4gICAgICAgIH0gZWxzZSBpZiAobGluay5IYXNoIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICAgIGNpZCQxID0gY2lkLkNJRC5kZWNvZGUobGluay5IYXNoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgREFHLVBCIGZvcm06ICR7IGUubWVzc2FnZSB9YCk7XG4gICAgfVxuICAgIGlmIChjaWQkMSkge1xuICAgICAgcGJsLkhhc2ggPSBjaWQkMTtcbiAgICB9XG4gIH1cbiAgaWYgKCFwYmwuSGFzaCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgREFHLVBCIGZvcm0nKTtcbiAgfVxuICBpZiAodHlwZW9mIGxpbmsuTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICBwYmwuTmFtZSA9IGxpbmsuTmFtZTtcbiAgfVxuICBpZiAodHlwZW9mIGxpbmsuVHNpemUgPT09ICdudW1iZXInKSB7XG4gICAgcGJsLlRzaXplID0gbGluay5Uc2l6ZTtcbiAgfVxuICByZXR1cm4gcGJsO1xufVxuZnVuY3Rpb24gcHJlcGFyZShub2RlKSB7XG4gIGlmIChub2RlIGluc3RhbmNlb2YgVWludDhBcnJheSB8fCB0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICBub2RlID0geyBEYXRhOiBub2RlIH07XG4gIH1cbiAgaWYgKHR5cGVvZiBub2RlICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG5vZGUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBEQUctUEIgZm9ybScpO1xuICB9XG4gIGNvbnN0IHBibiA9IHt9O1xuICBpZiAobm9kZS5EYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIG5vZGUuRGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHBibi5EYXRhID0gdGV4dEVuY29kZXIuZW5jb2RlKG5vZGUuRGF0YSk7XG4gICAgfSBlbHNlIGlmIChub2RlLkRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICBwYm4uRGF0YSA9IG5vZGUuRGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBEQUctUEIgZm9ybScpO1xuICAgIH1cbiAgfVxuICBpZiAobm9kZS5MaW5rcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobm9kZS5MaW5rcykpIHtcbiAgICAgIHBibi5MaW5rcyA9IG5vZGUuTGlua3MubWFwKGFzTGluayk7XG4gICAgICBwYm4uTGlua3Muc29ydChsaW5rQ29tcGFyYXRvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgREFHLVBCIGZvcm0nKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcGJuLkxpbmtzID0gW107XG4gIH1cbiAgcmV0dXJuIHBibjtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlKG5vZGUpIHtcbiAgaWYgKCFub2RlIHx8IHR5cGVvZiBub2RlICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG5vZGUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBEQUctUEIgZm9ybScpO1xuICB9XG4gIGlmICghaGFzT25seVByb3BlcnRpZXMobm9kZSwgcGJOb2RlUHJvcGVydGllcykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIERBRy1QQiBmb3JtIChleHRyYW5lb3VzIHByb3BlcnRpZXMpJyk7XG4gIH1cbiAgaWYgKG5vZGUuRGF0YSAhPT0gdW5kZWZpbmVkICYmICEobm9kZS5EYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIERBRy1QQiBmb3JtIChEYXRhIG11c3QgYmUgYSBVaW50OEFycmF5KScpO1xuICB9XG4gIGlmICghQXJyYXkuaXNBcnJheShub2RlLkxpbmtzKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgREFHLVBCIGZvcm0gKExpbmtzIG11c3QgYmUgYW4gYXJyYXkpJyk7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLkxpbmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgbGluayA9IG5vZGUuTGlua3NbaV07XG4gICAgaWYgKCFsaW5rIHx8IHR5cGVvZiBsaW5rICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KGxpbmspKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIERBRy1QQiBmb3JtIChiYWQgbGluayBvYmplY3QpJyk7XG4gICAgfVxuICAgIGlmICghaGFzT25seVByb3BlcnRpZXMobGluaywgcGJMaW5rUHJvcGVydGllcykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgREFHLVBCIGZvcm0gKGV4dHJhbmVvdXMgcHJvcGVydGllcyBvbiBsaW5rIG9iamVjdCknKTtcbiAgICB9XG4gICAgaWYgKCFsaW5rLkhhc2gpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgREFHLVBCIGZvcm0gKGxpbmsgbXVzdCBoYXZlIGEgSGFzaCknKTtcbiAgICB9XG4gICAgaWYgKGxpbmsuSGFzaC5hc0NJRCAhPT0gbGluay5IYXNoKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIERBRy1QQiBmb3JtIChsaW5rIEhhc2ggbXVzdCBiZSBhIENJRCknKTtcbiAgICB9XG4gICAgaWYgKGxpbmsuTmFtZSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBsaW5rLk5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIERBRy1QQiBmb3JtIChsaW5rIE5hbWUgbXVzdCBiZSBhIHN0cmluZyknKTtcbiAgICB9XG4gICAgaWYgKGxpbmsuVHNpemUgIT09IHVuZGVmaW5lZCAmJiAodHlwZW9mIGxpbmsuVHNpemUgIT09ICdudW1iZXInIHx8IGxpbmsuVHNpemUgJSAxICE9PSAwKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBEQUctUEIgZm9ybSAobGluayBUc2l6ZSBtdXN0IGJlIGFuIGludGVnZXIpJyk7XG4gICAgfVxuICAgIGlmIChpID4gMCAmJiBsaW5rQ29tcGFyYXRvcihsaW5rLCBub2RlLkxpbmtzW2kgLSAxXSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIERBRy1QQiBmb3JtIChsaW5rcyBtdXN0IGJlIHNvcnRlZCBieSBOYW1lIGJ5dGVzKScpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlTm9kZShkYXRhLCBsaW5rcyA9IFtdKSB7XG4gIHJldHVybiBwcmVwYXJlKHtcbiAgICBEYXRhOiBkYXRhLFxuICAgIExpbmtzOiBsaW5rc1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUxpbmsobmFtZSwgc2l6ZSwgY2lkKSB7XG4gIHJldHVybiBhc0xpbmsoe1xuICAgIEhhc2g6IGNpZCxcbiAgICBOYW1lOiBuYW1lLFxuICAgIFRzaXplOiBzaXplXG4gIH0pO1xufVxuXG5leHBvcnRzLmNyZWF0ZUxpbmsgPSBjcmVhdGVMaW5rO1xuZXhwb3J0cy5jcmVhdGVOb2RlID0gY3JlYXRlTm9kZTtcbmV4cG9ydHMucHJlcGFyZSA9IHByZXBhcmU7XG5leHBvcnRzLnZhbGlkYXRlID0gdmFsaWRhdGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ipld/dag-pb/cjs/src/util.js\n");

/***/ })

};
;