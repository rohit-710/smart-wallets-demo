"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/merge-options";
exports.ids = ["vendor-chunks/merge-options"];
exports.modules = {

/***/ "(ssr)/./node_modules/merge-options/index.js":
/*!*********************************************!*\
  !*** ./node_modules/merge-options/index.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\nconst isOptionObject = __webpack_require__(/*! is-plain-obj */ \"(ssr)/./node_modules/is-plain-obj/index.js\");\n\nconst {hasOwnProperty} = Object.prototype;\nconst {propertyIsEnumerable} = Object;\nconst defineProperty = (object, name, value) => Object.defineProperty(object, name, {\n\tvalue,\n\twritable: true,\n\tenumerable: true,\n\tconfigurable: true\n});\n\nconst globalThis = this;\nconst defaultMergeOptions = {\n\tconcatArrays: false,\n\tignoreUndefined: false\n};\n\nconst getEnumerableOwnPropertyKeys = value => {\n\tconst keys = [];\n\n\tfor (const key in value) {\n\t\tif (hasOwnProperty.call(value, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\n\t/* istanbul ignore else  */\n\tif (Object.getOwnPropertySymbols) {\n\t\tconst symbols = Object.getOwnPropertySymbols(value);\n\n\t\tfor (const symbol of symbols) {\n\t\t\tif (propertyIsEnumerable.call(value, symbol)) {\n\t\t\t\tkeys.push(symbol);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn keys;\n};\n\nfunction clone(value) {\n\tif (Array.isArray(value)) {\n\t\treturn cloneArray(value);\n\t}\n\n\tif (isOptionObject(value)) {\n\t\treturn cloneOptionObject(value);\n\t}\n\n\treturn value;\n}\n\nfunction cloneArray(array) {\n\tconst result = array.slice(0, 0);\n\n\tgetEnumerableOwnPropertyKeys(array).forEach(key => {\n\t\tdefineProperty(result, key, clone(array[key]));\n\t});\n\n\treturn result;\n}\n\nfunction cloneOptionObject(object) {\n\tconst result = Object.getPrototypeOf(object) === null ? Object.create(null) : {};\n\n\tgetEnumerableOwnPropertyKeys(object).forEach(key => {\n\t\tdefineProperty(result, key, clone(object[key]));\n\t});\n\n\treturn result;\n}\n\n/**\n * @param {*} merged already cloned\n * @param {*} source something to merge\n * @param {string[]} keys keys to merge\n * @param {Object} config Config Object\n * @returns {*} cloned Object\n */\nconst mergeKeys = (merged, source, keys, config) => {\n\tkeys.forEach(key => {\n\t\tif (typeof source[key] === 'undefined' && config.ignoreUndefined) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Do not recurse into prototype chain of merged\n\t\tif (key in merged && merged[key] !== Object.getPrototypeOf(merged)) {\n\t\t\tdefineProperty(merged, key, merge(merged[key], source[key], config));\n\t\t} else {\n\t\t\tdefineProperty(merged, key, clone(source[key]));\n\t\t}\n\t});\n\n\treturn merged;\n};\n\n/**\n * @param {*} merged already cloned\n * @param {*} source something to merge\n * @param {Object} config Config Object\n * @returns {*} cloned Object\n *\n * see [Array.prototype.concat ( ...arguments )](http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.concat)\n */\nconst concatArrays = (merged, source, config) => {\n\tlet result = merged.slice(0, 0);\n\tlet resultIndex = 0;\n\n\t[merged, source].forEach(array => {\n\t\tconst indices = [];\n\n\t\t// `result.concat(array)` with cloning\n\t\tfor (let k = 0; k < array.length; k++) {\n\t\t\tif (!hasOwnProperty.call(array, k)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tindices.push(String(k));\n\n\t\t\tif (array === merged) {\n\t\t\t\t// Already cloned\n\t\t\t\tdefineProperty(result, resultIndex++, array[k]);\n\t\t\t} else {\n\t\t\t\tdefineProperty(result, resultIndex++, clone(array[k]));\n\t\t\t}\n\t\t}\n\n\t\t// Merge non-index keys\n\t\tresult = mergeKeys(result, array, getEnumerableOwnPropertyKeys(array).filter(key => !indices.includes(key)), config);\n\t});\n\n\treturn result;\n};\n\n/**\n * @param {*} merged already cloned\n * @param {*} source something to merge\n * @param {Object} config Config Object\n * @returns {*} cloned Object\n */\nfunction merge(merged, source, config) {\n\tif (config.concatArrays && Array.isArray(merged) && Array.isArray(source)) {\n\t\treturn concatArrays(merged, source, config);\n\t}\n\n\tif (!isOptionObject(source) || !isOptionObject(merged)) {\n\t\treturn clone(source);\n\t}\n\n\treturn mergeKeys(merged, source, getEnumerableOwnPropertyKeys(source), config);\n}\n\nmodule.exports = function (...options) {\n\tconst config = merge(clone(defaultMergeOptions), (this !== globalThis && this) || {}, defaultMergeOptions);\n\tlet merged = {_: {}};\n\n\tfor (const option of options) {\n\t\tif (option === undefined) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!isOptionObject(option)) {\n\t\t\tthrow new TypeError('`' + option + '` is not an Option Object');\n\t\t}\n\n\t\tmerged = merge(merged, {_: option}, config);\n\t}\n\n\treturn merged._;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWVyZ2Utb3B0aW9ucy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLHVCQUF1QixtQkFBTyxDQUFDLGdFQUFjOztBQUU3QyxPQUFPLGdCQUFnQjtBQUN2QixPQUFPLHNCQUFzQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBLFdBQVcsR0FBRztBQUNkLFdBQVcsR0FBRztBQUNkLFdBQVcsVUFBVTtBQUNyQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxHQUFHO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBLFdBQVcsR0FBRztBQUNkLFdBQVcsR0FBRztBQUNkLFdBQVcsUUFBUTtBQUNuQixhQUFhLEdBQUc7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0Isa0JBQWtCO0FBQ3BDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLEdBQUc7QUFDZCxXQUFXLEdBQUc7QUFDZCxXQUFXLFFBQVE7QUFDbkIsYUFBYSxHQUFHO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxxRkFBcUY7QUFDckYsZUFBZTs7QUFFZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCLFVBQVU7QUFDcEM7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXdhbGxldC8uL25vZGVfbW9kdWxlcy9tZXJnZS1vcHRpb25zL2luZGV4LmpzPzQyMjgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgaXNPcHRpb25PYmplY3QgPSByZXF1aXJlKCdpcy1wbGFpbi1vYmonKTtcblxuY29uc3Qge2hhc093blByb3BlcnR5fSA9IE9iamVjdC5wcm90b3R5cGU7XG5jb25zdCB7cHJvcGVydHlJc0VudW1lcmFibGV9ID0gT2JqZWN0O1xuY29uc3QgZGVmaW5lUHJvcGVydHkgPSAob2JqZWN0LCBuYW1lLCB2YWx1ZSkgPT4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgbmFtZSwge1xuXHR2YWx1ZSxcblx0d3JpdGFibGU6IHRydWUsXG5cdGVudW1lcmFibGU6IHRydWUsXG5cdGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbmNvbnN0IGdsb2JhbFRoaXMgPSB0aGlzO1xuY29uc3QgZGVmYXVsdE1lcmdlT3B0aW9ucyA9IHtcblx0Y29uY2F0QXJyYXlzOiBmYWxzZSxcblx0aWdub3JlVW5kZWZpbmVkOiBmYWxzZVxufTtcblxuY29uc3QgZ2V0RW51bWVyYWJsZU93blByb3BlcnR5S2V5cyA9IHZhbHVlID0+IHtcblx0Y29uc3Qga2V5cyA9IFtdO1xuXG5cdGZvciAoY29uc3Qga2V5IGluIHZhbHVlKSB7XG5cdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpIHtcblx0XHRcdGtleXMucHVzaChrZXkpO1xuXHRcdH1cblx0fVxuXG5cdC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICAqL1xuXHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdGNvbnN0IHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHZhbHVlKTtcblxuXHRcdGZvciAoY29uc3Qgc3ltYm9sIG9mIHN5bWJvbHMpIHtcblx0XHRcdGlmIChwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCBzeW1ib2wpKSB7XG5cdFx0XHRcdGtleXMucHVzaChzeW1ib2wpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBrZXlzO1xufTtcblxuZnVuY3Rpb24gY2xvbmUodmFsdWUpIHtcblx0aWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0cmV0dXJuIGNsb25lQXJyYXkodmFsdWUpO1xuXHR9XG5cblx0aWYgKGlzT3B0aW9uT2JqZWN0KHZhbHVlKSkge1xuXHRcdHJldHVybiBjbG9uZU9wdGlvbk9iamVjdCh2YWx1ZSk7XG5cdH1cblxuXHRyZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGNsb25lQXJyYXkoYXJyYXkpIHtcblx0Y29uc3QgcmVzdWx0ID0gYXJyYXkuc2xpY2UoMCwgMCk7XG5cblx0Z2V0RW51bWVyYWJsZU93blByb3BlcnR5S2V5cyhhcnJheSkuZm9yRWFjaChrZXkgPT4ge1xuXHRcdGRlZmluZVByb3BlcnR5KHJlc3VsdCwga2V5LCBjbG9uZShhcnJheVtrZXldKSk7XG5cdH0pO1xuXG5cdHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNsb25lT3B0aW9uT2JqZWN0KG9iamVjdCkge1xuXHRjb25zdCByZXN1bHQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KSA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcblxuXHRnZXRFbnVtZXJhYmxlT3duUHJvcGVydHlLZXlzKG9iamVjdCkuZm9yRWFjaChrZXkgPT4ge1xuXHRcdGRlZmluZVByb3BlcnR5KHJlc3VsdCwga2V5LCBjbG9uZShvYmplY3Rba2V5XSkpO1xuXHR9KTtcblxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Kn0gbWVyZ2VkIGFscmVhZHkgY2xvbmVkXG4gKiBAcGFyYW0geyp9IHNvdXJjZSBzb21ldGhpbmcgdG8gbWVyZ2VcbiAqIEBwYXJhbSB7c3RyaW5nW119IGtleXMga2V5cyB0byBtZXJnZVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBDb25maWcgT2JqZWN0XG4gKiBAcmV0dXJucyB7Kn0gY2xvbmVkIE9iamVjdFxuICovXG5jb25zdCBtZXJnZUtleXMgPSAobWVyZ2VkLCBzb3VyY2UsIGtleXMsIGNvbmZpZykgPT4ge1xuXHRrZXlzLmZvckVhY2goa2V5ID0+IHtcblx0XHRpZiAodHlwZW9mIHNvdXJjZVtrZXldID09PSAndW5kZWZpbmVkJyAmJiBjb25maWcuaWdub3JlVW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRG8gbm90IHJlY3Vyc2UgaW50byBwcm90b3R5cGUgY2hhaW4gb2YgbWVyZ2VkXG5cdFx0aWYgKGtleSBpbiBtZXJnZWQgJiYgbWVyZ2VkW2tleV0gIT09IE9iamVjdC5nZXRQcm90b3R5cGVPZihtZXJnZWQpKSB7XG5cdFx0XHRkZWZpbmVQcm9wZXJ0eShtZXJnZWQsIGtleSwgbWVyZ2UobWVyZ2VkW2tleV0sIHNvdXJjZVtrZXldLCBjb25maWcpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGVmaW5lUHJvcGVydHkobWVyZ2VkLCBrZXksIGNsb25lKHNvdXJjZVtrZXldKSk7XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gbWVyZ2VkO1xufTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG1lcmdlZCBhbHJlYWR5IGNsb25lZFxuICogQHBhcmFtIHsqfSBzb3VyY2Ugc29tZXRoaW5nIHRvIG1lcmdlXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIENvbmZpZyBPYmplY3RcbiAqIEByZXR1cm5zIHsqfSBjbG9uZWQgT2JqZWN0XG4gKlxuICogc2VlIFtBcnJheS5wcm90b3R5cGUuY29uY2F0ICggLi4uYXJndW1lbnRzICldKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1hcnJheS5wcm90b3R5cGUuY29uY2F0KVxuICovXG5jb25zdCBjb25jYXRBcnJheXMgPSAobWVyZ2VkLCBzb3VyY2UsIGNvbmZpZykgPT4ge1xuXHRsZXQgcmVzdWx0ID0gbWVyZ2VkLnNsaWNlKDAsIDApO1xuXHRsZXQgcmVzdWx0SW5kZXggPSAwO1xuXG5cdFttZXJnZWQsIHNvdXJjZV0uZm9yRWFjaChhcnJheSA9PiB7XG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xuXG5cdFx0Ly8gYHJlc3VsdC5jb25jYXQoYXJyYXkpYCB3aXRoIGNsb25pbmdcblx0XHRmb3IgKGxldCBrID0gMDsgayA8IGFycmF5Lmxlbmd0aDsgaysrKSB7XG5cdFx0XHRpZiAoIWhhc093blByb3BlcnR5LmNhbGwoYXJyYXksIGspKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpbmRpY2VzLnB1c2goU3RyaW5nKGspKTtcblxuXHRcdFx0aWYgKGFycmF5ID09PSBtZXJnZWQpIHtcblx0XHRcdFx0Ly8gQWxyZWFkeSBjbG9uZWRcblx0XHRcdFx0ZGVmaW5lUHJvcGVydHkocmVzdWx0LCByZXN1bHRJbmRleCsrLCBhcnJheVtrXSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZpbmVQcm9wZXJ0eShyZXN1bHQsIHJlc3VsdEluZGV4KyssIGNsb25lKGFycmF5W2tdKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTWVyZ2Ugbm9uLWluZGV4IGtleXNcblx0XHRyZXN1bHQgPSBtZXJnZUtleXMocmVzdWx0LCBhcnJheSwgZ2V0RW51bWVyYWJsZU93blByb3BlcnR5S2V5cyhhcnJheSkuZmlsdGVyKGtleSA9PiAhaW5kaWNlcy5pbmNsdWRlcyhrZXkpKSwgY29uZmlnKTtcblx0fSk7XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogQHBhcmFtIHsqfSBtZXJnZWQgYWxyZWFkeSBjbG9uZWRcbiAqIEBwYXJhbSB7Kn0gc291cmNlIHNvbWV0aGluZyB0byBtZXJnZVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBDb25maWcgT2JqZWN0XG4gKiBAcmV0dXJucyB7Kn0gY2xvbmVkIE9iamVjdFxuICovXG5mdW5jdGlvbiBtZXJnZShtZXJnZWQsIHNvdXJjZSwgY29uZmlnKSB7XG5cdGlmIChjb25maWcuY29uY2F0QXJyYXlzICYmIEFycmF5LmlzQXJyYXkobWVyZ2VkKSAmJiBBcnJheS5pc0FycmF5KHNvdXJjZSkpIHtcblx0XHRyZXR1cm4gY29uY2F0QXJyYXlzKG1lcmdlZCwgc291cmNlLCBjb25maWcpO1xuXHR9XG5cblx0aWYgKCFpc09wdGlvbk9iamVjdChzb3VyY2UpIHx8ICFpc09wdGlvbk9iamVjdChtZXJnZWQpKSB7XG5cdFx0cmV0dXJuIGNsb25lKHNvdXJjZSk7XG5cdH1cblxuXHRyZXR1cm4gbWVyZ2VLZXlzKG1lcmdlZCwgc291cmNlLCBnZXRFbnVtZXJhYmxlT3duUHJvcGVydHlLZXlzKHNvdXJjZSksIGNvbmZpZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKC4uLm9wdGlvbnMpIHtcblx0Y29uc3QgY29uZmlnID0gbWVyZ2UoY2xvbmUoZGVmYXVsdE1lcmdlT3B0aW9ucyksICh0aGlzICE9PSBnbG9iYWxUaGlzICYmIHRoaXMpIHx8IHt9LCBkZWZhdWx0TWVyZ2VPcHRpb25zKTtcblx0bGV0IG1lcmdlZCA9IHtfOiB7fX07XG5cblx0Zm9yIChjb25zdCBvcHRpb24gb2Ygb3B0aW9ucykge1xuXHRcdGlmIChvcHRpb24gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0aWYgKCFpc09wdGlvbk9iamVjdChvcHRpb24pKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdgJyArIG9wdGlvbiArICdgIGlzIG5vdCBhbiBPcHRpb24gT2JqZWN0Jyk7XG5cdFx0fVxuXG5cdFx0bWVyZ2VkID0gbWVyZ2UobWVyZ2VkLCB7Xzogb3B0aW9ufSwgY29uZmlnKTtcblx0fVxuXG5cdHJldHVybiBtZXJnZWQuXztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/merge-options/index.js\n");

/***/ })

};
;